<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DB_platypuS`Blog</title>
  
  <subtitle>也许不正确但并非无意义</subtitle>
  <link href="https://db-hanty.github.io/atom.xml" rel="self"/>
  
  <link href="https://db-hanty.github.io/"/>
  <updated>2025-09-12T12:31:51.893Z</updated>
  <id>https://db-hanty.github.io/</id>
  
  <author>
    <name>DB_platypuS</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用git在GitHub上快速部署项目</title>
    <link href="https://db-hanty.github.io/posts/6efdc0e0.html"/>
    <id>https://db-hanty.github.io/posts/6efdc0e0.html</id>
    <published>2025-09-10T19:29:48.000Z</published>
    <updated>2025-09-12T12:31:51.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用git在GitHub上快速部署项目"><a href="#使用git在GitHub上快速部署项目" class="headerlink" title="使用git在GitHub上快速部署项目"></a>使用git在GitHub上快速部署项目</h1><p>Github网址：<a href="https://github.com/">text</a></p><h2 id="一、创建GitHub仓库"><a href="#一、创建GitHub仓库" class="headerlink" title="一、创建GitHub仓库"></a>一、创建GitHub仓库</h2><p>点击创建<br><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-09-10%20193318.png" alt=""></p><p>创建仓库界面<br><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-09-10%20193751.png" alt=""></p><h2 id="二、打开项目终端或者通过git-bash打开项目"><a href="#二、打开项目终端或者通过git-bash打开项目" class="headerlink" title="二、打开项目终端或者通过git bash打开项目"></a>二、打开项目终端或者通过git bash打开项目</h2><p><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-09-10%20194017.png" alt=""></p><h2 id="三、创建git仓库"><a href="#三、创建git仓库" class="headerlink" title="三、创建git仓库"></a>三、创建git仓库</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h2 id="四、将所有文件添加到仓库中"><a href="#四、将所有文件添加到仓库中" class="headerlink" title="四、将所有文件添加到仓库中"></a>四、将所有文件添加到仓库中</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><h2 id="五、提交所有文件到仓库中"><a href="#五、提交所有文件到仓库中" class="headerlink" title="五、提交所有文件到仓库中"></a>五、提交所有文件到仓库中</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;commit&quot;</span></span><br></pre></td></tr></table></figure><h2 id="六、将仓库与GitHub仓库关联"><a href="#六、将仓库与GitHub仓库关联" class="headerlink" title="六、将仓库与GitHub仓库关联"></a>六、将仓库与GitHub仓库关联</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin + ssh</span><br></pre></td></tr></table></figure><p>⚠️<code>ssh</code>为GitHub仓库的ssh地址</p><p><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-09-10%20194714.png" alt=""></p><h2 id="七、将仓库推送到GitHub仓库中"><a href="#七、将仓库推送到GitHub仓库中" class="headerlink" title="七、将仓库推送到GitHub仓库中"></a>七、将仓库推送到GitHub仓库中</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>⚠️注意文件夹必须有文件否则会报错<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: failed to push some refs to <span class="string">&#x27;github.com:DB-HanTy/demo01.git&#x27;</span></span><br></pre></td></tr></table></figure><br>⚠️推送到master分支</p><p><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-09-10%20195301.png" alt=""></p><h1 id="恭喜，项目已成功部署到GitHub仓库中！"><a href="#恭喜，项目已成功部署到GitHub仓库中！" class="headerlink" title="恭喜，项目已成功部署到GitHub仓库中！"></a>恭喜，项目已成功部署到GitHub仓库中！</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用git在GitHub上快速部署项目&quot;&gt;&lt;a href=&quot;#使用git在GitHub上快速部署项目&quot; class=&quot;headerlink&quot; title=&quot;使用git在GitHub上快速部署项目&quot;&gt;&lt;/a&gt;使用git在GitHub上快速部署项目&lt;/h1&gt;&lt;p&gt;Gi</summary>
      
    
    
    
    <category term="技术" scheme="https://db-hanty.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="https://db-hanty.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="工具" scheme="https://db-hanty.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>外观模式</title>
    <link href="https://db-hanty.github.io/posts/f7de8aa8.html"/>
    <id>https://db-hanty.github.io/posts/f7de8aa8.html</id>
    <published>2025-09-08T20:38:06.000Z</published>
    <updated>2025-09-12T12:31:51.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="外观模式（Facade-Pattern）"><a href="#外观模式（Facade-Pattern）" class="headerlink" title="外观模式（Facade Pattern）"></a>外观模式（Facade Pattern）</h1><p>在设计模式中，<strong>外观模式</strong>（Facade Pattern）是一种结构型模式。它为复杂子系统提供一个统一的高层次接口，简化了客户端的使用方式，并隐藏了系统的内部实现细节。</p><hr><h2 id="模式的作用"><a href="#模式的作用" class="headerlink" title="模式的作用"></a>模式的作用</h2><blockquote><p><strong>核心思想</strong>：通过一个统一的接口与子系统交互，降低客户端的复杂性，使得系统更易于使用。</p></blockquote><hr><h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><p>在软件系统中，子系统可能包含多个复杂的模块和接口，客户端如果直接与这些模块交互，会导致以下问题：  </p><ul><li>客户端与子系统高度耦合。  </li><li>客户端代码复杂，难以维护。  </li></ul><p>外观模式通过引入一个外观类（Facade），将复杂的子系统调用进行封装，向外部暴露简单的接口，从而解决上述问题。</p><hr><h2 id="优缺点分析"><a href="#优缺点分析" class="headerlink" title="优缺点分析"></a>优缺点分析</h2><h3 id="✅-优点"><a href="#✅-优点" class="headerlink" title="✅ 优点"></a>✅ 优点</h3><ol><li><strong>减少依赖</strong>：客户端只依赖外观类，降低了与子系统的耦合。  </li><li><strong>提高灵活性</strong>：子系统内部变化不会影响客户端。  </li><li><strong>增强安全性</strong>：对外隐藏了子系统的实现细节，只提供必要的接口。  </li></ol><h3 id="⚠️-缺点"><a href="#⚠️-缺点" class="headerlink" title="⚠️ 缺点"></a>⚠️ 缺点</h3><ul><li><strong>违反开闭原则</strong>：当子系统需要修改时，可能需要同时修改外观类，降低了扩展性。  </li></ul><hr><h2 id="UML-示意图"><a href="#UML-示意图" class="headerlink" title="UML 示意图"></a>UML 示意图</h2><p><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.png" alt=""></p><hr><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>下面用 Java 演示外观模式的实现。</p><h3 id="接口及其实现类"><a href="#接口及其实现类" class="headerlink" title="接口及其实现类"></a>接口及其实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Rectangle::draw()&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Square::draw()&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Circle::draw()&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="外观类"><a href="#外观类" class="headerlink" title="外观类"></a>外观类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShapeMaker</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> Shape circle;</span><br><span class="line">   <span class="keyword">private</span> Shape rectangle;</span><br><span class="line">   <span class="keyword">private</span> Shape square;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">ShapeMaker</span><span class="params">()</span> &#123;</span><br><span class="line">      circle = <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">      rectangle = <span class="keyword">new</span> <span class="title class_">Rectangle</span>();</span><br><span class="line">      square = <span class="keyword">new</span> <span class="title class_">Square</span>();</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawCircle</span><span class="params">()</span>&#123;</span><br><span class="line">      circle.draw();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawRectangle</span><span class="params">()</span>&#123;</span><br><span class="line">      rectangle.draw();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawSquare</span><span class="params">()</span>&#123;</span><br><span class="line">      square.draw();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FacadePatternDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ShapeMaker</span> <span class="variable">shapeMaker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShapeMaker</span>();</span><br><span class="line"> </span><br><span class="line">      shapeMaker.drawCircle();</span><br><span class="line">      shapeMaker.drawRectangle();</span><br><span class="line">      shapeMaker.drawSquare();      </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Circle::draw()</span><br><span class="line">Rectangle::draw()</span><br><span class="line">Square::draw()</span><br></pre></td></tr></table></figure><hr><h2 id="实际应用实例"><a href="#实际应用实例" class="headerlink" title="实际应用实例"></a>实际应用实例</h2><ul><li><strong>Java 三层架构</strong>：在表示层、业务逻辑层和数据访问层之间，通过外观模式提供统一接口，简化各层的访问。  </li><li><strong>图形库</strong>：通过外观类封装多个图形对象的绘制接口，客户端只需调用外观类即可操作复杂图形系统。  </li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>外观模式的本质是 <strong>为复杂子系统提供一个简单的接口</strong>：  </p><ul><li>适用于需要简化客户端调用的场景。  </li><li>通过解耦降低了系统复杂性。  </li><li>但在扩展性上需要权衡，因为外观类的修改可能涉及子系统的调整。  </li></ul><p>合理使用外观模式，能让系统在保持灵活性的同时，提高可用性和可维护性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;外观模式（Facade-Pattern）&quot;&gt;&lt;a href=&quot;#外观模式（Facade-Pattern）&quot; class=&quot;headerlink&quot; title=&quot;外观模式（Facade Pattern）&quot;&gt;&lt;/a&gt;外观模式（Facade Pattern）&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="技术" scheme="https://db-hanty.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="https://db-hanty.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="设计模式" scheme="https://db-hanty.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>观察者模式</title>
    <link href="https://db-hanty.github.io/posts/9a246216.html"/>
    <id>https://db-hanty.github.io/posts/9a246216.html</id>
    <published>2025-09-08T20:20:46.000Z</published>
    <updated>2025-09-12T12:31:51.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="观察者模式（Observer-Pattern）"><a href="#观察者模式（Observer-Pattern）" class="headerlink" title="观察者模式（Observer Pattern）"></a>观察者模式（Observer Pattern）</h1><p>在设计模式中，<strong>观察者模式</strong>（Observer Pattern）是一种行为型模式。它定义了一种对象间的一对多依赖关系，当一个对象（主题/被观察者）的状态发生改变时，所有依赖它的对象（观察者）都会自动收到通知并更新。</p><hr><h2 id="模式的作用"><a href="#模式的作用" class="headerlink" title="模式的作用"></a>模式的作用</h2><blockquote><p><strong>核心思想</strong>：一个对象状态变化时，自动通知其他依赖它的对象，保持对象间的低耦合和高协作性。</p></blockquote><hr><h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><p>在软件开发中，经常会遇到这样的问题：<br>当一个对象的状态发生变化时，如何让依赖它的其他对象自动感知并响应，而不需要两者紧密耦合？  </p><p>例如：  </p><ul><li>图形界面中，数据模型更新后，多个视图需要自动刷新。  </li><li>消息系统中，一个事件发生时，多个监听器需要收到通知。  </li></ul><p>观察者模式就是为了解决这种 <strong>一对多的通知机制</strong>。</p><hr><h2 id="优缺点分析"><a href="#优缺点分析" class="headerlink" title="优缺点分析"></a>优缺点分析</h2><h3 id="✅-优点"><a href="#✅-优点" class="headerlink" title="✅ 优点"></a>✅ 优点</h3><ul><li><strong>抽象耦合</strong>：主题和观察者通过抽象接口依赖，解耦明显。  </li><li><strong>触发机制</strong>：当主题状态发生变化时，会自动触发通知机制。  </li></ul><h3 id="⚠️-缺点"><a href="#⚠️-缺点" class="headerlink" title="⚠️ 缺点"></a>⚠️ 缺点</h3><ul><li><strong>性能问题</strong>：如果观察者数量过多，通知会带来性能消耗。  </li><li><strong>循环依赖</strong>：不当使用可能导致循环调用，甚至系统崩溃。  </li><li><strong>缺乏变化详情</strong>：观察者只知道主题发生了变化，但不一定知道具体变化了什么。  </li></ul><hr><h2 id="UML-示意图"><a href="#UML-示意图" class="headerlink" title="UML 示意图"></a>UML 示意图</h2><p><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.png" alt=""></p><hr><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>下面用 Java 演示观察者模式的实现。</p><h3 id="主题类（被观察对象）"><a href="#主题类（被观察对象）" class="headerlink" title="主题类（被观察对象）"></a>主题类（被观察对象）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Observer&gt;();</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> state;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(<span class="type">int</span> state)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.state = state;</span><br><span class="line">      notifyAllObservers();</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attach</span><span class="params">(Observer observer)</span>&#123;</span><br><span class="line">      observers.add(observer);      </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyAllObservers</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">         observer.update();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象观察者类"><a href="#抽象观察者类" class="headerlink" title="抽象观察者类"></a>抽象观察者类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">   <span class="keyword">protected</span> Subject subject;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体观察者类"><a href="#具体观察者类" class="headerlink" title="具体观察者类"></a>具体观察者类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryObserver</span> <span class="keyword">extends</span> <span class="title class_">Observer</span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">BinaryObserver</span><span class="params">(Subject subject)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.subject = subject;</span><br><span class="line">      <span class="built_in">this</span>.subject.attach(<span class="built_in">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Binary String: &quot;</span> </span><br><span class="line">         + Integer.toBinaryString(subject.getState()));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OctalObserver</span> <span class="keyword">extends</span> <span class="title class_">Observer</span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">OctalObserver</span><span class="params">(Subject subject)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.subject = subject;</span><br><span class="line">      <span class="built_in">this</span>.subject.attach(<span class="built_in">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Octal String: &quot;</span> </span><br><span class="line">         + Integer.toOctalString(subject.getState()));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HexaObserver</span> <span class="keyword">extends</span> <span class="title class_">Observer</span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">HexaObserver</span><span class="params">(Subject subject)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.subject = subject;</span><br><span class="line">      <span class="built_in">this</span>.subject.attach(<span class="built_in">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Hex String: &quot;</span> </span><br><span class="line">         + Integer.toHexString(subject.getState()).toUpperCase());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObserverPatternDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Subject</span>();</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">HexaObserver</span>(subject);</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">OctalObserver</span>(subject);</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">BinaryObserver</span>(subject);</span><br><span class="line"> </span><br><span class="line">      System.out.println(<span class="string">&quot;First state change: 15&quot;</span>);   </span><br><span class="line">      subject.setState(<span class="number">15</span>);</span><br><span class="line"> </span><br><span class="line">      System.out.println(<span class="string">&quot;Second state change: 10&quot;</span>);  </span><br><span class="line">      subject.setState(<span class="number">10</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">First state change: 15</span><br><span class="line">Hex String: F</span><br><span class="line">Octal String: 17</span><br><span class="line">Binary String: 1111</span><br><span class="line"></span><br><span class="line">Second state change: 10</span><br><span class="line">Hex String: A</span><br><span class="line">Octal String: 12</span><br><span class="line">Binary String: 1010</span><br></pre></td></tr></table></figure><hr><h2 id="实际应用场景"><a href="#实际应用场景" class="headerlink" title="实际应用场景"></a>实际应用场景</h2><ul><li><strong>GUI 系统</strong>：按钮点击事件通知多个监听器。  </li><li><strong>订阅-发布系统</strong>：例如消息队列中的订阅机制。  </li><li><strong>分布式系统</strong>：当节点状态发生变化时，自动通知其他节点同步。  </li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>观察者模式是一种非常常用的设计模式，它解决了对象间的通知和依赖问题。  </p><ul><li>它降低了对象之间的耦合度。  </li><li>提供了一种灵活的触发机制。  </li><li>但在使用时需要注意性能和循环依赖问题。  </li></ul><p>理解并灵活运用观察者模式，有助于我们在开发中实现更清晰、更可扩展的系统架构。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;观察者模式（Observer-Pattern）&quot;&gt;&lt;a href=&quot;#观察者模式（Observer-Pattern）&quot; class=&quot;headerlink&quot; title=&quot;观察者模式（Observer Pattern）&quot;&gt;&lt;/a&gt;观察者模式（Observer Pa</summary>
      
    
    
    
    <category term="技术" scheme="https://db-hanty.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="https://db-hanty.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="设计模式" scheme="https://db-hanty.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>适配器模式</title>
    <link href="https://db-hanty.github.io/posts/f5c535ea.html"/>
    <id>https://db-hanty.github.io/posts/f5c535ea.html</id>
    <published>2025-09-06T15:20:48.000Z</published>
    <updated>2025-09-12T12:31:51.894Z</updated>
    
    <content type="html"><![CDATA[<h1 id="适配器模式（Adapter-Pattern）"><a href="#适配器模式（Adapter-Pattern）" class="headerlink" title="适配器模式（Adapter Pattern）"></a>适配器模式（Adapter Pattern）</h1><p>在设计模式中，<strong>适配器模式</strong>（Adapter Pattern）是一种结构型模式。它的核心思想是通过一个中间件（适配器），将一个类的接口转换为客户端期望的接口，从而让原本接口不兼容的类可以协同工作。</p><hr><h2 id="模式的作用"><a href="#模式的作用" class="headerlink" title="模式的作用"></a>模式的作用</h2><blockquote><p><strong>核心思想</strong>：通过适配器，将原有类的接口转换成客户端需要的另一种接口，从而实现兼容。</p></blockquote><p>这使得我们能够在不修改原有类的情况下，将其融入新的环境中。</p><hr><h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><p>在实际开发中，我们经常遇到这样的场景：已有的类功能很好，但其接口与当前系统的要求不一致。如果直接修改原有类，既破坏了封闭原则，又可能影响已有代码的稳定性。<br>此时引入 <strong>适配器模式</strong>，在中间增加一个“适配器”，即可解决接口不兼容的问题。</p><hr><h2 id="优缺点分析"><a href="#优缺点分析" class="headerlink" title="优缺点分析"></a>优缺点分析</h2><h3 id="✅-优点"><a href="#✅-优点" class="headerlink" title="✅ 优点"></a>✅ 优点</h3><ul><li><strong>促进协作</strong>：即使类之间没有直接关系，也能通过适配器协同工作。  </li><li><strong>提高复用性</strong>：原有类无需修改即可被复用。  </li><li><strong>增强透明性</strong>：客户端调用时无感知，保持接口一致性。  </li><li><strong>灵活性高</strong>：可以灵活地适配多种不同接口。  </li></ul><h3 id="⚠️-缺点"><a href="#⚠️-缺点" class="headerlink" title="⚠️ 缺点"></a>⚠️ 缺点</h3><ul><li><strong>结构可能复杂</strong>：过度使用适配器可能导致系统结构混乱。  </li><li><strong>Java 的局限</strong>：由于 Java 只能单继承，一个适配器类通常只能适配一个类。  </li></ul><hr><h2 id="UML-示意图"><a href="#UML-示意图" class="headerlink" title="UML 示意图"></a>UML 示意图</h2><p><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.png" alt=""></p><hr><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>下面通过一个多媒体播放器的例子，来演示适配器模式的实现。</p><h3 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MediaPlayer</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">(String audioType, String fileName)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AdvancedMediaPlayer</span> &#123; </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playVlc</span><span class="params">(String fileName)</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playMp4</span><span class="params">(String fileName)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高级播放器的实现类"><a href="#高级播放器的实现类" class="headerlink" title="高级播放器的实现类"></a>高级播放器的实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VlcPlayer</span> <span class="keyword">implements</span> <span class="title class_">AdvancedMediaPlayer</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playVlc</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Playing vlc file. Name: &quot;</span> + fileName);      </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playMp4</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">      <span class="comment">// 什么也不做</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mp4Player</span> <span class="keyword">implements</span> <span class="title class_">AdvancedMediaPlayer</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playVlc</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">      <span class="comment">// 什么也不做</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playMp4</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Playing mp4 file. Name: &quot;</span> + fileName);      </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="适配器类"><a href="#适配器类" class="headerlink" title="适配器类"></a>适配器类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MediaAdapter</span> <span class="keyword">implements</span> <span class="title class_">MediaPlayer</span> &#123;</span><br><span class="line">   AdvancedMediaPlayer advancedMusicPlayer;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">MediaAdapter</span><span class="params">(String audioType)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(audioType.equalsIgnoreCase(<span class="string">&quot;vlc&quot;</span>))&#123;</span><br><span class="line">         advancedMusicPlayer = <span class="keyword">new</span> <span class="title class_">VlcPlayer</span>();       </span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (audioType.equalsIgnoreCase(<span class="string">&quot;mp4&quot;</span>))&#123;</span><br><span class="line">         advancedMusicPlayer = <span class="keyword">new</span> <span class="title class_">Mp4Player</span>();</span><br><span class="line">      &#125;  </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">(String audioType, String fileName)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(audioType.equalsIgnoreCase(<span class="string">&quot;vlc&quot;</span>))&#123;</span><br><span class="line">         advancedMusicPlayer.playVlc(fileName);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(audioType.equalsIgnoreCase(<span class="string">&quot;mp4&quot;</span>))&#123;</span><br><span class="line">         advancedMusicPlayer.playMp4(fileName);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="音频播放器类（客户端）"><a href="#音频播放器类（客户端）" class="headerlink" title="音频播放器类（客户端）"></a>音频播放器类（客户端）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AudioPlayer</span> <span class="keyword">implements</span> <span class="title class_">MediaPlayer</span> &#123;</span><br><span class="line">   MediaAdapter mediaAdapter; </span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">(String audioType, String fileName)</span> &#123;    </span><br><span class="line">      <span class="comment">// 播放 mp3 音乐文件的内置支持</span></span><br><span class="line">      <span class="keyword">if</span>(audioType.equalsIgnoreCase(<span class="string">&quot;mp3&quot;</span>))&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;Playing mp3 file. Name: &quot;</span> + fileName);         </span><br><span class="line">      &#125; </span><br><span class="line">      <span class="comment">// 使用适配器播放其他格式</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(audioType.equalsIgnoreCase(<span class="string">&quot;vlc&quot;</span>) || audioType.equalsIgnoreCase(<span class="string">&quot;mp4&quot;</span>))&#123;</span><br><span class="line">         mediaAdapter = <span class="keyword">new</span> <span class="title class_">MediaAdapter</span>(audioType);</span><br><span class="line">         mediaAdapter.play(audioType, fileName);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;Invalid media. &quot;</span> + audioType + <span class="string">&quot; format not supported&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdapterPatternDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">AudioPlayer</span> <span class="variable">audioPlayer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AudioPlayer</span>();</span><br><span class="line"> </span><br><span class="line">      audioPlayer.play(<span class="string">&quot;mp3&quot;</span>, <span class="string">&quot;beyond the horizon.mp3&quot;</span>);</span><br><span class="line">      audioPlayer.play(<span class="string">&quot;mp4&quot;</span>, <span class="string">&quot;alone.mp4&quot;</span>);</span><br><span class="line">      audioPlayer.play(<span class="string">&quot;vlc&quot;</span>, <span class="string">&quot;far far away.vlc&quot;</span>);</span><br><span class="line">      audioPlayer.play(<span class="string">&quot;avi&quot;</span>, <span class="string">&quot;mind me.avi&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Playing mp3 file. Name: beyond the horizon.mp3</span><br><span class="line">Playing mp4 file. Name: alone.mp4</span><br><span class="line">Playing vlc file. Name: far far away.vlc</span><br><span class="line">Invalid media. avi format not supported</span><br></pre></td></tr></table></figure><hr><h2 id="实际应用实例"><a href="#实际应用实例" class="headerlink" title="实际应用实例"></a>实际应用实例</h2><ul><li><strong>电源适配器</strong>：笔记本电脑电源适配器，将 220V 转换为可用电压。  </li><li><strong>Java IO 类库</strong>：<code>InputStreamReader</code> 就是典型的适配器模式，用于将字节流转换为字符流。  </li><li><strong>第三方库整合</strong>：通过适配器将第三方 API 与现有系统对接。  </li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>适配器模式通过在中间增加一个“适配器”，使接口不兼容的类能够协同工作，既避免了对原有类的修改，又保证了系统的灵活性和扩展性。  </p><p><strong>适用场景</strong>：  </p><ul><li>系统需要复用一些现有类，但其接口与新系统不匹配。  </li><li>需要统一多个不同接口的类。  </li><li>集成第三方库时需要做接口转换。  </li></ul><p>掌握适配器模式，有助于提升系统的可复用性和扩展性，是实际开发中常用的结构型模式之一。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;适配器模式（Adapter-Pattern）&quot;&gt;&lt;a href=&quot;#适配器模式（Adapter-Pattern）&quot; class=&quot;headerlink&quot; title=&quot;适配器模式（Adapter Pattern）&quot;&gt;&lt;/a&gt;适配器模式（Adapter Patter</summary>
      
    
    
    
    <category term="技术" scheme="https://db-hanty.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="https://db-hanty.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="设计模式" scheme="https://db-hanty.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>责任链模式</title>
    <link href="https://db-hanty.github.io/posts/6208627e.html"/>
    <id>https://db-hanty.github.io/posts/6208627e.html</id>
    <published>2025-09-06T14:58:44.000Z</published>
    <updated>2025-09-12T12:31:51.894Z</updated>
    
    <content type="html"><![CDATA[<h1 id="责任链模式（Chain-of-Responsibility-Pattern）"><a href="#责任链模式（Chain-of-Responsibility-Pattern）" class="headerlink" title="责任链模式（Chain of Responsibility Pattern）"></a>责任链模式（Chain of Responsibility Pattern）</h1><p>在设计模式中，<strong>责任链模式</strong>（Chain of Responsibility Pattern）是一种行为型模式。它通过将多个处理对象串联成一条链，请求会沿着这条链传递，直到被某个处理对象处理为止。这样，发送者无需关心由谁来处理请求，接收者之间也可以灵活组合。</p><hr><h2 id="模式的作用"><a href="#模式的作用" class="headerlink" title="模式的作用"></a>模式的作用</h2><blockquote><p><strong>核心思想</strong>：把多个处理器串成链，请求在链上传递，直到有对象处理为止。</p></blockquote><hr><h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><p>在传统设计中，发送者必须明确知道接收者是谁，导致两者耦合度过高。责任链模式的引入，使得：  </p><ul><li>发送者和接收者之间解耦。  </li><li>多个对象都有机会处理请求，而发送者不必关心到底由谁来处理。  </li></ul><hr><h2 id="优缺点分析"><a href="#优缺点分析" class="headerlink" title="优缺点分析"></a>优缺点分析</h2><h3 id="✅-优点"><a href="#✅-优点" class="headerlink" title="✅ 优点"></a>✅ 优点</h3><ol><li><strong>降低耦合度</strong>：发送者与接收者解耦，结构更加灵活。  </li><li><strong>简化对象</strong>：请求的发送方不需要关心处理的细节。  </li><li><strong>灵活性高</strong>：可以在运行时动态调整链的顺序或成员。  </li><li><strong>易于扩展</strong>：新增处理类只需加入链即可。  </li></ol><h3 id="⚠️-缺点"><a href="#⚠️-缺点" class="headerlink" title="⚠️ 缺点"></a>⚠️ 缺点</h3><ol><li><strong>请求可能未被处理</strong>：链上的处理器可能都不接收请求。  </li><li><strong>性能问题</strong>：请求可能需要传递较长的链，影响效率。  </li><li><strong>调试困难</strong>：运行时不容易观察链的传递过程，容易出错。  </li></ol><hr><h2 id="UML-示意图"><a href="#UML-示意图" class="headerlink" title="UML 示意图"></a>UML 示意图</h2><p><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F.png" alt=""></p><hr><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>下面通过日志记录器的例子来演示责任链模式。</p><h3 id="抽象记录器类"><a href="#抽象记录器类" class="headerlink" title="抽象记录器类"></a>抽象记录器类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractLogger</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">INFO</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">DEBUG</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ERROR</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">protected</span> <span class="type">int</span> level;</span><br><span class="line">   <span class="keyword">protected</span> AbstractLogger nextLogger;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNextLogger</span><span class="params">(AbstractLogger nextLogger)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.nextLogger = nextLogger;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logMessage</span><span class="params">(<span class="type">int</span> level, String message)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">this</span>.level &lt;= level)&#123;</span><br><span class="line">         write(message);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(nextLogger != <span class="literal">null</span>)&#123;</span><br><span class="line">         nextLogger.logMessage(level, message);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String message)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体记录器实现"><a href="#具体记录器实现" class="headerlink" title="具体记录器实现"></a>具体记录器实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsoleLogger</span> <span class="keyword">extends</span> <span class="title class_">AbstractLogger</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">ConsoleLogger</span><span class="params">(<span class="type">int</span> level)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.level = level;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String message)</span> &#123;    </span><br><span class="line">      System.out.println(<span class="string">&quot;Standard Console::Logger: &quot;</span> + message);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ErrorLogger</span> <span class="keyword">extends</span> <span class="title class_">AbstractLogger</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">ErrorLogger</span><span class="params">(<span class="type">int</span> level)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.level = level;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String message)</span> &#123;    </span><br><span class="line">      System.out.println(<span class="string">&quot;Error Console::Logger: &quot;</span> + message);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileLogger</span> <span class="keyword">extends</span> <span class="title class_">AbstractLogger</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">FileLogger</span><span class="params">(<span class="type">int</span> level)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.level = level;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String message)</span> &#123;    </span><br><span class="line">      System.out.println(<span class="string">&quot;File::Logger: &quot;</span> + message);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChainPatternDemo</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> AbstractLogger <span class="title function_">getChainOfLoggers</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="type">AbstractLogger</span> <span class="variable">errorLogger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorLogger</span>(AbstractLogger.ERROR);</span><br><span class="line">      <span class="type">AbstractLogger</span> <span class="variable">fileLogger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileLogger</span>(AbstractLogger.DEBUG);</span><br><span class="line">      <span class="type">AbstractLogger</span> <span class="variable">consoleLogger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConsoleLogger</span>(AbstractLogger.INFO);</span><br><span class="line"> </span><br><span class="line">      errorLogger.setNextLogger(fileLogger);</span><br><span class="line">      fileLogger.setNextLogger(consoleLogger);</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">return</span> errorLogger;  </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">AbstractLogger</span> <span class="variable">loggerChain</span> <span class="operator">=</span> getChainOfLoggers();</span><br><span class="line"> </span><br><span class="line">      loggerChain.logMessage(AbstractLogger.INFO, <span class="string">&quot;This is an information.&quot;</span>);</span><br><span class="line">      loggerChain.logMessage(AbstractLogger.DEBUG, <span class="string">&quot;This is a debug level information.&quot;</span>);</span><br><span class="line">      loggerChain.logMessage(AbstractLogger.ERROR, <span class="string">&quot;This is an error information.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Standard Console::Logger: This is an information.</span><br><span class="line">File::Logger: This is a debug level information.</span><br><span class="line">Standard Console::Logger: This is a debug level information.</span><br><span class="line">Error Console::Logger: This is an error information.</span><br><span class="line">File::Logger: This is an error information.</span><br><span class="line">Standard Console::Logger: This is an error information.</span><br></pre></td></tr></table></figure><hr><h2 id="实际应用实例"><a href="#实际应用实例" class="headerlink" title="实际应用实例"></a>实际应用实例</h2><ul><li><strong>Web 服务器</strong>：如 Apache Tomcat 的编码处理、Servlet 的 Filter 链。  </li><li><strong>拦截器机制</strong>：如 Struts2 的拦截器实现。  </li><li><strong>日志系统</strong>：不同级别的日志可以依次传递到不同的处理器。  </li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>责任链模式通过让请求在一条链上传递，避免了请求发送者和接收者的紧耦合，提升了系统的灵活性和可扩展性。  </p><p><strong>适用场景</strong>：  </p><ul><li>需要多个对象处理同一请求时。  </li><li>请求的具体接收者在运行时才能确定时。  </li><li>系统需要动态增加或调整处理逻辑时。  </li></ul><p>掌握责任链模式，有助于更好地理解 <strong>拦截器链、日志系统、权限控制</strong> 等机制的底层原理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;责任链模式（Chain-of-Responsibility-Pattern）&quot;&gt;&lt;a href=&quot;#责任链模式（Chain-of-Responsibility-Pattern）&quot; class=&quot;headerlink&quot; title=&quot;责任链模式（Chain of R</summary>
      
    
    
    
    <category term="技术" scheme="https://db-hanty.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="https://db-hanty.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="设计模式" scheme="https://db-hanty.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="https://db-hanty.github.io/posts/7b510e10.html"/>
    <id>https://db-hanty.github.io/posts/7b510e10.html</id>
    <published>2025-09-03T22:26:36.000Z</published>
    <updated>2025-09-12T12:31:51.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代理模式（Proxy-Pattern）"><a href="#代理模式（Proxy-Pattern）" class="headerlink" title="代理模式（Proxy Pattern）"></a>代理模式（Proxy Pattern）</h1><p>在设计模式中，<strong>代理模式</strong>（Proxy Pattern）是一种结构型模式，它通过引入一个代理对象来间接访问目标对象，从而在不改变目标对象功能的前提下，增加额外的控制逻辑。</p><hr><h2 id="模式的作用"><a href="#模式的作用" class="headerlink" title="模式的作用"></a>模式的作用</h2><blockquote><p><strong>核心思想</strong>：通过代理对象来控制对真实对象的访问。</p></blockquote><p>这样可以避免直接操作真实对象带来的问题，例如：对象创建代价过高、需要安全校验、远程调用等。</p><hr><h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><p>在实际开发中，直接访问某些对象可能会遇到以下问题：  </p><ul><li>对象创建成本高（如加载大文件、初始化复杂资源）。  </li><li>需要权限或安全控制，不能让调用方直接访问。  </li><li>需要远程访问或延迟加载。  </li></ul><p>代理模式通过增加中间代理层，解决了这些问题。</p><hr><h2 id="优缺点分析"><a href="#优缺点分析" class="headerlink" title="优缺点分析"></a>优缺点分析</h2><h3 id="✅-优点"><a href="#✅-优点" class="headerlink" title="✅ 优点"></a>✅ 优点</h3><ul><li><strong>职责分离</strong>：代理对象负责访问控制，真实对象专注于业务逻辑。  </li><li><strong>扩展性强</strong>：可以灵活增加功能（如缓存、日志、延迟加载）。  </li><li><strong>智能控制</strong>：代理可以对请求做智能处理，例如只在必要时才加载对象。  </li></ul><h3 id="⚠️-缺点"><a href="#⚠️-缺点" class="headerlink" title="⚠️ 缺点"></a>⚠️ 缺点</h3><ul><li><strong>性能开销</strong>：多了一层代理，可能会降低访问效率。  </li><li><strong>实现复杂</strong>：某些高级代理（如远程代理、动态代理）实现较复杂。  </li></ul><hr><h2 id="UML-示意图"><a href="#UML-示意图" class="headerlink" title="UML 示意图"></a>UML 示意图</h2><p><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.png" alt=""></p><hr><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>下面以图片加载为例，演示代理模式。</p><h3 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Image</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="真实对象类"><a href="#真实对象类" class="headerlink" title="真实对象类"></a>真实对象类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RealImage</span> <span class="keyword">implements</span> <span class="title class_">Image</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">private</span> String fileName;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">RealImage</span><span class="params">(String fileName)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.fileName = fileName;</span><br><span class="line">      loadFromDisk(fileName);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Displaying &quot;</span> + fileName);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadFromDisk</span><span class="params">(String fileName)</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Loading &quot;</span> + fileName);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代理对象类"><a href="#代理对象类" class="headerlink" title="代理对象类"></a>代理对象类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyImage</span> <span class="keyword">implements</span> <span class="title class_">Image</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RealImage realImage;</span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyImage</span><span class="params">(String fileName)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.fileName = fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(realImage == <span class="literal">null</span>)&#123;</span><br><span class="line">            realImage = <span class="keyword">new</span> <span class="title class_">RealImage</span>(fileName);</span><br><span class="line">        &#125;</span><br><span class="line">        realImage.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyPatternDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">Image</span> <span class="variable">image</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyImage</span>(<span class="string">&quot;test_10mb.jpg&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 图像将从磁盘加载</span></span><br><span class="line">      image.display(); </span><br><span class="line">      System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 图像不需要再次加载</span></span><br><span class="line">      image.display();  </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Loading test_10mb.jpg</span><br><span class="line">Displaying test_10mb.jpg</span><br><span class="line"></span><br><span class="line">Displaying test_10mb.jpg</span><br></pre></td></tr></table></figure><hr><h2 id="生活中的实例"><a href="#生活中的实例" class="headerlink" title="生活中的实例"></a>生活中的实例</h2><ul><li><strong>快捷方式</strong>：Windows 系统中的快捷方式就是文件或程序的代理。  </li><li><strong>Spring AOP</strong>：Spring 使用动态代理模式来实现面向切面编程（AOP），在方法调用前后织入额外逻辑（如日志、事务管理）。  </li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>代理模式通过引入代理对象，使我们在访问真实对象前后可以进行一系列操作。它不仅能降低系统开销，还能增强灵活性和安全性。  </p><p><strong>适用场景</strong>：  </p><ul><li>需要控制访问权限的对象。  </li><li>创建开销较大的对象（如大文件、远程连接）。  </li><li>需要在访问对象前后添加额外功能（如缓存、日志、延迟加载）。  </li></ul><p>掌握代理模式，不仅能帮助我们写出更灵活的代码，还能更好地理解如 <strong>AOP、RPC 框架</strong> 等技术的底层实现。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;代理模式（Proxy-Pattern）&quot;&gt;&lt;a href=&quot;#代理模式（Proxy-Pattern）&quot; class=&quot;headerlink&quot; title=&quot;代理模式（Proxy Pattern）&quot;&gt;&lt;/a&gt;代理模式（Proxy Pattern）&lt;/h1&gt;&lt;p&gt;在设</summary>
      
    
    
    
    <category term="技术" scheme="https://db-hanty.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="https://db-hanty.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="设计模式" scheme="https://db-hanty.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>模板方法模式</title>
    <link href="https://db-hanty.github.io/posts/ecc6414b.html"/>
    <id>https://db-hanty.github.io/posts/ecc6414b.html</id>
    <published>2025-09-01T23:25:05.000Z</published>
    <updated>2025-09-12T12:31:51.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模板方法模式（Template-Pattern）"><a href="#模板方法模式（Template-Pattern）" class="headerlink" title="模板方法模式（Template Pattern）"></a>模板方法模式（Template Pattern）</h1><p>在学习设计模式的过程中，<strong>模板方法模式</strong>（Template Pattern）是一个非常常见且实用的模式。它的核心思想是：<strong>定义一个算法的框架，并将一些步骤延迟到子类中实现，从而保证整体流程固定，同时允许子类灵活扩展细节</strong>。</p><hr><h2 id="模式的作用"><a href="#模式的作用" class="headerlink" title="模式的作用"></a>模式的作用</h2><p>模板方法模式通过在父类中封装算法的整体结构，避免了子类重复编写通用逻辑。子类只需实现特定的步骤，即可复用整体框架。</p><blockquote><p><strong>一句话总结</strong>：模板方法模式就是<strong>父类定流程，子类填细节</strong>。</p></blockquote><hr><h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><p>在实际开发中，不同的子类往往需要实现相似的逻辑，但其中的细节可能有所不同。若每个子类都独立实现完整的逻辑，难免会出现大量重复代码。模板方法模式通过<strong>抽象父类提取公共部分</strong>，有效解决了这个问题。</p><hr><h2 id="优缺点分析"><a href="#优缺点分析" class="headerlink" title="优缺点分析"></a>优缺点分析</h2><h3 id="✅-优点"><a href="#✅-优点" class="headerlink" title="✅ 优点"></a>✅ 优点</h3><ul><li><strong>封装不变部分</strong>：父类统一定义算法结构，保持整体流程稳定。  </li><li><strong>扩展可变部分</strong>：子类自由实现差异化的步骤，保证灵活性。  </li><li><strong>减少重复代码</strong>：提取公共逻辑，提升维护性和可读性。  </li></ul><h3 id="⚠️-缺点"><a href="#⚠️-缺点" class="headerlink" title="⚠️ 缺点"></a>⚠️ 缺点</h3><ul><li><strong>类数量增加</strong>：每种不同实现都需要一个子类，可能导致系统类较多。  </li></ul><hr><h2 id="UML-示意图"><a href="#UML-示意图" class="headerlink" title="UML 示意图"></a>UML 示意图</h2><p><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.png" alt=""></p><hr><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>下面通过一个小游戏的例子来演示模板方法模式。</p><h3 id="抽象类（模板）"><a href="#抽象类（模板）" class="headerlink" title="抽象类（模板）"></a>抽象类（模板）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">   <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">()</span>;</span><br><span class="line">   <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">startPlay</span><span class="params">()</span>;</span><br><span class="line">   <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">endPlay</span><span class="params">()</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 模板方法（定义整体流程）</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>&#123;</span><br><span class="line">      initialize();   <span class="comment">// 初始化游戏</span></span><br><span class="line">      startPlay();    <span class="comment">// 开始游戏</span></span><br><span class="line">      endPlay();      <span class="comment">// 结束游戏</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体子类"><a href="#具体子类" class="headerlink" title="具体子类"></a>具体子类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cricket</span> <span class="keyword">extends</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">endPlay</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Cricket Game Finished!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Cricket Game Initialized! Start playing.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">startPlay</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Cricket Game Started. Enjoy the game!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Football</span> <span class="keyword">extends</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">endPlay</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Football Game Finished!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Football Game Initialized! Start playing.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">startPlay</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Football Game Started. Enjoy the game!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplatePatternDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">Game</span> <span class="variable">game</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cricket</span>();</span><br><span class="line">      game.play();</span><br><span class="line"></span><br><span class="line">      System.out.println();</span><br><span class="line"></span><br><span class="line">      game = <span class="keyword">new</span> <span class="title class_">Football</span>();</span><br><span class="line">      game.play();      </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Cricket Game Initialized! Start playing.</span><br><span class="line">Cricket Game Started. Enjoy the game!</span><br><span class="line">Cricket Game Finished!</span><br><span class="line"></span><br><span class="line">Football Game Initialized! Start playing.</span><br><span class="line">Football Game Started. Enjoy the game!</span><br><span class="line">Football Game Finished!</span><br></pre></td></tr></table></figure><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>模板方法模式在软件开发中非常常见，尤其适合那些<strong>流程固定但步骤可变</strong>的场景。它通过父类统一流程、子类实现细节的方式，既提高了代码的复用性，又保持了灵活性。  </p><p><strong>应用场景举例</strong>：  </p><ul><li>游戏开发中定义“初始化 → 开始 → 结束”的固定流程。  </li><li>Web 框架中，父类定义请求处理流程，子类实现具体业务逻辑。  </li><li>数据处理管道中，父类定义整体处理步骤，子类实现具体处理方式。  </li></ul><p>掌握并灵活运用模板方法模式，可以让代码结构更加清晰、可维护性更强。  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;模板方法模式（Template-Pattern）&quot;&gt;&lt;a href=&quot;#模板方法模式（Template-Pattern）&quot; class=&quot;headerlink&quot; title=&quot;模板方法模式（Template Pattern）&quot;&gt;&lt;/a&gt;模板方法模式（Templat</summary>
      
    
    
    
    <category term="技术" scheme="https://db-hanty.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="https://db-hanty.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="设计模式" scheme="https://db-hanty.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>建造者模式</title>
    <link href="https://db-hanty.github.io/posts/fe816c3c.html"/>
    <id>https://db-hanty.github.io/posts/fe816c3c.html</id>
    <published>2025-08-22T23:20:22.000Z</published>
    <updated>2025-09-12T12:31:51.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="建造者模式（Builder-Pattern）学习总结"><a href="#建造者模式（Builder-Pattern）学习总结" class="headerlink" title="建造者模式（Builder Pattern）学习总结"></a>建造者模式（Builder Pattern）学习总结</h1><p>在设计模式中，<strong>建造者模式（Builder Pattern）</strong> 也称为生成器模式。它的核心思想是：<strong>将复杂对象的构建过程与表示分离，使得同样的构建过程可以创建不同的表示</strong>。这种模式常用于创建步骤固定但内部结构复杂的对象。</p><hr><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><blockquote><p>将一个复杂的构建过程与其表示相分离，使得同样的构建过程可以创建不同的表示。</p></blockquote><hr><h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><p>当我们需要 <strong>分步骤创建复杂对象</strong> 时，如果将构建逻辑和表示逻辑混在一起，代码会变得臃肿且难以维护。建造者模式就是为了解决这个问题。</p><hr><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p><strong>优点：</strong></p><ul><li>分离构建过程和表示，使得构建更加灵活。</li><li>隐藏具体构建细节，客户端只需关心最终对象。</li><li>代码复用性高，可以在不同构建中重复使用相同的建造者。</li></ul><p><strong>缺点：</strong></p><ul><li>如果产品属性较少，使用建造者模式会显得过于复杂。</li><li>会增加系统中的类和对象数量。</li></ul><hr><h2 id="UML-示意图（快餐店例子）"><a href="#UML-示意图（快餐店例子）" class="headerlink" title="UML 示意图（快餐店例子）"></a>UML 示意图（快餐店例子）</h2><p>在快餐店中，一份套餐（Meal）通常由汉堡（Burger）和饮料（ColdDrink）组成。汉堡一般用纸盒包装，饮料用瓶子包装。建造者模式可以很好地模拟这种“分步骤构建套餐”的过程。</p><p><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F.png" alt=""></p><hr><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="1-定义-Item-和-Packing-接口"><a href="#1-定义-Item-和-Packing-接口" class="headerlink" title="1. 定义 Item 和 Packing 接口"></a>1. 定义 Item 和 Packing 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Item</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line">   <span class="keyword">public</span> Packing <span class="title function_">packing</span><span class="params">()</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">price</span><span class="params">()</span>;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Packing</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">pack</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-创建实现-Packing-的实体类"><a href="#2-创建实现-Packing-的实体类" class="headerlink" title="2. 创建实现 Packing 的实体类"></a>2. 创建实现 Packing 的实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Wrapper</span> <span class="keyword">implements</span> <span class="title class_">Packing</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">pack</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Wrapper&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bottle</span> <span class="keyword">implements</span> <span class="title class_">Packing</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">pack</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Bottle&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-创建实现-Item-的抽象类"><a href="#3-创建实现-Item-的抽象类" class="headerlink" title="3. 创建实现 Item 的抽象类"></a>3. 创建实现 Item 的抽象类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Burger</span> <span class="keyword">implements</span> <span class="title class_">Item</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Packing <span class="title function_">packing</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Wrapper</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">float</span> <span class="title function_">price</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ColdDrink</span> <span class="keyword">implements</span> <span class="title class_">Item</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Packing <span class="title function_">packing</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bottle</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">float</span> <span class="title function_">price</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-扩展-Burger-和-ColdDrink-的实体类"><a href="#4-扩展-Burger-和-ColdDrink-的实体类" class="headerlink" title="4. 扩展 Burger 和 ColdDrink 的实体类"></a>4. 扩展 Burger 和 ColdDrink 的实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VegBurger</span> <span class="keyword">extends</span> <span class="title class_">Burger</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">price</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="number">25.0f</span>; &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="string">&quot;Veg Burger&quot;</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChickenBurger</span> <span class="keyword">extends</span> <span class="title class_">Burger</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">price</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="number">50.5f</span>; &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="string">&quot;Chicken Burger&quot;</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Coke</span> <span class="keyword">extends</span> <span class="title class_">ColdDrink</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">price</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="number">30.0f</span>; &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="string">&quot;Coke&quot;</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pepsi</span> <span class="keyword">extends</span> <span class="title class_">ColdDrink</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">price</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="number">35.0f</span>; &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="string">&quot;Pepsi&quot;</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-创建-Meal-类"><a href="#5-创建-Meal-类" class="headerlink" title="5. 创建 Meal 类"></a>5. 创建 Meal 类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Meal</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> List&lt;Item&gt; items = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Item&gt;();    </span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addItem</span><span class="params">(Item item)</span>&#123; items.add(item); &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getCost</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="type">float</span> <span class="variable">cost</span> <span class="operator">=</span> <span class="number">0.0f</span>;</span><br><span class="line">      <span class="keyword">for</span> (Item item : items) cost += item.price();</span><br><span class="line">      <span class="keyword">return</span> cost;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showItems</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (Item item : items) &#123;</span><br><span class="line">         System.out.print(<span class="string">&quot;Item : &quot;</span>+item.name());</span><br><span class="line">         System.out.print(<span class="string">&quot;, Packing : &quot;</span>+item.packing().pack());</span><br><span class="line">         System.out.println(<span class="string">&quot;, Price : &quot;</span>+item.price());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-创建-Builder-类（MealBuilder）"><a href="#6-创建-Builder-类（MealBuilder）" class="headerlink" title="6. 创建 Builder 类（MealBuilder）"></a>6. 创建 Builder 类（MealBuilder）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MealBuilder</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> Meal <span class="title function_">prepareVegMeal</span> <span class="params">()</span>&#123;</span><br><span class="line">      <span class="type">Meal</span> <span class="variable">meal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Meal</span>();</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> <span class="title class_">VegBurger</span>());</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> <span class="title class_">Coke</span>());</span><br><span class="line">      <span class="keyword">return</span> meal;</span><br><span class="line">   &#125;   </span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> Meal <span class="title function_">prepareNonVegMeal</span> <span class="params">()</span>&#123;</span><br><span class="line">      <span class="type">Meal</span> <span class="variable">meal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Meal</span>();</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> <span class="title class_">ChickenBurger</span>());</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> <span class="title class_">Pepsi</span>());</span><br><span class="line">      <span class="keyword">return</span> meal;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-测试"><a href="#7-测试" class="headerlink" title="7. 测试"></a>7. 测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BuilderPatternDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">MealBuilder</span> <span class="variable">mealBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MealBuilder</span>();</span><br><span class="line"></span><br><span class="line">      <span class="type">Meal</span> <span class="variable">vegMeal</span> <span class="operator">=</span> mealBuilder.prepareVegMeal();</span><br><span class="line">      System.out.println(<span class="string">&quot;Veg Meal&quot;</span>);</span><br><span class="line">      vegMeal.showItems();</span><br><span class="line">      System.out.println(<span class="string">&quot;Total Cost: &quot;</span> + vegMeal.getCost());</span><br><span class="line"></span><br><span class="line">      <span class="type">Meal</span> <span class="variable">nonVegMeal</span> <span class="operator">=</span> mealBuilder.prepareNonVegMeal();</span><br><span class="line">      System.out.println(<span class="string">&quot;\n\nNon-Veg Meal&quot;</span>);</span><br><span class="line">      nonVegMeal.showItems();</span><br><span class="line">      System.out.println(<span class="string">&quot;Total Cost: &quot;</span> + nonVegMeal.getCost());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="实际应用：Lombok-Builder"><a href="#实际应用：Lombok-Builder" class="headerlink" title="实际应用：Lombok Builder"></a>实际应用：Lombok Builder</h2><p>在实际开发中，Java 的 <strong>Lombok</strong> 提供了 <code>@Builder</code> 注解，可以快速实现建造者模式，减少模板代码。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">   <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> User.builder()</span><br><span class="line">                      .name(<span class="string">&quot;Alice&quot;</span>)</span><br><span class="line">                      .age(<span class="number">25</span>)</span><br><span class="line">                      .email(<span class="string">&quot;alice@example.com&quot;</span>)</span><br><span class="line">                      .build();</span><br><span class="line">      System.out.println(user);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就避免了手动编写 Builder 类，更加高效。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>建造者模式适合用于 <strong>构建过程复杂的对象</strong>。</li><li>它的优势在于 <strong>解耦构建过程和表示</strong>，让代码更灵活。</li><li>在日常开发中，Lombok 的 <code>@Builder</code> 注解可以帮助我们快速实现建造者模式，非常实用。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;建造者模式（Builder-Pattern）学习总结&quot;&gt;&lt;a href=&quot;#建造者模式（Builder-Pattern）学习总结&quot; class=&quot;headerlink&quot; title=&quot;建造者模式（Builder Pattern）学习总结&quot;&gt;&lt;/a&gt;建造者模式（Bu</summary>
      
    
    
    
    <category term="技术" scheme="https://db-hanty.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="https://db-hanty.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="设计模式" scheme="https://db-hanty.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>策略模式</title>
    <link href="https://db-hanty.github.io/posts/72e3b671.html"/>
    <id>https://db-hanty.github.io/posts/72e3b671.html</id>
    <published>2025-08-22T23:13:25.000Z</published>
    <updated>2025-09-12T12:31:51.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="策略模式（Strategy-Pattern）"><a href="#策略模式（Strategy-Pattern）" class="headerlink" title="策略模式（Strategy Pattern）"></a>策略模式（Strategy Pattern）</h1><p>在日常开发中，我们经常会遇到这样一种场景：存在多种可替换的算法或行为，而传统的 <code>if-else</code> 或 <code>switch</code> 语句不仅使代码显得臃肿，还让后期维护和扩展变得复杂。<strong>策略模式（Strategy Pattern）</strong> 正是为了解决这个问题而提出的。</p><h2 id="一、策略模式的作用"><a href="#一、策略模式的作用" class="headerlink" title="一、策略模式的作用"></a>一、策略模式的作用</h2><p>策略模式的核心思想是：</p><blockquote><p><strong>将每个算法单独封装成独立的类，使它们可以互相替换使用，而不影响客户端的代码。</strong></p></blockquote><p>这样，算法的变化不会影响使用它的类，实现了代码的解耦与可扩展性。</p><hr><h2 id="二、它解决了什么问题？"><a href="#二、它解决了什么问题？" class="headerlink" title="二、它解决了什么问题？"></a>二、它解决了什么问题？</h2><p>在存在多种相似算法时，如果我们使用大量的条件语句（<code>if-else</code> 或 <code>switch</code>），会导致：</p><ul><li>代码复杂度增加，难以阅读；</li><li>算法修改或扩展时需要改动已有逻辑，违背开闭原则；</li><li>可维护性和可扩展性差。</li></ul><p>策略模式通过<strong>分离算法</strong>与<strong>使用算法的环境类</strong>，让代码更加清晰、灵活。</p><hr><h2 id="三、优缺点分析"><a href="#三、优缺点分析" class="headerlink" title="三、优缺点分析"></a>三、优缺点分析</h2><p><strong>优点：</strong></p><ol><li><strong>算法切换自由</strong>：可以在运行时灵活选择不同的算法。</li><li><strong>避免条件语句</strong>：消除了复杂的 <code>if-else</code>，提高了代码可读性。</li><li><strong>扩展性强</strong>：新增算法时，只需新增一个策略类，无需修改原有代码。</li></ol><p><strong>缺点：</strong></p><ol><li><strong>策略类数量增多</strong>：每新增一个算法，都需要额外创建一个策略类。</li><li><strong>策略类对外暴露</strong>：调用者必须知道并理解不同策略类的作用，才能正确选择使用。</li></ol><hr><h2 id="四、UML示意图"><a href="#四、UML示意图" class="headerlink" title="四、UML示意图"></a>四、UML示意图</h2><p><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.png" alt=""></p><p>Context 持有一个 Strategy 接口的引用，具体的算法逻辑则由不同的策略实现类提供。</p><hr><h2 id="五、代码实现"><a href="#五、代码实现" class="headerlink" title="五、代码实现"></a>五、代码实现</h2><p>下面通过一个简单的数学运算示例，来展示策略模式的实现过程：</p><h3 id="1-定义策略接口"><a href="#1-定义策略接口" class="headerlink" title="1. 定义策略接口"></a>1. 定义策略接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">doOperation</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-实现不同的策略类"><a href="#2-实现不同的策略类" class="headerlink" title="2. 实现不同的策略类"></a>2. 实现不同的策略类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperationAdd</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">doOperation</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperationMultiply</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">doOperation</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num1 * num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperationSubtract</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">doOperation</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num1 - num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-上下文类（Context）"><a href="#3-上下文类（Context）" class="headerlink" title="3. 上下文类（Context）"></a>3. 上下文类（Context）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Context</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Context</span><span class="params">(Strategy strategy)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">executeStrategy</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> strategy.doOperation(num1, num2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-测试类"><a href="#4-测试类" class="headerlink" title="4. 测试类"></a>4. 测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrategyPatternDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Context</span>(<span class="keyword">new</span> <span class="title class_">OperationAdd</span>());</span><br><span class="line">        System.out.println(<span class="string">&quot;10 + 5 = &quot;</span> + context.executeStrategy(<span class="number">10</span>, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">        context = <span class="keyword">new</span> <span class="title class_">Context</span>(<span class="keyword">new</span> <span class="title class_">OperationSubtract</span>());</span><br><span class="line">        System.out.println(<span class="string">&quot;10 - 5 = &quot;</span> + context.executeStrategy(<span class="number">10</span>, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">        context = <span class="keyword">new</span> <span class="title class_">Context</span>(<span class="keyword">new</span> <span class="title class_">OperationMultiply</span>());</span><br><span class="line">        System.out.println(<span class="string">&quot;10 * 5 = &quot;</span> + context.executeStrategy(<span class="number">10</span>, <span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10 + 5 = 15</span><br><span class="line">10 - 5 = 5</span><br><span class="line">10 * 5 = 50</span><br></pre></td></tr></table></figure><hr><h2 id="六、总结与思考"><a href="#六、总结与思考" class="headerlink" title="六、总结与思考"></a>六、总结与思考</h2><p>策略模式的本质是：<strong>行为封装 + 动态切换</strong>。通过将算法独立封装，我们不仅提高了代码的灵活性和扩展性，还让系统更加符合开闭原则。</p><p>在实际开发中，策略模式常用于：</p><ul><li>排序算法的多种实现；</li><li>支付方式（支付宝、微信、银行卡）的切换；</li><li>日志输出策略（文件、数据库、远程服务）；</li><li>缓存更新策略等。</li></ul><blockquote><p>学习策略模式让我更深刻地理解了“解耦”与“可扩展”的价值。在项目中，与其让 <code>if-else</code> 统治代码，不如通过策略模式让每个算法独立生长，保持代码清晰优雅。</p></blockquote><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;策略模式（Strategy-Pattern）&quot;&gt;&lt;a href=&quot;#策略模式（Strategy-Pattern）&quot; class=&quot;headerlink&quot; title=&quot;策略模式（Strategy Pattern）&quot;&gt;&lt;/a&gt;策略模式（Strategy Patter</summary>
      
    
    
    
    <category term="技术" scheme="https://db-hanty.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="https://db-hanty.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="设计模式" scheme="https://db-hanty.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>迭代器模式</title>
    <link href="https://db-hanty.github.io/posts/9055d217.html"/>
    <id>https://db-hanty.github.io/posts/9055d217.html</id>
    <published>2025-08-21T21:16:10.000Z</published>
    <updated>2025-09-12T12:31:51.894Z</updated>
    
    <content type="html"><![CDATA[<h1 id="迭代器模式（Iterator-Pattern）"><a href="#迭代器模式（Iterator-Pattern）" class="headerlink" title="迭代器模式（Iterator Pattern）"></a>迭代器模式（Iterator Pattern）</h1><p>在日常开发中，我们经常需要对集合类进行遍历，比如 <code>ArrayList</code>、<code>HashSet</code>、<code>Map</code> 等。如果每一种集合都需要开发者自己去关心底层的数据结构（数组、链表、树等），代码会变得复杂而且不够灵活。<br><strong>迭代器模式（Iterator Pattern）</strong> 就是为了解决这一问题而出现的，它为不同的集合提供了一种统一的遍历方式。</p><hr><h2 id="一、迭代器模式的作用"><a href="#一、迭代器模式的作用" class="headerlink" title="一、迭代器模式的作用"></a>一、迭代器模式的作用</h2><blockquote><p>在不暴露集合底层表现形式（如列表、栈、树、图）的情况下，提供一种顺序访问集合中所有元素的方法。</p></blockquote><p>换句话说，迭代器模式的核心价值是：<br><strong>“使用者无需知道集合内部的存储结构，只需要通过迭代器就能访问其中的元素。”</strong></p><hr><h2 id="二、解决的问题"><a href="#二、解决的问题" class="headerlink" title="二、解决的问题"></a>二、解决的问题</h2><p>如果没有迭代器模式，不同的集合需要不同的遍历方式，比如数组通过索引，链表通过指针，树和图则更复杂。<br>这样会导致<strong>遍历逻辑和集合逻辑高度耦合</strong>，难以维护。  </p><p>迭代器模式提供了一个统一的接口，使用者只需要按照固定的方法调用（<code>hasNext()</code> / <code>next()</code>），就能遍历任意集合。</p><hr><h2 id="三、优缺点分析"><a href="#三、优缺点分析" class="headerlink" title="三、优缺点分析"></a>三、优缺点分析</h2><p><strong>优点：</strong></p><ol><li><strong>支持多种遍历方式</strong>：可以根据需求扩展不同类型的迭代器。  </li><li><strong>简化聚合类</strong>：集合类只需提供数据存储，不再关心遍历逻辑。  </li><li><strong>多次遍历支持</strong>：可以同时对同一个聚合对象进行多次遍历。  </li><li><strong>扩展性好</strong>：增加新的聚合类和迭代器类都很方便，不需要修改已有代码。</li></ol><p><strong>缺点：</strong></p><ul><li><strong>系统复杂性增加</strong>：每增加一个新的聚合类，就需要增加一个对应的迭代器类，可能导致类数量膨胀。</li></ul><hr><h2 id="四、UML-示意图"><a href="#四、UML-示意图" class="headerlink" title="四、UML 示意图"></a>四、UML 示意图</h2><p>（示意图中，<code>Iterator</code> 定义了遍历的统一接口，<code>Container</code> 定义了获取迭代器的接口，每个具体的聚合类都会有一个内部迭代器类实现 <code>Iterator</code>。）<br><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.png" alt=""></p><hr><h2 id="五、实现示例"><a href="#五、实现示例" class="headerlink" title="五、实现示例"></a>五、实现示例</h2><h3 id="1-定义迭代器接口"><a href="#1-定义迭代器接口" class="headerlink" title="1. 定义迭代器接口"></a>1. 定义迭代器接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Iterator</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span>;</span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">next</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-定义容器接口"><a href="#2-定义容器接口" class="headerlink" title="2. 定义容器接口"></a>2. 定义容器接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Container</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> Iterator <span class="title function_">getIterator</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-实现容器类及其内部迭代器"><a href="#3-实现容器类及其内部迭代器" class="headerlink" title="3. 实现容器类及其内部迭代器"></a>3. 实现容器类及其内部迭代器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NameRepository</span> <span class="keyword">implements</span> <span class="title class_">Container</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> String[] names = &#123;<span class="string">&quot;Robert&quot;</span>, <span class="string">&quot;John&quot;</span>, <span class="string">&quot;Julie&quot;</span>, <span class="string">&quot;Lora&quot;</span>&#125;;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Iterator <span class="title function_">getIterator</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NameIterator</span>();</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">NameIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span> &#123;</span><br><span class="line">      <span class="type">int</span> index;</span><br><span class="line"> </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> index &lt; names.length;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> Object <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">if</span>(<span class="built_in">this</span>.hasNext())&#123;</span><br><span class="line">            <span class="keyword">return</span> names[index++];</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;     </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IteratorPatternDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">NameRepository</span> <span class="variable">namesRepository</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NameRepository</span>();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="type">Iterator</span> <span class="variable">iter</span> <span class="operator">=</span> namesRepository.getIterator(); iter.hasNext();)&#123;</span><br><span class="line">         <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String)iter.next();</span><br><span class="line">         System.out.println(<span class="string">&quot;Name : &quot;</span> + name);</span><br><span class="line">      &#125;  </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>迭代器模式在 Java 集合框架中有着非常广泛的应用，例如 <code>ArrayList</code>、<code>HashSet</code>、<code>Map</code> 的遍历都依赖迭代器。它的核心思想是<strong>“分离存储与遍历”</strong>，不仅提高了代码的复用性，也增强了系统的灵活性。</p><p>虽然会增加一定的类数量，但在复杂系统中，这种模式能显著提高代码的可维护性和扩展性，是设计模式中非常实用的一种。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;迭代器模式（Iterator-Pattern）&quot;&gt;&lt;a href=&quot;#迭代器模式（Iterator-Pattern）&quot; class=&quot;headerlink&quot; title=&quot;迭代器模式（Iterator Pattern）&quot;&gt;&lt;/a&gt;迭代器模式（Iterator Pa</summary>
      
    
    
    
    <category term="技术" scheme="https://db-hanty.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="https://db-hanty.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="设计模式" scheme="https://db-hanty.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>工厂模式</title>
    <link href="https://db-hanty.github.io/posts/54788f73.html"/>
    <id>https://db-hanty.github.io/posts/54788f73.html</id>
    <published>2025-08-19T22:33:29.000Z</published>
    <updated>2025-09-12T12:31:51.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工厂模式（Factory-Pattern）"><a href="#工厂模式（Factory-Pattern）" class="headerlink" title="工厂模式（Factory Pattern）"></a>工厂模式（Factory Pattern）</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在软件开发中，设计模式是一种被广泛应用的经验总结。它能够帮助开发者在面对重复性问题时，提供更优雅和高效的解决方案。其中，工厂模式（Factory Pattern）作为创建型模式的典型代表，被大量应用在框架与业务开发中。本文结合学习笔记与个人理解，对工厂模式进行总结。</p><h2 id="一、工厂模式的作用"><a href="#一、工厂模式的作用" class="headerlink" title="一、工厂模式的作用"></a>一、工厂模式的作用</h2><p>工厂模式的核心思想是：<strong>将对象的创建与使用分离</strong>。通过引入工厂类，调用者无需关心具体对象的实例化逻辑，只需依赖抽象接口，从而降低代码耦合度。</p><p>通俗地说，工厂模式就像“订餐外卖”：我们只需要点餐（调用工厂方法），而不必自己去买菜、洗菜、炒菜（对象实例化的过程）。</p><h3 id="UML示意图"><a href="#UML示意图" class="headerlink" title="UML示意图"></a>UML示意图</h3><p><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.png" alt=""></p><h2 id="二、工厂模式解决的问题"><a href="#二、工厂模式解决的问题" class="headerlink" title="二、工厂模式解决的问题"></a>二、工厂模式解决的问题</h2><p>在没有工厂模式之前，对象的创建通常由调用者直接使用 <code>new</code> 关键字完成。这种做法带来了以下问题：</p><ol><li><strong>高耦合</strong>：调用者需要知道具体的类名。  </li><li><strong>扩展性差</strong>：新增或修改产品时，调用者的代码也要随之改动。  </li><li><strong>难以维护</strong>：对象创建逻辑分散在代码各处，不利于统一管理。  </li></ol><p>工厂模式通过集中化、抽象化对象的创建过程，有效解决了这些问题。</p><h2 id="三、工厂模式的实现方式"><a href="#三、工厂模式的实现方式" class="headerlink" title="三、工厂模式的实现方式"></a>三、工厂模式的实现方式</h2><h3 id="1-简单工厂模式"><a href="#1-简单工厂模式" class="headerlink" title="1. 简单工厂模式"></a>1. 简单工厂模式</h3><p>通过一个工厂类，根据参数决定实例化哪一个具体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 产品接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductA</span> <span class="keyword">implements</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产了产品A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductB</span> <span class="keyword">implements</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产了产品B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Product <span class="title function_">createProduct</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;A&quot;</span>.equals(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductA</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;B&quot;</span>.equals(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductB</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> SimpleFactory.createProduct(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        product.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特点</strong>：简单直观，但工厂类职责过重，新增产品时需要修改工厂类。</p><hr><h3 id="2-工厂方法模式"><a href="#2-工厂方法模式" class="headerlink" title="2. 工厂方法模式"></a>2. 工厂方法模式</h3><p>为每种产品提供一个具体的工厂，工厂类只负责生产某一类产品。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工厂接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    Product <span class="title function_">createProduct</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FactoryA</span> <span class="keyword">implements</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">createProduct</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductA</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FactoryB</span> <span class="keyword">implements</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">createProduct</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductB</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryMethodTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Factory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FactoryA</span>();</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> factory.createProduct();</span><br><span class="line">        product.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特点</strong>：遵循开闭原则，扩展性更好，但会增加类的数量。</p><hr><h3 id="3-抽象工厂模式"><a href="#3-抽象工厂模式" class="headerlink" title="3. 抽象工厂模式"></a>3. 抽象工厂模式</h3><p>在工厂方法模式的基础上，抽象工厂可以创建<strong>多个产品族</strong>，常用于框架开发中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象工厂</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">    Product <span class="title function_">createProductA</span><span class="params">()</span>;</span><br><span class="line">    Product <span class="title function_">createProductB</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteFactory</span> <span class="keyword">implements</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">createProductA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductA</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">createProductB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductB</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特点</strong>：可以批量创建一系列相关的对象，但结构复杂。</p><h2 id="四、工厂模式在实际开发中的应用"><a href="#四、工厂模式在实际开发中的应用" class="headerlink" title="四、工厂模式在实际开发中的应用"></a>四、工厂模式在实际开发中的应用</h2><ol><li><strong>Spring 框架中的 BeanFactory</strong>：通过工厂方法生成 Bean，而不是直接 <code>new</code>。  </li><li><strong>日志框架</strong>（如 SLF4J、Log4j）：使用工厂方法创建 Logger 实例。  </li><li><strong>数据库驱动</strong>：JDBC 使用 DriverManager.getConnection() 获取数据库连接，本质就是工厂模式的应用。  </li></ol><h2 id="五、学习感想"><a href="#五、学习感想" class="headerlink" title="五、学习感想"></a>五、学习感想</h2><p>通过学习工厂模式，我体会到设计模式并不是死记硬背的概念，而是解决问题的一种思维方式。工厂模式解决了“对象创建”的复杂性，提升了代码的可维护性与可扩展性。在日常开发中，只要遇到<strong>对象创建逻辑复杂或需要频繁扩展的场景</strong>，工厂模式都能提供优雅的解决方案。</p><p>未来在学习其他设计模式时，我也会尝试结合实际开发案例，把“模式”与“问题”联系起来，而不是孤立地记忆。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>工厂模式是创建型模式中的重要一员。它通过抽象和封装对象的创建过程，实现了<strong>解耦合、易扩展、可维护</strong>的目标。在理解并应用工厂模式的过程中，不仅能写出更优雅的代码，也能逐步培养面向对象设计的思维方式。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;工厂模式（Factory-Pattern）&quot;&gt;&lt;a href=&quot;#工厂模式（Factory-Pattern）&quot; class=&quot;headerlink&quot; title=&quot;工厂模式（Factory Pattern）&quot;&gt;&lt;/a&gt;工厂模式（Factory Pattern）&lt;/</summary>
      
    
    
    
    <category term="技术" scheme="https://db-hanty.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="https://db-hanty.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="设计模式" scheme="https://db-hanty.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="https://db-hanty.github.io/posts/f1601c3e.html"/>
    <id>https://db-hanty.github.io/posts/f1601c3e.html</id>
    <published>2025-08-12T21:38:55.000Z</published>
    <updated>2025-09-12T12:31:51.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单例模式（Singleton-Pattern）"><a href="#单例模式（Singleton-Pattern）" class="headerlink" title="单例模式（Singleton Pattern）"></a>单例模式（Singleton Pattern）</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>确保一个类只有一个实例，并且自行实例化并向整个系统提供这个实例。</p><h3 id="UML示意图"><a href="#UML示意图" class="headerlink" title="UML示意图"></a>UML示意图</h3><p><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.png" alt="&quot;success&quot;:true,&quot;result&quot;"></p><h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><p>频繁创建和销毁全局使用的类实例的问题。</p><h2 id="常见实现方式"><a href="#常见实现方式" class="headerlink" title="常见实现方式"></a>常见实现方式</h2><h3 id="1-饿汉式"><a href="#1-饿汉式" class="headerlink" title="1. 饿汉式"></a>1. 饿汉式</h3><p>在类加载后立即实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonPattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点</strong>：类加载时即创建实例，避免多线程问题。<br><strong>缺点</strong>：如果未使用实例，也会被加载，占用内存资源。</p><hr><h3 id="2-懒汉式"><a href="#2-懒汉式" class="headerlink" title="2. 懒汉式"></a>2. 懒汉式</h3><p>在第一次使用类时实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton2</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton2 singleton;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton2</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Singleton2 <span class="title function_">getInstance</span><span class="params">()</span>&#123; <span class="comment">// 加锁防止被多次实例化</span></span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="literal">null</span>)&#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> <span class="title class_">Singleton2</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点</strong>：用到时才创建实例，节省资源。<br><strong>缺点</strong>：方法加锁，效率较低。</p><hr><h3 id="3-双重检查锁"><a href="#3-双重检查锁" class="headerlink" title="3. 双重检查锁"></a>3. 双重检查锁</h3><p>在懒汉式的基础上，使用双重检查来减少锁的开销。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton2</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton2 singleton;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton2</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton2.class)&#123;</span><br><span class="line">                <span class="keyword">if</span> (singleton == <span class="literal">null</span>)&#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> <span class="title class_">Singleton2</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点</strong>：在保证线程安全的同时，提高了性能。<br><strong>注意</strong>：<code>singleton</code> 必须加上 <code>volatile</code>，防止指令重排。</p><hr><h2 id="框架源码中的应用"><a href="#框架源码中的应用" class="headerlink" title="框架源码中的应用"></a>框架源码中的应用</h2><p>在 <strong>Spring</strong> 框架中，Bean 默认就是单例模式（Singleton Scope）。这保证了容器中同一个 Bean 只会有一个实例，便于统一管理和资源复用。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>饿汉式</strong>：简单，类加载时即创建，适合单例长期使用的场景。</li><li><strong>懒汉式</strong>：延迟加载，节省内存，但性能稍差。</li><li><strong>双重检查锁</strong>：线程安全 + 高效，实际开发中最常用。</li></ul><p>单例模式作为设计模式中的经典模式，广泛应用于各种框架和系统开发中，理解它的实现方式和优缺点，对于学习设计模式和框架源码都非常重要。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;单例模式（Singleton-Pattern）&quot;&gt;&lt;a href=&quot;#单例模式（Singleton-Pattern）&quot; class=&quot;headerlink&quot; title=&quot;单例模式（Singleton Pattern）&quot;&gt;&lt;/a&gt;单例模式（Singleton Pa</summary>
      
    
    
    
    <category term="技术" scheme="https://db-hanty.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="https://db-hanty.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="设计模式" scheme="https://db-hanty.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式快速入门</title>
    <link href="https://db-hanty.github.io/posts/2c4abd50.html"/>
    <id>https://db-hanty.github.io/posts/2c4abd50.html</id>
    <published>2025-08-04T14:37:22.000Z</published>
    <updated>2025-09-12T12:31:51.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式快速入门"><a href="#设计模式快速入门" class="headerlink" title="设计模式快速入门"></a>设计模式快速入门</h1><h3 id="设计模式概念"><a href="#设计模式概念" class="headerlink" title="设计模式概念"></a>设计模式概念</h3><p>设计模式是针对软件设计中常见问题的标准化解决方案，提供可重用的设计模板。它们不是直接代码，而是描述如何组织代码结构的最佳实践，能提升代码可维护性、扩展性和复用性。</p><hr><h3 id="常用设计模式分类"><a href="#常用设计模式分类" class="headerlink" title="常用设计模式分类"></a>常用设计模式分类</h3><h4 id="创建型模式（处理对象创建）"><a href="#创建型模式（处理对象创建）" class="headerlink" title="创建型模式（处理对象创建）"></a>创建型模式（处理对象创建）</h4><ul><li><strong>单例模式</strong>：确保类只有一个实例（如全局配置管理器）。  </li><li><strong>工厂方法模式</strong>：子类决定实例化哪个类（如支付方式工厂）。  </li><li><strong>抽象工厂模式</strong>：创建相关对象族（如跨平台UI组件库）。  </li><li><strong>建造者模式</strong>：分步骤构建复杂对象（如SQL查询构造器）。  </li><li><strong>原型模式</strong>：通过克隆生成新对象（如游戏中的敌人复制）。  </li></ul><h4 id="结构型模式（处理对象组合）"><a href="#结构型模式（处理对象组合）" class="headerlink" title="结构型模式（处理对象组合）"></a>结构型模式（处理对象组合）</h4><ul><li><strong>适配器模式</strong>：转换接口兼容性（如旧API适配新系统）。  </li><li><strong>装饰器模式</strong>：动态扩展功能（如Java I/O流包装）。  </li><li><strong>代理模式</strong>：控制对象访问（如虚拟代理延迟加载图片）。  </li><li><strong>外观模式</strong>：简化复杂子系统调用（如一键启动计算机）。 </li></ul><h4 id="行为型模式（处理对象交互）"><a href="#行为型模式（处理对象交互）" class="headerlink" title="行为型模式（处理对象交互）"></a>行为型模式（处理对象交互）</h4><ul><li><strong>策略模式</strong>：封装可互换算法（如排序策略切换）。  </li><li><strong>观察者模式</strong>：一对多状态通知（如事件监听系统）。  </li><li><strong>迭代器模式</strong>：统一集合遍历方式（如Java集合的<code>Iterator</code>）。  </li><li><strong>责任链模式</strong>：链式处理请求（如审批流程）。  </li></ul><hr><h3 id="学习路径"><a href="#学习路径" class="headerlink" title="学习路径"></a>学习路径</h3><p><strong>理论奠基</strong>  </p><ul><li>理解模式的意图、UML类图和适用场景。例如，观察者模式包含<code>Subject</code>和<code>Observer</code>接口。  </li><li>对比模式优缺点：单例模式节省资源但可能引入全局状态问题。  </li></ul><p><strong>代码实践</strong>  </p><ul><li>手写经典实现，如懒汉式单例的双重检查锁定：  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>项目应用</strong>  </p><ul><li>识别代码坏味道：大量<code>if-else</code>可改用策略模式。  </li><li>避免滥用：简单场景无需引入抽象工厂。  </li></ul><p><strong>面试准备</strong>  </p><ul><li>高频问题：如何实现线程安全的单例？何时用装饰器而非继承？  </li><li>场景分析：设计一个支持撤销操作的编辑器（命令模式）。  </li></ul><hr><h3 id="推荐资源"><a href="#推荐资源" class="headerlink" title="推荐资源"></a>推荐资源</h3><ul><li><strong>书籍</strong>：《图解设计模式》。  </li><li><strong>在线</strong>：  <ul><li>菜鸟教程-设计模式（含代码示例）。</li><li>视频-b站-<a href="https://www.bilibili.com/video/BV1af4y1y7sS?spm_id_from=333.788.videopod.sections&amp;vd_source=2480596959bf3131bb20161784528140">5分钟学设计模式</a>  </li></ul></li><li><strong>工具</strong>：使用StarUML绘制模式类图辅助理解。  </li></ul><p>通过“学习→编码→重构”的闭环，逐步掌握模式精髓。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式快速入门&quot;&gt;&lt;a href=&quot;#设计模式快速入门&quot; class=&quot;headerlink&quot; title=&quot;设计模式快速入门&quot;&gt;&lt;/a&gt;设计模式快速入门&lt;/h1&gt;&lt;h3 id=&quot;设计模式概念&quot;&gt;&lt;a href=&quot;#设计模式概念&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="技术" scheme="https://db-hanty.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="https://db-hanty.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="设计模式" scheme="https://db-hanty.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>《乔布斯传》读书报告</title>
    <link href="https://db-hanty.github.io/posts/56e00ecd.html"/>
    <id>https://db-hanty.github.io/posts/56e00ecd.html</id>
    <published>2025-07-30T23:22:19.000Z</published>
    <updated>2025-09-12T12:31:51.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《史蒂夫·乔布斯传》读书报告：创造者的回馈与矛盾"><a href="#《史蒂夫·乔布斯传》读书报告：创造者的回馈与矛盾" class="headerlink" title="《史蒂夫·乔布斯传》读书报告：创造者的回馈与矛盾"></a>《史蒂夫·乔布斯传》读书报告：创造者的回馈与矛盾</h1><h1 id="比特与灵魂：乔布斯留下的科技史诗与人类长河"><a href="#比特与灵魂：乔布斯留下的科技史诗与人类长河" class="headerlink" title="比特与灵魂：乔布斯留下的科技史诗与人类长河"></a>比特与灵魂：乔布斯留下的科技史诗与人类长河</h1><blockquote><p>“我们试图用仅有的天分，为历史长河添一笔。”</p><p>—— 史蒂夫·乔布斯，1976–2011：一场永恒的创世记</p></blockquote><hr><h2 id="一、被遗弃者的创世纪：从车库到星辰"><a href="#一、被遗弃者的创世纪：从车库到星辰" class="headerlink" title="一、被遗弃者的创世纪：从车库到星辰"></a>一、被遗弃者的创世纪：从车库到星辰</h2><h3 id="童年烙印：被遗弃与被选择的双重奏"><a href="#童年烙印：被遗弃与被选择的双重奏" class="headerlink" title="童年烙印：被遗弃与被选择的双重奏"></a>童年烙印：被遗弃与被选择的双重奏</h3><blockquote><p>“他想完全掌控自己制造的每一样东西，那种强烈欲望源于刚出生就被抛弃。”</p></blockquote><p>1976年，硅谷的一个车库里，三个年轻人点燃了个人计算机革命的火种。Apple I 只是一块裸露的电路板，却承载着乔布斯重塑世界的野心：</p><ul><li><strong>被遗弃的创伤</strong>：生母的抛弃造就了他对“绝对控制”的执念——从 Mac 内部电路的美学布线到 iOS 的封闭生态。</li><li><strong>养父的工匠启蒙</strong>：养父教导他：“即使是柜子背面，也要做到完美。”孕育了 iPhone 极致触感的审美。</li><li><strong>宗教与科学的熔炉</strong>：<ul><li>禅宗启示：“直觉比逻辑更强大”（源自里德学院的顿悟）</li><li>激光实验室隐喻：“在混沌中聚焦能量” → 未来产品美学的雏形</li></ul></li></ul><blockquote><p>“他站在反主流文化与科技的交汇处，看到了工具为人所用的本质。”</p></blockquote><div class="table-container"><table><thead><tr><th>反叛武器</th><th>起源</th><th>革命产物</th></tr></thead><tbody><tr><td>电子巫术</td><td>蓝盒子电话黑客</td><td>Apple I 的极客基因</td></tr><tr><td>字体美学</td><td>旁听书法课</td><td>Mac 的衬线字体革命</td></tr><tr><td>迷幻药灵感</td><td>LSD 边界探索</td><td>“不同思维”产品哲学</td></tr><tr><td>印度禅修</td><td>直觉优于理性</td><td>iPhone 的直觉交互设计</td></tr></tbody></table></div><h3 id="计算机地位的史诗转变："><a href="#计算机地位的史诗转变：" class="headerlink" title="计算机地位的史诗转变："></a>计算机地位的史诗转变：</h3><ul><li><strong>1977</strong>：Apple II + VisiCalc → 计算机从实验室走进会计室</li><li><strong>1984</strong>：Mac 图形界面 → 让普通人拥有数字创作权</li><li><strong>2007</strong>：iPhone 电容触屏 → 人机交互史分为“前 / 后 iPhone 时代”</li></ul><blockquote><p>“预见未来的最好方式，就是亲手创造未来。”</p></blockquote><hr><h2 id="二、现实扭曲力场：光与暗的双螺旋"><a href="#二、现实扭曲力场：光与暗的双螺旋" class="headerlink" title="二、现实扭曲力场：光与暗的双螺旋"></a>二、现实扭曲力场：光与暗的双螺旋</h2><h3 id="光明面：直觉的圣火"><a href="#光明面：直觉的圣火" class="headerlink" title="光明面：直觉的圣火"></a>光明面：直觉的圣火</h3><blockquote><p>“他拥有一种能力——将个人魅力转化为说服力，通过意志改变现实。”</p></blockquote><h3 id="发布会的魔法："><a href="#发布会的魔法：" class="headerlink" title="发布会的魔法："></a>发布会的魔法：</h3><ol><li>抬高预期：“价值成千上万美元的功能”（如 NeXT）</li><li>价格突降：令实际售价显得“难以置信”</li></ol><h3 id="预见力的神迹："><a href="#预见力的神迹：" class="headerlink" title="预见力的神迹："></a>预见力的神迹：</h3><ul><li>“手机会吞噬 iPod”的断言</li><li>多点触控技术从平板移植到手机</li></ul><h3 id="禅意设计革命："><a href="#禅意设计革命：" class="headerlink" title="禅意设计革命："></a>禅意设计革命：</h3><ul><li>“至繁归于至简”<ul><li>iPod 的三键哲学</li><li>iPhone 取消键盘</li></ul></li></ul><hr><h3 id="黑暗面：暴君的荆棘王冠"><a href="#黑暗面：暴君的荆棘王冠" class="headerlink" title="黑暗面：暴君的荆棘王冠"></a>黑暗面：暴君的荆棘王冠</h3><blockquote><p>“当乔布斯不想为事情分心时，他就完全忽略它，就像此事从未存在。”</p><ul><li><strong>非黑即白的管理哲学</strong>：<ul><li>Mac 团队每周工作 90 小时</li><li>“天才 / 饭桶”的二元评价体系</li></ul></li><li><strong>选择性遗忘现实</strong>：<ul><li>否认亲生女丽莎，直至 DNA 检测揭穿谎言</li></ul></li><li><strong>闭环帝国的原罪</strong>：<ul><li>年轻时倡导“信息应自由”，</li><li>晚年却筑起 iOS 的围墙花园</li></ul></li></ul><p>“他让同事经历了特殊的地狱——爱上一个缺乏共情能力的人。”</p></blockquote><hr><h2 id="三、蝴蝶蜕变史：苹果的生死七幕剧"><a href="#三、蝴蝶蜕变史：苹果的生死七幕剧" class="headerlink" title="三、蝴蝶蜕变史：苹果的生死七幕剧"></a>三、蝴蝶蜕变史：苹果的生死七幕剧</h2><div class="table-container"><table><thead><tr><th>阶段</th><th>关键转折</th><th>雪崩效应</th></tr></thead><tbody><tr><td>坠落</td><td>1985 被逐出苹果</td><td>NeXT 开发 Unix → 奠定 macOS 基础</td></tr><tr><td>觉醒</td><td>1986 收购皮克斯</td><td>《玩具总动员》验证艺术 + 科技的结合</td></tr><tr><td>归位</td><td>1997 精简产品线</td><td>iMac 透明外壳 → 点燃消费电子革命</td></tr><tr><td>登基</td><td>2001 iPod + iTunes</td><td>0.99 美元正版音乐 → 唤醒音乐行业</td></tr><tr><td>封神</td><td>2007 iPhone 问世</td><td>App Store 催生全球开发者经济</td></tr><tr><td>永生</td><td>2010 推出 iPad</td><td>平板成为儿童的第一台“计算机”</td></tr><tr><td>遗产</td><td>2023 M 系列芯片</td><td>终结英特尔霸权，重塑计算架构</td></tr></tbody></table></div><blockquote><p>“微软占据市场却无创新，苹果输了，计算机进入黑暗时代。”</p><p>→ <strong>2010年，苹果市值超越微软，完成历史性复仇</strong></p></blockquote><hr><h2 id="四、创造者的涅槃：失败锻造终极武器"><a href="#四、创造者的涅槃：失败锻造终极武器" class="headerlink" title="四、创造者的涅槃：失败锻造终极武器"></a>四、创造者的涅槃：失败锻造终极武器</h2><h3 id="NeXT：自由的普罗米修斯"><a href="#NeXT：自由的普罗米修斯" class="headerlink" title="NeXT：自由的普罗米修斯"></a>NeXT：自由的普罗米修斯</h3><blockquote><p>“他后来的成功，不是因为被逐，而是因为被逐后的华丽失败。”</p><ul><li><strong>电子书先知</strong>：内置词典与百科 → Kindle 雏形</li><li><strong>设计哲学</strong>：镁黑色立方体主机 → 价值观的物理映射</li></ul></blockquote><hr><h3 id="皮克斯：艺术与技术的联姻"><a href="#皮克斯：艺术与技术的联姻" class="headerlink" title="皮克斯：艺术与技术的联姻"></a>皮克斯：艺术与技术的联姻</h3><ul><li><strong>顿悟时刻</strong>：放弃硬件幻想 → 专注数字动画</li><li><p><strong>灵魂宣言</strong>：</p><blockquote><p>“产品应有灵魂，渴望实现价值。”</p><p>→ 《玩具总动员》赋予玩具人格与情感</p></blockquote></li></ul><hr><h3 id="回归苹果的蝴蝶战略"><a href="#回归苹果的蝴蝶战略" class="headerlink" title="回归苹果的蝴蝶战略"></a>回归苹果的蝴蝶战略</h3><ul><li>“决定不做什么比决定做什么更重要。”</li></ul><h3 id="四象限聚焦法："><a href="#四象限聚焦法：" class="headerlink" title="四象限聚焦法："></a>四象限聚焦法：</h3><p><strong>专业 / 消费 × 桌面 / 便携</strong> → 催生 iMac 与 MacBook</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[iTunes] --&gt; B[iPod]</span><br><span class="line">A --&gt; C[iPhone]</span><br><span class="line">A --&gt; D[iPad]</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="程序员与乔布斯：一场跨越时代的编码对话"><a href="#程序员与乔布斯：一场跨越时代的编码对话" class="headerlink" title="程序员与乔布斯：一场跨越时代的编码对话"></a>程序员与乔布斯：一场跨越时代的编码对话</h1><blockquote><p>“设计不仅是外观和感觉，设计是如何运作的。”</p><p>—— Steve Jobs</p></blockquote><hr><h2 id="五、程序员启示录：乔布斯代码的四大戒律"><a href="#五、程序员启示录：乔布斯代码的四大戒律" class="headerlink" title="五、程序员启示录：乔布斯代码的四大戒律"></a>五、程序员启示录：乔布斯代码的四大戒律</h2><h3 id="1-杀死冗余功能"><a href="#1-杀死冗余功能" class="headerlink" title="1. 杀死冗余功能"></a>1. 杀死冗余功能</h3><blockquote><p>“为什么简单就是好？因为我们要让产品听从你。”</p><ul><li>MacBook 曾因电源线不美而推迟发布</li><li>删除 30% “能用但丑陋”的模块，源代码重构是常态</li></ul></blockquote><h3 id="2-端到端的征服"><a href="#2-端到端的征服" class="headerlink" title="2. 端到端的征服"></a>2. 端到端的征服</h3><blockquote><p>“最好的产品是一体的——软件为硬件而生，硬件为软件而造。”</p><ul><li>全栈信仰：从 A4 芯片到 M1 Ultra 的垂直整合</li><li>程序员应掌控比特流到用户体验的完整链路</li></ul></blockquote><h3 id="3-向死而生的创造力"><a href="#3-向死而生的创造力" class="headerlink" title="3. 向死而生的创造力"></a>3. 向死而生的创造力</h3><blockquote><p>“死亡是生命最伟大的发明。”——斯坦福演讲</p><ul><li>癌症期间爆发创造力</li><li>iPhone 主板从 30 块压缩至 4 块</li><li>设定“假想死亡日”作为项目截止节点</li></ul></blockquote><h3 id="4-盗火者的悖论"><a href="#4-盗火者的悖论" class="headerlink" title="4. 盗火者的悖论"></a>4. 盗火者的悖论</h3><blockquote><p>“年轻时我是黑客，现在明白：普通用户只要简单好用。”</p><ul><li>开源辩证：<ul><li>继承：GitHub 是 Homebrew 俱乐部的现代形态</li><li>警惕：安卓的碎片化 → 开发精力被消耗殆尽</li></ul></li></ul></blockquote><hr><h2 id="六、未完成的革命：人类长河中的永恒涟漪"><a href="#六、未完成的革命：人类长河中的永恒涟漪" class="headerlink" title="六、未完成的革命：人类长河中的永恒涟漪"></a>六、未完成的革命：人类长河中的永恒涟漪</h2><h3 id="封闭与开放：数字时代的终极之问"><a href="#封闭与开放：数字时代的终极之问" class="headerlink" title="封闭与开放：数字时代的终极之问"></a>封闭与开放：数字时代的终极之问</h3><ul><li>比尔·盖茨说：“开放会胜出”</li><li>乔布斯证明：“封闭也能赢得尊重”</li><li>“我们封闭，不是因为控制欲，而是不想用户吃垃圾。”</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> user == <span class="string">&quot;Grandma&quot;</span>:</span><br><span class="line">    choose(<span class="string">&quot;苹果式体验一致性&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    preserve(<span class="string">&quot;黑客的自由权杖&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="科技人文十字路口的灯塔"><a href="#科技人文十字路口的灯塔" class="headerlink" title="科技人文十字路口的灯塔"></a>科技人文十字路口的灯塔</h3><ul><li>iPad 的禅意：“它是《全球概览》的电子化身，创意与工具在此相遇。”</li><li>ChatGPT 时代的反思：更需要“让技术有温度”的苹果哲学</li></ul><h3 id="永恒的天问"><a href="#永恒的天问" class="headerlink" title="永恒的天问"></a>永恒的天问</h3><p>“当我的指尖划过 iPhone 的玻璃屏，是否触摸到他留给宇宙的情书？”</p><p>在 Apple Park 的环形飞船总部，访客驻足于乔布斯剧院的铭文前：</p><blockquote><p>“致疯狂的人——他们推动人类向前。”</p></blockquote><p>而每一个深夜敲下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;Fix bug&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>的程序员，都在续写这封寄往比特长河的情书。</p><h3 id="数字朝圣者指南"><a href="#数字朝圣者指南" class="headerlink" title="数字朝圣者指南"></a>数字朝圣者指南</h3><p>⌛️ 时间胶囊：1976 Apple I 主板｜2007 iPhone 原型机</p><p>📜 精神图腾：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ascii</span><br><span class="line">被咬的苹果 → 禁果知识与残缺之美</span><br><span class="line">☸️ 禅圆        → 留白处的无限可能</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="程序员的圣歌"><a href="#程序员的圣歌" class="headerlink" title="程序员的圣歌"></a>程序员的圣歌</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> <span class="variable language_">self</span>.die():</span><br><span class="line">    idea = <span class="built_in">filter</span>(intuition, noise)  <span class="comment"># 如他过滤冗余功能</span></span><br><span class="line">    product = compress(idea, to=<span class="string">&quot;essential&quot;</span>)  <span class="comment"># 至繁归于至简</span></span><br><span class="line">    legacy = push(humanity_forward)  <span class="comment"># 为历史长河添一笔</span></span><br><span class="line">    <span class="variable language_">self</span>.commit(legacy)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="七、结语：在乔布斯之后，我们如何编码未来？"><a href="#七、结语：在乔布斯之后，我们如何编码未来？" class="headerlink" title="七、结语：在乔布斯之后，我们如何编码未来？"></a>七、结语：在乔布斯之后，我们如何编码未来？</h2><p>乔布斯离世多年，但他留下的不是“方法论”，而是“信仰”：</p><ul><li>技术是人文的延伸，而非冷冰冰的堆砌；</li><li>程序员不仅是解决问题的人，更是塑造世界的一群人；</li><li>简洁、优雅、一致性，是代码的审美底线，也是数字时代的建筑哲学。</li></ul><p>在 Apple Park 某个寂静的夜晚，剧院顶端玻璃映出天光。</p><p>他不再敲键盘，却仍在无数程序员的光标下回响：</p><blockquote><p>“你可以质疑他们、引用他们、赞美或诋毁他们。但唯一不能做的，是忽视他们。因为他们改变了世界。”</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;《史蒂夫·乔布斯传》读书报告：创造者的回馈与矛盾&quot;&gt;&lt;a href=&quot;#《史蒂夫·乔布斯传》读书报告：创造者的回馈与矛盾&quot; class=&quot;headerlink&quot; title=&quot;《史蒂夫·乔布斯传》读书报告：创造者的回馈与矛盾&quot;&gt;&lt;/a&gt;《史蒂夫·乔布斯传》读书报告</summary>
      
    
    
    
    <category term="书籍" scheme="https://db-hanty.github.io/categories/%E4%B9%A6%E7%B1%8D/"/>
    
    
    <category term="人物传记" scheme="https://db-hanty.github.io/tags/%E4%BA%BA%E7%89%A9%E4%BC%A0%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《富爸爸穷爸爸》读书报告</title>
    <link href="https://db-hanty.github.io/posts/e17b4fc3.html"/>
    <id>https://db-hanty.github.io/posts/e17b4fc3.html</id>
    <published>2025-07-15T21:56:10.000Z</published>
    <updated>2025-09-12T12:31:51.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《富爸爸穷爸爸》读书报告"><a href="#《富爸爸穷爸爸》读书报告" class="headerlink" title="《富爸爸穷爸爸》读书报告"></a><center>《富爸爸穷爸爸》读书报告</h1><h2 id="一、核心观点概述"><a href="#一、核心观点概述" class="headerlink" title="一、核心观点概述"></a>一、核心观点概述</h2><h5 id="传统教育的局限性："><a href="#传统教育的局限性：" class="headerlink" title="传统教育的局限性："></a>传统教育的局限性：</h5><p>&emsp;&emsp;因为现在传统教育的<strong>局限性</strong>，使得很多人无法保障财务成功，因此<strong>财商（理财智慧）</strong>比学术成绩更重要。</p><h5 id="关键能力："><a href="#关键能力：" class="headerlink" title="关键能力："></a>关键能力：</h5><p>&emsp;&emsp;让钱为自己工作，而并非为钱工作</p><h5 id="消费主义与储蓄的真相："><a href="#消费主义与储蓄的真相：" class="headerlink" title="消费主义与储蓄的真相："></a>消费主义与储蓄的真相：</h5><p>&emsp;&emsp;现代经济中，合理消费和投资比单纯储蓄更能创造财富</p><p><u><strong>区分资产（增加收入）与负债（消耗收入）是财务自由的基础</strong></u></p><h2 id="二、核心课程精要"><a href="#二、核心课程精要" class="headerlink" title="二、核心课程精要"></a>二、核心课程精要</h2><h3 id="Lesson-1：富人不为钱工作"><a href="#Lesson-1：富人不为钱工作" class="headerlink" title="Lesson 1：富人不为钱工作"></a>Lesson 1：富人不为钱工作</h3><p><strong>核心思想</strong>：打破<strong><em>“工作-赚钱-消费”</em></strong>的循环，通过资产积累实现被动收入</p><p>关键启示：</p><ul><li>恐惧和欲望是财务陷阱的根源（如害怕失业、盲目消费）</li><li>控制情绪，用理性决策代替本能反应</li></ul><h3 id="Lesson-2：财务知识的力量"><a href="#Lesson-2：财务知识的力量" class="headerlink" title="Lesson 2：财务知识的力量"></a>Lesson 2：财务知识的力量</h3><h5 id="资产与负债的定义："><a href="#资产与负债的定义：" class="headerlink" title="资产与负债的定义："></a>资产与负债的定义：</h5><div class="table-container"><table><thead><tr><th>概念</th><th>定义</th><th>例子</th></tr></thead><tbody><tr><td>资产</td><td>能带来现金流入（把钱放进你口袋里的东西）</td><td>股票、债券、共同基金、能够产生收入的房地产、票据、版税，如音乐、手稿、专利以及其他可产生收入的大小</td></tr><tr><td>负债</td><td>导致现金流出（把钱从你口袋里取走的东西）</td><td>房贷、车贷</td></tr></tbody></table></div><p>中产<strong>困境</strong>：误将负债（如自住房）当作资产</p><h5 id="财富的定义："><a href="#财富的定义：" class="headerlink" title="财富的定义："></a><strong>财富</strong>的定义：</h5><blockquote><p>财富是支撑一个人生存多长时间的能力，即不工作能活多久</p></blockquote><h3 id="Lesson-3：关注自己的事业"><a href="#Lesson-3：关注自己的事业" class="headerlink" title="Lesson 3：关注自己的事业"></a>Lesson 3：关注自己的事业</h3><h5 id="职业≠事业："><a href="#职业≠事业：" class="headerlink" title="职业≠事业："></a>职业≠事业：</h5><p>&emsp;职业为别人创造财富，事业为自己积累资产</p><h5 id="真正的资产类型："><a href="#真正的资产类型：" class="headerlink" title="真正的资产类型："></a>真正的资产类型：</h5><p>企业股权、知识产权、可产生收入的房地产等</p><p>行动<strong>建议</strong>：在职场外建立资产项，延迟奢侈品消费</p><h3 id="Lesson-4：税收与公司的力量"><a href="#Lesson-4：税收与公司的力量" class="headerlink" title="Lesson 4：税收与公司的力量"></a>Lesson 4：税收与公司的力量</h3><h5 id="富人逻辑："><a href="#富人逻辑：" class="headerlink" title="富人逻辑："></a>富人逻辑：</h5><p>利用公司结构合法减税（如企业支出抵扣）</p><h5 id="财商的四大支柱："><a href="#财商的四大支柱：" class="headerlink" title="财商的四大支柱："></a>财商的四大支柱：</h5><ul><li>会计</li><li>投资</li><li>市场</li><li>法律（尤其是税法）</li></ul><h3 id="Lesson-5：富人的投资思维"><a href="#Lesson-5：富人的投资思维" class="headerlink" title="Lesson 5：富人的投资思维"></a>Lesson 5：富人的投资思维</h3><blockquote><p>首先克服恐惧，风险永远存在，需通过知识降低风险</p></blockquote><h5 id="投资者类型："><a href="#投资者类型：" class="headerlink" title="投资者类型："></a>投资者类型：</h5><ul><li>被动投资者（购买现成产品）</li><li>主动投资者（创造投资机会，如创业或改造资产）</li></ul><p><strong>关键能力</strong>：<u>发现被忽视的机会、融资能力、整合资源</u></p><h3 id="Lesson-6：不为钱工作"><a href="#Lesson-6：不为钱工作" class="headerlink" title="Lesson 6：不为钱工作"></a>Lesson 6：不为钱工作</h3><h5 id="多技能发展："><a href="#多技能发展：" class="headerlink" title="多技能发展："></a>多技能发展：</h5><p>专业化是陷阱，需掌握销售、管理等综合能力</p><h5 id="长期视角："><a href="#长期视角：" class="headerlink" title="长期视角："></a>长期视角：</h5><p>工作是为了学习，而非短期工资</p><h2 id="三、实践行动指南"><a href="#三、实践行动指南" class="headerlink" title="三、实践行动指南"></a>三、实践行动指南</h2><h3 id="克服五大障碍"><a href="#克服五大障碍" class="headerlink" title="克服五大障碍"></a>克服五大障碍</h3><ol><li>恐惧→教育自己，从小投资开始</li><li>愤世嫉俗→用数据分析代替情绪化判断</li><li>懒惰→用”贪婪”（对美好生活的渴望）激励行动</li><li>坏习惯→优先支付自己（强制储蓄/投资）</li><li>傲慢→承认无知并持续学习</li></ol><h3 id="十步行动计划"><a href="#十步行动计划" class="headerlink" title="十步行动计划"></a>十步行动计划</h3><ol><li>找到深层理由（如自由、家庭保障）</li><li>每日学习财务知识（书籍、课程）</li><li>结交成功投资者，获取内线信息</li><li>掌握多种商业模式（如房地产、创业）</li><li>自律：先投资再消费，利用压力激发创造力</li><li>雇佣优秀顾问（如专业经纪人）</li><li>做”印第安给予者”：投资时规划退出策略</li><li>用资产收益购买奢侈品（如租金换车贷）</li><li>向榜样学习（如巴菲特、马斯克）</li><li>先给予后获取（资源互换思维）</li></ol><h3 id="立即行动建议"><a href="#立即行动建议" class="headerlink" title="立即行动建议"></a>立即行动建议</h3><ul><li>记账区分资产/负债</li><li>用月收入的10%购买资产（如指数基金、小户型出租房）</li><li>参加投资社群，寻找导师</li></ul><h2 id="四、总结与个人启示"><a href="#四、总结与个人启示" class="headerlink" title="四、总结与个人启示"></a>四、总结与个人启示</h2><p><strong><em><u>核心价值：本书颠覆了对金钱、工作和风险的认知，强调思维转变比盲目努力更重要</u></em></strong></p><h2 id="五、金句摘录"><a href="#五、金句摘录" class="headerlink" title="五、金句摘录"></a>五、金句摘录</h2><p>富人买入资产，穷人只有支出，中产购买他们以为是资产的负债</p><p>你无法为钱工作，除非你承认它在控制你</p><p>失败是成功的一部分——但学校只惩罚失败</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;《富爸爸穷爸爸》读书报告&quot;&gt;&lt;a href=&quot;#《富爸爸穷爸爸》读书报告&quot; class=&quot;headerlink&quot; title=&quot;《富爸爸穷爸爸》读书报告&quot;&gt;&lt;/a&gt;&lt;center&gt;《富爸爸穷爸爸》读书报告&lt;/h1&gt;&lt;h2 id=&quot;一、核心观点概述&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="书籍" scheme="https://db-hanty.github.io/categories/%E4%B9%A6%E7%B1%8D/"/>
    
    
    <category term="理财" scheme="https://db-hanty.github.io/tags/%E7%90%86%E8%B4%A2/"/>
    
  </entry>
  
</feed>
