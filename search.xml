<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>开发框架之JavaWeb下</title>
      <link href="/posts/a8603297.html"/>
      <url>/posts/a8603297.html</url>
      
        <content type="html"><![CDATA[<h1 id="开发框架之JavaWeb下"><a href="#开发框架之JavaWeb下" class="headerlink" title="开发框架之JavaWeb下"></a>开发框架之JavaWeb下</h1><h2 id="JSP-与-JSTL"><a href="#JSP-与-JSTL" class="headerlink" title="JSP 与 JSTL"></a>JSP 与 JSTL</h2><h3 id="JSP（Java-Server-Pages）"><a href="#JSP（Java-Server-Pages）" class="headerlink" title="JSP（Java Server Pages）"></a>JSP（Java Server Pages）</h3><ul><li><strong>定义</strong>：JSP 是一种动态网页开发技术，允许在 HTML 中直接嵌入 Java 代码。</li><li><strong>运行原理</strong>：JSP 页面在服务器端会被 <strong>编译成 Servlet</strong>，然后由服务器执行生成最终的 HTML 页面返回给客户端。</li><li><strong>特点</strong>：简化了动态页面开发，不必在 Servlet 中写大量的 <code>out.println()</code>。</li></ul><h3 id="JSTL（Java-Standard-Tag-Library）"><a href="#JSTL（Java-Standard-Tag-Library）" class="headerlink" title="JSTL（Java Standard Tag Library）"></a>JSTL（Java Standard Tag Library）</h3><ul><li><strong>定义</strong>：JSTL 是 JSP 标准标签库，用来代替 JSP 页面中冗余的 Java 代码。</li><li><strong>作用</strong>：<ol><li>提供标准化标签，简化 JSP 开发。</li><li>使 JSP 页面更接近 HTML，降低前端人员理解成本。</li></ol></li><li><strong>常用标签库</strong>：<ul><li>核心标签库（逻辑判断、循环）</li><li>格式化标签库（国际化、本地化）</li><li>SQL 标签库（数据库操作，实际开发中很少用）</li></ul></li></ul><hr><h2 id="会话管理"><a href="#会话管理" class="headerlink" title="会话管理"></a>会话管理</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>会话管理的核心作用是：<strong>记录用户状态和交互过程</strong>。由于 HTTP 协议是无状态的，因此需要额外机制来跟踪用户。</p><h3 id="实现手段"><a href="#实现手段" class="headerlink" title="实现手段"></a>实现手段</h3><div class="table-container"><table><thead><tr><th>技术</th><th>描述</th></tr></thead><tbody><tr><td><strong>Cookie</strong></td><td>保存在客户端的小型数据文件，通过响应头写入浏览器。</td></tr><tr><td><strong>Session</strong></td><td>保存在服务器端的会话对象，依赖 Cookie 中的 SessionID 进行识别。</td></tr></tbody></table></div><blockquote><p>实际开发中，常常结合使用 Cookie 和 Session。</p></blockquote><hr><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><ol><li><strong>原理</strong>：服务器通过 <code>Set-Cookie</code> 响应头告诉浏览器保存数据，后续请求中浏览器会自动携带 Cookie。</li><li><strong>存储形式</strong>：键值对。</li><li><strong>分类</strong>：<ul><li><strong>会话级 Cookie</strong>：存在于浏览器内存，关闭浏览器即失效。</li><li><strong>持久化 Cookie</strong>：保存到硬盘，直到过期时间才会失效。</li></ul></li><li><strong>路径控制</strong>：通过 <code>setPath</code> 设置 Cookie 的生效路径。</li></ol><hr><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><ol><li><strong>原理</strong>：服务器创建 HttpSession 对象，生成一个唯一的 SessionID，通过 Cookie（或 URL 重写）在客户端与服务器之间传递。</li><li><strong>作用</strong>：<ul><li>保存用户登录状态。</li><li>记录用户的操作历史。</li></ul></li><li><strong>默认时效性</strong>：30 分钟（可在 <code>web.xml</code> 中修改）。</li><li><strong>特点</strong>：安全性高，数据保存在服务器端，但会占用服务器内存。</li></ol><hr><h2 id="三大域对象"><a href="#三大域对象" class="headerlink" title="三大域对象"></a>三大域对象</h2><p>域对象是 <strong>存储和传递数据</strong> 的容器，根据作用范围划分：</p><div class="table-container"><table><thead><tr><th>域对象</th><th>类型</th><th>范围</th></tr></thead><tbody><tr><td>请求域</td><td>HttpServletRequest</td><td>一次请求内有效（包括请求转发）</td></tr><tr><td>会话域</td><td>HttpSession</td><td>一次会话范围内有效（多个请求之间共享）</td></tr><tr><td>应用域</td><td>ServletContext</td><td>整个应用范围内有效（所有用户、所有请求共享）</td></tr></tbody></table></div><ul><li>请求域：适合存储临时数据，如表单校验结果。</li><li>会话域：适合存储用户级数据，如登录信息。</li><li>应用域：适合存储全局配置数据，如网站访问统计。</li></ul><hr><h2 id="MVC-架构模式"><a href="#MVC-架构模式" class="headerlink" title="MVC 架构模式"></a>MVC 架构模式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>MVC（Model-View-Controller）是一种经典的软件架构模式，将系统分为三层，做到 <strong>关注点分离</strong>：</p><ul><li><strong>M（Model 模型层）</strong><ul><li>负责业务逻辑和数据操作。</li><li>包含实体类（Entity）、数据传输对象（VO/DTO）、业务处理类（Service）。</li></ul></li><li><strong>V（View 视图层）</strong><ul><li>负责界面展示，使用 HTML、CSS、JS、JSP 等技术。</li><li>在前后端分离的项目中，视图层独立为前端工程。</li></ul></li><li><strong>C（Controller 控制层）</strong><ul><li>接收客户端请求，调用业务逻辑，返回结果。</li><li>典型实现：Servlet、SpringMVC 控制器。</li></ul></li></ul><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>降低耦合度，提高可维护性。</li><li>结构清晰，便于分工协作。</li><li>便于升级到更复杂的框架（如 Spring、SpringMVC）。</li></ol><hr><h2 id="JavaWeb-总结与学习建议"><a href="#JavaWeb-总结与学习建议" class="headerlink" title="JavaWeb 总结与学习建议"></a>JavaWeb 总结与学习建议</h2><p>JavaWeb 是 <strong>Java 开发的入门框架</strong>，其核心是掌握以下内容：</p><ol><li><strong>基础概念</strong>：Servlet、JSP、JSTL、三大域对象。</li><li><strong>会话管理</strong>：理解 Cookie 与 Session 的区别和应用场景。</li><li><strong>MVC 模式</strong>：掌握分层思想，为后续学习 SpringMVC、Spring Boot 打下基础。</li><li><strong>配置文件</strong>：熟悉 XML、properties、YAML 等常见配置方式。</li></ol><h3 id="学习建议"><a href="#学习建议" class="headerlink" title="学习建议"></a>学习建议</h3><ul><li><strong>建议快速过一遍即可</strong>，掌握核心思想和基本用法。</li><li>不必过分深入 JSP，因为现在主流项目普遍采用 <strong>前后端分离</strong>，JSP 使用场景越来越少。</li><li><strong>重点理解 Servlet、Session、MVC</strong>，这些是后续学习 Spring 系列框架的基石。</li><li>建议在学习过程中 <strong>写一些小项目</strong>（如登录系统、留言板），用实际案例加深理解。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 开发框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发框架之JavaWeb上</title>
      <link href="/posts/df670201.html"/>
      <url>/posts/df670201.html</url>
      
        <content type="html"><![CDATA[<h1 id="开发框架之-JavaWeb"><a href="#开发框架之-JavaWeb" class="headerlink" title="开发框架之 JavaWeb"></a>开发框架之 JavaWeb</h1><p>JavaWeb 是基于 Java 技术开发 Web 应用的一整套解决方案。它涵盖了从数据交换格式到服务端组件，再到请求处理和事件监听的一系列核心知识。本文将结合常见的开发要点，对 JavaWeb 的主要技术进行梳理。</p><hr><h2 id="一、XML"><a href="#一、XML" class="headerlink" title="一、XML"></a>一、XML</h2><p>💡 <strong>介绍</strong>：XML（eXtensible Markup Language，可扩展标记语言）是一种标记语言。<br><strong>主要用途</strong>：常用于配置文件。</p><h3 id="常见的配置文件类型"><a href="#常见的配置文件类型" class="headerlink" title="常见的配置文件类型"></a>常见的配置文件类型</h3><ol><li><strong>properties 文件</strong>：如 Druid 数据库连接池的配置。  </li><li><strong>XML 文件</strong>：如 Tomcat 的配置文件。  </li><li><strong>YAML 文件</strong>：如 SpringBoot 的配置文件。  </li><li><strong>JSON 文件</strong>：通常用来做数据传输。</li></ol><h3 id="XML-基本格式"><a href="#XML-基本格式" class="headerlink" title="XML 基本格式"></a>XML 基本格式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dev</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>root<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dev</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>特点：</strong></p><ol><li>根标签只有一个。  </li><li>第一行必须是 <code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</code>。  </li><li>XML 约束（DTD/Schema）用于限定 XML 内容能编写的结构和内容。</li></ol><hr><h2 id="二、JSON"><a href="#二、JSON" class="headerlink" title="二、JSON"></a>二、JSON</h2><p>💡 <strong>介绍</strong>：JSON（JavaScript Object Notation）是一种轻量级的数据交换格式。<br>特点：可读性强，格式简单，广泛用于前后端数据交互。</p><p><strong>示例：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;root&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="三、Servlet"><a href="#三、Servlet" class="headerlink" title="三、Servlet"></a>三、Servlet</h2><h3 id="1-动态资源与静态资源"><a href="#1-动态资源与静态资源" class="headerlink" title="1. 动态资源与静态资源"></a>1. 动态资源与静态资源</h3><ul><li><p><strong>静态资源</strong>：无需运行时通过代码生成的资源，例如 HTML、CSS、JS、图片。  </p></li><li><p><strong>动态资源</strong>：运行时通过代码生成的资源，例如 Servlet。  </p><blockquote><p>注意：这里的“动态”并不是指前端动画或交互效果，而是后端生成内容的过程。</p></blockquote></li></ul><h3 id="2-Servlet-简介"><a href="#2-Servlet-简介" class="headerlink" title="2. Servlet 简介"></a>2. Servlet 简介</h3><ul><li>Servlet 是运行在服务端的 Java 小程序。  </li><li>从代码层面看，Servlet 是一个接口，需要由开发者实现。</li></ul><h3 id="3-Servlet-开发流程"><a href="#3-Servlet-开发流程" class="headerlink" title="3. Servlet 开发流程"></a>3. Servlet 开发流程</h3><ol><li>创建 JavaWeb 项目，将 Tomcat 添加到依赖。  </li><li>编写 Servlet 类，重写 <code>service</code> 方法：  <ul><li>从 <code>request</code> 对象中获取请求信息。  </li><li>编写业务逻辑代码。  </li><li>将响应数据放入 <code>response</code> 对象。  </li><li>在返回数据前设置响应头（Content-Type）。  </li></ul></li></ol><h3 id="4-在-web-xml-中配置-Servlet"><a href="#4-在-web-xml-中配置-Servlet" class="headerlink" title="4. 在 web.xml 中配置 Servlet"></a>4. 在 web.xml 中配置 Servlet</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>helloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.demo.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>helloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>servlet-class</strong>：告诉 Tomcat 要实例化的 Servlet。  </li><li><strong>url-pattern</strong>：配置请求的映射路径。  </li></ul><h3 id="5-常见问题"><a href="#5-常见问题" class="headerlink" title="5. 常见问题"></a>5. 常见问题</h3><ul><li><strong>Content-Type</strong>：静态资源由 Tomcat 自动配置；动态资源需手动设置。  </li><li><strong>url-pattern</strong>：  <ul><li>精准匹配：如 <code>/Servlet01</code>。  </li><li>模糊匹配：如 <code>/*</code>（了解即可）。  </li></ul></li></ul><h3 id="6-注解方式配置-Servlet"><a href="#6-注解方式配置-Servlet" class="headerlink" title="6. 注解方式配置 Servlet"></a>6. 注解方式配置 Servlet</h3><p>使用 <code>@WebServlet</code> 简化配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;Hello, JavaWeb!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-Servlet-生命周期"><a href="#7-Servlet-生命周期" class="headerlink" title="7. Servlet 生命周期"></a>7. Servlet 生命周期</h3><ol><li><strong>实例化</strong>：调用构造方法。  </li><li><strong>初始化</strong>：调用 <code>init()</code> 方法。  </li><li><strong>处理请求</strong>：调用 <code>service()</code> 方法。  </li><li><strong>销毁</strong>：调用 <code>destroy()</code> 方法。  </li></ol><h3 id="8-常用-API"><a href="#8-常用-API" class="headerlink" title="8. 常用 API"></a>8. 常用 API</h3><ul><li><strong>ServletConfig</strong>：为某个 Servlet 提供配置参数（多例）。  </li><li><strong>ServletContext</strong>：  <ol><li>为所有 Servlet 提供共享的配置参数（单例）。  </li><li>获取文件路径和上下文信息。  </li><li>作为域对象存取数据。  </li></ol></li></ul><h3 id="9-HttpServletRequest"><a href="#9-HttpServletRequest" class="headerlink" title="9. HttpServletRequest"></a>9. HttpServletRequest</h3><ul><li>由 Tomcat 将请求报文转换并封装而来。  </li><li>代表客户端发来的请求，所有请求信息都可通过该对象获得。  </li></ul><h3 id="10-HttpServletResponse"><a href="#10-HttpServletResponse" class="headerlink" title="10. HttpServletResponse"></a>10. HttpServletResponse</h3><ul><li>由 Tomcat 将响应报文转换并封装而来。  </li><li>代表服务端发出的响应，可设置响应头、响应体等信息。  </li></ul><hr><h2 id="四、Filter（过滤器）"><a href="#四、Filter（过滤器）" class="headerlink" title="四、Filter（过滤器）"></a>四、Filter（过滤器）</h2><h3 id="1-作用"><a href="#1-作用" class="headerlink" title="1. 作用"></a>1. 作用</h3><ul><li>在 Servlet 执行前后，对请求和响应进行拦截和处理。  </li><li>常见应用场景：权限校验、编码设置、日志记录等。  </li></ul><h3 id="2-生命周期"><a href="#2-生命周期" class="headerlink" title="2. 生命周期"></a>2. 生命周期</h3><p>与 Servlet 类似，但没有 <code>load-on-startup</code>。</p><h3 id="3-过滤器链"><a href="#3-过滤器链" class="headerlink" title="3. 过滤器链"></a>3. 过滤器链</h3><ul><li>多个过滤器可依次对同一资源进行过滤。  </li><li>顺序由 <code>filter-mapping</code> 配置决定。  </li><li>使用 Servlet name 进行匹配时，优先级较低。  </li></ul><p><strong>示意：</strong></p><p>客户端请求 → Filter1 → Filter2 → Servlet → Filter2 → Filter1 → 响应返回客户端  </p><h3 id="4-注解方式配置"><a href="#4-注解方式配置" class="headerlink" title="4. 注解方式配置"></a>4. 注解方式配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(filterName=&quot;logFilter&quot;, urlPatterns=&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请求开始...&quot;</span>);</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">        System.out.println(<span class="string">&quot;响应结束...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="五、Listener（监听器）"><a href="#五、Listener（监听器）" class="headerlink" title="五、Listener（监听器）"></a>五、Listener（监听器）</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h3><p>监听器类似于 JavaScript 中的事件监听器。<br>💡 <strong>作用</strong>：用于监听域对象（Application、Session、Request）身上发生的事件或状态变化，并作出响应。</p><h3 id="2-分类"><a href="#2-分类" class="headerlink" title="2. 分类"></a>2. 分类</h3><ul><li><strong>Application 监听器</strong>：监听应用上下文的创建和销毁。  </li><li><strong>Session 监听器</strong>：监听 Session 的创建、销毁以及属性变化。  </li><li><strong>Request 监听器</strong>：监听请求对象的创建和销毁。  </li></ul><h3 id="3-钝化与活化监听器"><a href="#3-钝化与活化监听器" class="headerlink" title="3. 钝化与活化监听器"></a>3. 钝化与活化监听器</h3><ul><li><strong>钝化</strong>：服务器关闭时，将 Session 对象序列化保存到磁盘。  </li><li><strong>活化</strong>：服务器重启或再次获取 Session 时，从磁盘反序列化恢复到内存。  </li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>JavaWeb 是 Java 开发 Web 应用的基础，掌握其核心组件（Servlet、Filter、Listener），理解请求与响应的生命周期，对后续学习 Spring MVC、Spring Boot 等框架具有重要意义。<br>随着现代框架的普及，Servlet 等技术逐渐隐藏在更高层的框架之下，但理解其本质仍然是每一位 Java 开发者的必修课。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 开发框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用git在GitHub上快速部署项目</title>
      <link href="/posts/6efdc0e0.html"/>
      <url>/posts/6efdc0e0.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用git在GitHub上快速部署项目"><a href="#使用git在GitHub上快速部署项目" class="headerlink" title="使用git在GitHub上快速部署项目"></a>使用git在GitHub上快速部署项目</h1><p>Github网址：<a href="https://github.com/">text</a></p><h2 id="一、创建GitHub仓库"><a href="#一、创建GitHub仓库" class="headerlink" title="一、创建GitHub仓库"></a>一、创建GitHub仓库</h2><p>点击创建<br><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-09-10%20193318.png" alt=""></p><p>创建仓库界面<br><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-09-10%20193751.png" alt=""></p><h2 id="二、打开项目终端或者通过git-bash打开项目"><a href="#二、打开项目终端或者通过git-bash打开项目" class="headerlink" title="二、打开项目终端或者通过git bash打开项目"></a>二、打开项目终端或者通过git bash打开项目</h2><p><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-09-10%20194017.png" alt=""></p><h2 id="三、创建git仓库"><a href="#三、创建git仓库" class="headerlink" title="三、创建git仓库"></a>三、创建git仓库</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h2 id="四、将所有文件添加到仓库中"><a href="#四、将所有文件添加到仓库中" class="headerlink" title="四、将所有文件添加到仓库中"></a>四、将所有文件添加到仓库中</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><h2 id="五、提交所有文件到仓库中"><a href="#五、提交所有文件到仓库中" class="headerlink" title="五、提交所有文件到仓库中"></a>五、提交所有文件到仓库中</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;commit&quot;</span></span><br></pre></td></tr></table></figure><h2 id="六、将仓库与GitHub仓库关联"><a href="#六、将仓库与GitHub仓库关联" class="headerlink" title="六、将仓库与GitHub仓库关联"></a>六、将仓库与GitHub仓库关联</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin + ssh</span><br></pre></td></tr></table></figure><p>⚠️<code>ssh</code>为GitHub仓库的ssh地址</p><p><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-09-10%20194714.png" alt=""></p><h2 id="七、将仓库推送到GitHub仓库中"><a href="#七、将仓库推送到GitHub仓库中" class="headerlink" title="七、将仓库推送到GitHub仓库中"></a>七、将仓库推送到GitHub仓库中</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>⚠️注意文件夹必须有文件否则会报错<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: failed to push some refs to <span class="string">&#x27;github.com:DB-HanTy/demo01.git&#x27;</span></span><br></pre></td></tr></table></figure><br>⚠️推送到master分支</p><p><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-09-10%20195301.png" alt=""></p><h1 id="恭喜，项目已成功部署到GitHub仓库中！"><a href="#恭喜，项目已成功部署到GitHub仓库中！" class="headerlink" title="恭喜，项目已成功部署到GitHub仓库中！"></a>恭喜，项目已成功部署到GitHub仓库中！</h1>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>外观模式</title>
      <link href="/posts/f7de8aa8.html"/>
      <url>/posts/f7de8aa8.html</url>
      
        <content type="html"><![CDATA[<h1 id="外观模式（Facade-Pattern）"><a href="#外观模式（Facade-Pattern）" class="headerlink" title="外观模式（Facade Pattern）"></a>外观模式（Facade Pattern）</h1><p>在设计模式中，<strong>外观模式</strong>（Facade Pattern）是一种结构型模式。它为复杂子系统提供一个统一的高层次接口，简化了客户端的使用方式，并隐藏了系统的内部实现细节。</p><hr><h2 id="模式的作用"><a href="#模式的作用" class="headerlink" title="模式的作用"></a>模式的作用</h2><blockquote><p><strong>核心思想</strong>：通过一个统一的接口与子系统交互，降低客户端的复杂性，使得系统更易于使用。</p></blockquote><hr><h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><p>在软件系统中，子系统可能包含多个复杂的模块和接口，客户端如果直接与这些模块交互，会导致以下问题：  </p><ul><li>客户端与子系统高度耦合。  </li><li>客户端代码复杂，难以维护。  </li></ul><p>外观模式通过引入一个外观类（Facade），将复杂的子系统调用进行封装，向外部暴露简单的接口，从而解决上述问题。</p><hr><h2 id="优缺点分析"><a href="#优缺点分析" class="headerlink" title="优缺点分析"></a>优缺点分析</h2><h3 id="✅-优点"><a href="#✅-优点" class="headerlink" title="✅ 优点"></a>✅ 优点</h3><ol><li><strong>减少依赖</strong>：客户端只依赖外观类，降低了与子系统的耦合。  </li><li><strong>提高灵活性</strong>：子系统内部变化不会影响客户端。  </li><li><strong>增强安全性</strong>：对外隐藏了子系统的实现细节，只提供必要的接口。  </li></ol><h3 id="⚠️-缺点"><a href="#⚠️-缺点" class="headerlink" title="⚠️ 缺点"></a>⚠️ 缺点</h3><ul><li><strong>违反开闭原则</strong>：当子系统需要修改时，可能需要同时修改外观类，降低了扩展性。  </li></ul><hr><h2 id="UML-示意图"><a href="#UML-示意图" class="headerlink" title="UML 示意图"></a>UML 示意图</h2><p><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.png" alt=""></p><hr><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>下面用 Java 演示外观模式的实现。</p><h3 id="接口及其实现类"><a href="#接口及其实现类" class="headerlink" title="接口及其实现类"></a>接口及其实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Rectangle::draw()&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Square::draw()&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Circle::draw()&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="外观类"><a href="#外观类" class="headerlink" title="外观类"></a>外观类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShapeMaker</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> Shape circle;</span><br><span class="line">   <span class="keyword">private</span> Shape rectangle;</span><br><span class="line">   <span class="keyword">private</span> Shape square;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">ShapeMaker</span><span class="params">()</span> &#123;</span><br><span class="line">      circle = <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">      rectangle = <span class="keyword">new</span> <span class="title class_">Rectangle</span>();</span><br><span class="line">      square = <span class="keyword">new</span> <span class="title class_">Square</span>();</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawCircle</span><span class="params">()</span>&#123;</span><br><span class="line">      circle.draw();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawRectangle</span><span class="params">()</span>&#123;</span><br><span class="line">      rectangle.draw();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawSquare</span><span class="params">()</span>&#123;</span><br><span class="line">      square.draw();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FacadePatternDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ShapeMaker</span> <span class="variable">shapeMaker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShapeMaker</span>();</span><br><span class="line"> </span><br><span class="line">      shapeMaker.drawCircle();</span><br><span class="line">      shapeMaker.drawRectangle();</span><br><span class="line">      shapeMaker.drawSquare();      </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Circle::draw()</span><br><span class="line">Rectangle::draw()</span><br><span class="line">Square::draw()</span><br></pre></td></tr></table></figure><hr><h2 id="实际应用实例"><a href="#实际应用实例" class="headerlink" title="实际应用实例"></a>实际应用实例</h2><ul><li><strong>Java 三层架构</strong>：在表示层、业务逻辑层和数据访问层之间，通过外观模式提供统一接口，简化各层的访问。  </li><li><strong>图形库</strong>：通过外观类封装多个图形对象的绘制接口，客户端只需调用外观类即可操作复杂图形系统。  </li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>外观模式的本质是 <strong>为复杂子系统提供一个简单的接口</strong>：  </p><ul><li>适用于需要简化客户端调用的场景。  </li><li>通过解耦降低了系统复杂性。  </li><li>但在扩展性上需要权衡，因为外观类的修改可能涉及子系统的调整。  </li></ul><p>合理使用外观模式，能让系统在保持灵活性的同时，提高可用性和可维护性。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观察者模式</title>
      <link href="/posts/9a246216.html"/>
      <url>/posts/9a246216.html</url>
      
        <content type="html"><![CDATA[<h1 id="观察者模式（Observer-Pattern）"><a href="#观察者模式（Observer-Pattern）" class="headerlink" title="观察者模式（Observer Pattern）"></a>观察者模式（Observer Pattern）</h1><p>在设计模式中，<strong>观察者模式</strong>（Observer Pattern）是一种行为型模式。它定义了一种对象间的一对多依赖关系，当一个对象（主题/被观察者）的状态发生改变时，所有依赖它的对象（观察者）都会自动收到通知并更新。</p><hr><h2 id="模式的作用"><a href="#模式的作用" class="headerlink" title="模式的作用"></a>模式的作用</h2><blockquote><p><strong>核心思想</strong>：一个对象状态变化时，自动通知其他依赖它的对象，保持对象间的低耦合和高协作性。</p></blockquote><hr><h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><p>在软件开发中，经常会遇到这样的问题：<br>当一个对象的状态发生变化时，如何让依赖它的其他对象自动感知并响应，而不需要两者紧密耦合？  </p><p>例如：  </p><ul><li>图形界面中，数据模型更新后，多个视图需要自动刷新。  </li><li>消息系统中，一个事件发生时，多个监听器需要收到通知。  </li></ul><p>观察者模式就是为了解决这种 <strong>一对多的通知机制</strong>。</p><hr><h2 id="优缺点分析"><a href="#优缺点分析" class="headerlink" title="优缺点分析"></a>优缺点分析</h2><h3 id="✅-优点"><a href="#✅-优点" class="headerlink" title="✅ 优点"></a>✅ 优点</h3><ul><li><strong>抽象耦合</strong>：主题和观察者通过抽象接口依赖，解耦明显。  </li><li><strong>触发机制</strong>：当主题状态发生变化时，会自动触发通知机制。  </li></ul><h3 id="⚠️-缺点"><a href="#⚠️-缺点" class="headerlink" title="⚠️ 缺点"></a>⚠️ 缺点</h3><ul><li><strong>性能问题</strong>：如果观察者数量过多，通知会带来性能消耗。  </li><li><strong>循环依赖</strong>：不当使用可能导致循环调用，甚至系统崩溃。  </li><li><strong>缺乏变化详情</strong>：观察者只知道主题发生了变化，但不一定知道具体变化了什么。  </li></ul><hr><h2 id="UML-示意图"><a href="#UML-示意图" class="headerlink" title="UML 示意图"></a>UML 示意图</h2><p><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.png" alt=""></p><hr><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>下面用 Java 演示观察者模式的实现。</p><h3 id="主题类（被观察对象）"><a href="#主题类（被观察对象）" class="headerlink" title="主题类（被观察对象）"></a>主题类（被观察对象）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Observer&gt;();</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> state;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(<span class="type">int</span> state)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.state = state;</span><br><span class="line">      notifyAllObservers();</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attach</span><span class="params">(Observer observer)</span>&#123;</span><br><span class="line">      observers.add(observer);      </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyAllObservers</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">         observer.update();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象观察者类"><a href="#抽象观察者类" class="headerlink" title="抽象观察者类"></a>抽象观察者类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">   <span class="keyword">protected</span> Subject subject;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体观察者类"><a href="#具体观察者类" class="headerlink" title="具体观察者类"></a>具体观察者类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryObserver</span> <span class="keyword">extends</span> <span class="title class_">Observer</span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">BinaryObserver</span><span class="params">(Subject subject)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.subject = subject;</span><br><span class="line">      <span class="built_in">this</span>.subject.attach(<span class="built_in">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Binary String: &quot;</span> </span><br><span class="line">         + Integer.toBinaryString(subject.getState()));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OctalObserver</span> <span class="keyword">extends</span> <span class="title class_">Observer</span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">OctalObserver</span><span class="params">(Subject subject)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.subject = subject;</span><br><span class="line">      <span class="built_in">this</span>.subject.attach(<span class="built_in">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Octal String: &quot;</span> </span><br><span class="line">         + Integer.toOctalString(subject.getState()));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HexaObserver</span> <span class="keyword">extends</span> <span class="title class_">Observer</span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">HexaObserver</span><span class="params">(Subject subject)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.subject = subject;</span><br><span class="line">      <span class="built_in">this</span>.subject.attach(<span class="built_in">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Hex String: &quot;</span> </span><br><span class="line">         + Integer.toHexString(subject.getState()).toUpperCase());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObserverPatternDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Subject</span>();</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">HexaObserver</span>(subject);</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">OctalObserver</span>(subject);</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">BinaryObserver</span>(subject);</span><br><span class="line"> </span><br><span class="line">      System.out.println(<span class="string">&quot;First state change: 15&quot;</span>);   </span><br><span class="line">      subject.setState(<span class="number">15</span>);</span><br><span class="line"> </span><br><span class="line">      System.out.println(<span class="string">&quot;Second state change: 10&quot;</span>);  </span><br><span class="line">      subject.setState(<span class="number">10</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">First state change: 15</span><br><span class="line">Hex String: F</span><br><span class="line">Octal String: 17</span><br><span class="line">Binary String: 1111</span><br><span class="line"></span><br><span class="line">Second state change: 10</span><br><span class="line">Hex String: A</span><br><span class="line">Octal String: 12</span><br><span class="line">Binary String: 1010</span><br></pre></td></tr></table></figure><hr><h2 id="实际应用场景"><a href="#实际应用场景" class="headerlink" title="实际应用场景"></a>实际应用场景</h2><ul><li><strong>GUI 系统</strong>：按钮点击事件通知多个监听器。  </li><li><strong>订阅-发布系统</strong>：例如消息队列中的订阅机制。  </li><li><strong>分布式系统</strong>：当节点状态发生变化时，自动通知其他节点同步。  </li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>观察者模式是一种非常常用的设计模式，它解决了对象间的通知和依赖问题。  </p><ul><li>它降低了对象之间的耦合度。  </li><li>提供了一种灵活的触发机制。  </li><li>但在使用时需要注意性能和循环依赖问题。  </li></ul><p>理解并灵活运用观察者模式，有助于我们在开发中实现更清晰、更可扩展的系统架构。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>适配器模式</title>
      <link href="/posts/f5c535ea.html"/>
      <url>/posts/f5c535ea.html</url>
      
        <content type="html"><![CDATA[<h1 id="适配器模式（Adapter-Pattern）"><a href="#适配器模式（Adapter-Pattern）" class="headerlink" title="适配器模式（Adapter Pattern）"></a>适配器模式（Adapter Pattern）</h1><p>在设计模式中，<strong>适配器模式</strong>（Adapter Pattern）是一种结构型模式。它的核心思想是通过一个中间件（适配器），将一个类的接口转换为客户端期望的接口，从而让原本接口不兼容的类可以协同工作。</p><hr><h2 id="模式的作用"><a href="#模式的作用" class="headerlink" title="模式的作用"></a>模式的作用</h2><blockquote><p><strong>核心思想</strong>：通过适配器，将原有类的接口转换成客户端需要的另一种接口，从而实现兼容。</p></blockquote><p>这使得我们能够在不修改原有类的情况下，将其融入新的环境中。</p><hr><h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><p>在实际开发中，我们经常遇到这样的场景：已有的类功能很好，但其接口与当前系统的要求不一致。如果直接修改原有类，既破坏了封闭原则，又可能影响已有代码的稳定性。<br>此时引入 <strong>适配器模式</strong>，在中间增加一个“适配器”，即可解决接口不兼容的问题。</p><hr><h2 id="优缺点分析"><a href="#优缺点分析" class="headerlink" title="优缺点分析"></a>优缺点分析</h2><h3 id="✅-优点"><a href="#✅-优点" class="headerlink" title="✅ 优点"></a>✅ 优点</h3><ul><li><strong>促进协作</strong>：即使类之间没有直接关系，也能通过适配器协同工作。  </li><li><strong>提高复用性</strong>：原有类无需修改即可被复用。  </li><li><strong>增强透明性</strong>：客户端调用时无感知，保持接口一致性。  </li><li><strong>灵活性高</strong>：可以灵活地适配多种不同接口。  </li></ul><h3 id="⚠️-缺点"><a href="#⚠️-缺点" class="headerlink" title="⚠️ 缺点"></a>⚠️ 缺点</h3><ul><li><strong>结构可能复杂</strong>：过度使用适配器可能导致系统结构混乱。  </li><li><strong>Java 的局限</strong>：由于 Java 只能单继承，一个适配器类通常只能适配一个类。  </li></ul><hr><h2 id="UML-示意图"><a href="#UML-示意图" class="headerlink" title="UML 示意图"></a>UML 示意图</h2><p><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.png" alt=""></p><hr><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>下面通过一个多媒体播放器的例子，来演示适配器模式的实现。</p><h3 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MediaPlayer</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">(String audioType, String fileName)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AdvancedMediaPlayer</span> &#123; </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playVlc</span><span class="params">(String fileName)</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playMp4</span><span class="params">(String fileName)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高级播放器的实现类"><a href="#高级播放器的实现类" class="headerlink" title="高级播放器的实现类"></a>高级播放器的实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VlcPlayer</span> <span class="keyword">implements</span> <span class="title class_">AdvancedMediaPlayer</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playVlc</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Playing vlc file. Name: &quot;</span> + fileName);      </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playMp4</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">      <span class="comment">// 什么也不做</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mp4Player</span> <span class="keyword">implements</span> <span class="title class_">AdvancedMediaPlayer</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playVlc</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">      <span class="comment">// 什么也不做</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playMp4</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Playing mp4 file. Name: &quot;</span> + fileName);      </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="适配器类"><a href="#适配器类" class="headerlink" title="适配器类"></a>适配器类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MediaAdapter</span> <span class="keyword">implements</span> <span class="title class_">MediaPlayer</span> &#123;</span><br><span class="line">   AdvancedMediaPlayer advancedMusicPlayer;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">MediaAdapter</span><span class="params">(String audioType)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(audioType.equalsIgnoreCase(<span class="string">&quot;vlc&quot;</span>))&#123;</span><br><span class="line">         advancedMusicPlayer = <span class="keyword">new</span> <span class="title class_">VlcPlayer</span>();       </span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (audioType.equalsIgnoreCase(<span class="string">&quot;mp4&quot;</span>))&#123;</span><br><span class="line">         advancedMusicPlayer = <span class="keyword">new</span> <span class="title class_">Mp4Player</span>();</span><br><span class="line">      &#125;  </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">(String audioType, String fileName)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(audioType.equalsIgnoreCase(<span class="string">&quot;vlc&quot;</span>))&#123;</span><br><span class="line">         advancedMusicPlayer.playVlc(fileName);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(audioType.equalsIgnoreCase(<span class="string">&quot;mp4&quot;</span>))&#123;</span><br><span class="line">         advancedMusicPlayer.playMp4(fileName);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="音频播放器类（客户端）"><a href="#音频播放器类（客户端）" class="headerlink" title="音频播放器类（客户端）"></a>音频播放器类（客户端）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AudioPlayer</span> <span class="keyword">implements</span> <span class="title class_">MediaPlayer</span> &#123;</span><br><span class="line">   MediaAdapter mediaAdapter; </span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">(String audioType, String fileName)</span> &#123;    </span><br><span class="line">      <span class="comment">// 播放 mp3 音乐文件的内置支持</span></span><br><span class="line">      <span class="keyword">if</span>(audioType.equalsIgnoreCase(<span class="string">&quot;mp3&quot;</span>))&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;Playing mp3 file. Name: &quot;</span> + fileName);         </span><br><span class="line">      &#125; </span><br><span class="line">      <span class="comment">// 使用适配器播放其他格式</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(audioType.equalsIgnoreCase(<span class="string">&quot;vlc&quot;</span>) || audioType.equalsIgnoreCase(<span class="string">&quot;mp4&quot;</span>))&#123;</span><br><span class="line">         mediaAdapter = <span class="keyword">new</span> <span class="title class_">MediaAdapter</span>(audioType);</span><br><span class="line">         mediaAdapter.play(audioType, fileName);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;Invalid media. &quot;</span> + audioType + <span class="string">&quot; format not supported&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdapterPatternDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">AudioPlayer</span> <span class="variable">audioPlayer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AudioPlayer</span>();</span><br><span class="line"> </span><br><span class="line">      audioPlayer.play(<span class="string">&quot;mp3&quot;</span>, <span class="string">&quot;beyond the horizon.mp3&quot;</span>);</span><br><span class="line">      audioPlayer.play(<span class="string">&quot;mp4&quot;</span>, <span class="string">&quot;alone.mp4&quot;</span>);</span><br><span class="line">      audioPlayer.play(<span class="string">&quot;vlc&quot;</span>, <span class="string">&quot;far far away.vlc&quot;</span>);</span><br><span class="line">      audioPlayer.play(<span class="string">&quot;avi&quot;</span>, <span class="string">&quot;mind me.avi&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Playing mp3 file. Name: beyond the horizon.mp3</span><br><span class="line">Playing mp4 file. Name: alone.mp4</span><br><span class="line">Playing vlc file. Name: far far away.vlc</span><br><span class="line">Invalid media. avi format not supported</span><br></pre></td></tr></table></figure><hr><h2 id="实际应用实例"><a href="#实际应用实例" class="headerlink" title="实际应用实例"></a>实际应用实例</h2><ul><li><strong>电源适配器</strong>：笔记本电脑电源适配器，将 220V 转换为可用电压。  </li><li><strong>Java IO 类库</strong>：<code>InputStreamReader</code> 就是典型的适配器模式，用于将字节流转换为字符流。  </li><li><strong>第三方库整合</strong>：通过适配器将第三方 API 与现有系统对接。  </li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>适配器模式通过在中间增加一个“适配器”，使接口不兼容的类能够协同工作，既避免了对原有类的修改，又保证了系统的灵活性和扩展性。  </p><p><strong>适用场景</strong>：  </p><ul><li>系统需要复用一些现有类，但其接口与新系统不匹配。  </li><li>需要统一多个不同接口的类。  </li><li>集成第三方库时需要做接口转换。  </li></ul><p>掌握适配器模式，有助于提升系统的可复用性和扩展性，是实际开发中常用的结构型模式之一。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>责任链模式</title>
      <link href="/posts/6208627e.html"/>
      <url>/posts/6208627e.html</url>
      
        <content type="html"><![CDATA[<h1 id="责任链模式（Chain-of-Responsibility-Pattern）"><a href="#责任链模式（Chain-of-Responsibility-Pattern）" class="headerlink" title="责任链模式（Chain of Responsibility Pattern）"></a>责任链模式（Chain of Responsibility Pattern）</h1><p>在设计模式中，<strong>责任链模式</strong>（Chain of Responsibility Pattern）是一种行为型模式。它通过将多个处理对象串联成一条链，请求会沿着这条链传递，直到被某个处理对象处理为止。这样，发送者无需关心由谁来处理请求，接收者之间也可以灵活组合。</p><hr><h2 id="模式的作用"><a href="#模式的作用" class="headerlink" title="模式的作用"></a>模式的作用</h2><blockquote><p><strong>核心思想</strong>：把多个处理器串成链，请求在链上传递，直到有对象处理为止。</p></blockquote><hr><h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><p>在传统设计中，发送者必须明确知道接收者是谁，导致两者耦合度过高。责任链模式的引入，使得：  </p><ul><li>发送者和接收者之间解耦。  </li><li>多个对象都有机会处理请求，而发送者不必关心到底由谁来处理。  </li></ul><hr><h2 id="优缺点分析"><a href="#优缺点分析" class="headerlink" title="优缺点分析"></a>优缺点分析</h2><h3 id="✅-优点"><a href="#✅-优点" class="headerlink" title="✅ 优点"></a>✅ 优点</h3><ol><li><strong>降低耦合度</strong>：发送者与接收者解耦，结构更加灵活。  </li><li><strong>简化对象</strong>：请求的发送方不需要关心处理的细节。  </li><li><strong>灵活性高</strong>：可以在运行时动态调整链的顺序或成员。  </li><li><strong>易于扩展</strong>：新增处理类只需加入链即可。  </li></ol><h3 id="⚠️-缺点"><a href="#⚠️-缺点" class="headerlink" title="⚠️ 缺点"></a>⚠️ 缺点</h3><ol><li><strong>请求可能未被处理</strong>：链上的处理器可能都不接收请求。  </li><li><strong>性能问题</strong>：请求可能需要传递较长的链，影响效率。  </li><li><strong>调试困难</strong>：运行时不容易观察链的传递过程，容易出错。  </li></ol><hr><h2 id="UML-示意图"><a href="#UML-示意图" class="headerlink" title="UML 示意图"></a>UML 示意图</h2><p><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F.png" alt=""></p><hr><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>下面通过日志记录器的例子来演示责任链模式。</p><h3 id="抽象记录器类"><a href="#抽象记录器类" class="headerlink" title="抽象记录器类"></a>抽象记录器类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractLogger</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">INFO</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">DEBUG</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ERROR</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">protected</span> <span class="type">int</span> level;</span><br><span class="line">   <span class="keyword">protected</span> AbstractLogger nextLogger;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNextLogger</span><span class="params">(AbstractLogger nextLogger)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.nextLogger = nextLogger;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logMessage</span><span class="params">(<span class="type">int</span> level, String message)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">this</span>.level &lt;= level)&#123;</span><br><span class="line">         write(message);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(nextLogger != <span class="literal">null</span>)&#123;</span><br><span class="line">         nextLogger.logMessage(level, message);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String message)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体记录器实现"><a href="#具体记录器实现" class="headerlink" title="具体记录器实现"></a>具体记录器实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsoleLogger</span> <span class="keyword">extends</span> <span class="title class_">AbstractLogger</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">ConsoleLogger</span><span class="params">(<span class="type">int</span> level)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.level = level;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String message)</span> &#123;    </span><br><span class="line">      System.out.println(<span class="string">&quot;Standard Console::Logger: &quot;</span> + message);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ErrorLogger</span> <span class="keyword">extends</span> <span class="title class_">AbstractLogger</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">ErrorLogger</span><span class="params">(<span class="type">int</span> level)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.level = level;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String message)</span> &#123;    </span><br><span class="line">      System.out.println(<span class="string">&quot;Error Console::Logger: &quot;</span> + message);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileLogger</span> <span class="keyword">extends</span> <span class="title class_">AbstractLogger</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">FileLogger</span><span class="params">(<span class="type">int</span> level)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.level = level;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String message)</span> &#123;    </span><br><span class="line">      System.out.println(<span class="string">&quot;File::Logger: &quot;</span> + message);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChainPatternDemo</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> AbstractLogger <span class="title function_">getChainOfLoggers</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="type">AbstractLogger</span> <span class="variable">errorLogger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorLogger</span>(AbstractLogger.ERROR);</span><br><span class="line">      <span class="type">AbstractLogger</span> <span class="variable">fileLogger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileLogger</span>(AbstractLogger.DEBUG);</span><br><span class="line">      <span class="type">AbstractLogger</span> <span class="variable">consoleLogger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConsoleLogger</span>(AbstractLogger.INFO);</span><br><span class="line"> </span><br><span class="line">      errorLogger.setNextLogger(fileLogger);</span><br><span class="line">      fileLogger.setNextLogger(consoleLogger);</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">return</span> errorLogger;  </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">AbstractLogger</span> <span class="variable">loggerChain</span> <span class="operator">=</span> getChainOfLoggers();</span><br><span class="line"> </span><br><span class="line">      loggerChain.logMessage(AbstractLogger.INFO, <span class="string">&quot;This is an information.&quot;</span>);</span><br><span class="line">      loggerChain.logMessage(AbstractLogger.DEBUG, <span class="string">&quot;This is a debug level information.&quot;</span>);</span><br><span class="line">      loggerChain.logMessage(AbstractLogger.ERROR, <span class="string">&quot;This is an error information.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Standard Console::Logger: This is an information.</span><br><span class="line">File::Logger: This is a debug level information.</span><br><span class="line">Standard Console::Logger: This is a debug level information.</span><br><span class="line">Error Console::Logger: This is an error information.</span><br><span class="line">File::Logger: This is an error information.</span><br><span class="line">Standard Console::Logger: This is an error information.</span><br></pre></td></tr></table></figure><hr><h2 id="实际应用实例"><a href="#实际应用实例" class="headerlink" title="实际应用实例"></a>实际应用实例</h2><ul><li><strong>Web 服务器</strong>：如 Apache Tomcat 的编码处理、Servlet 的 Filter 链。  </li><li><strong>拦截器机制</strong>：如 Struts2 的拦截器实现。  </li><li><strong>日志系统</strong>：不同级别的日志可以依次传递到不同的处理器。  </li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>责任链模式通过让请求在一条链上传递，避免了请求发送者和接收者的紧耦合，提升了系统的灵活性和可扩展性。  </p><p><strong>适用场景</strong>：  </p><ul><li>需要多个对象处理同一请求时。  </li><li>请求的具体接收者在运行时才能确定时。  </li><li>系统需要动态增加或调整处理逻辑时。  </li></ul><p>掌握责任链模式，有助于更好地理解 <strong>拦截器链、日志系统、权限控制</strong> 等机制的底层原理。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/posts/7b510e10.html"/>
      <url>/posts/7b510e10.html</url>
      
        <content type="html"><![CDATA[<h1 id="代理模式（Proxy-Pattern）"><a href="#代理模式（Proxy-Pattern）" class="headerlink" title="代理模式（Proxy Pattern）"></a>代理模式（Proxy Pattern）</h1><p>在设计模式中，<strong>代理模式</strong>（Proxy Pattern）是一种结构型模式，它通过引入一个代理对象来间接访问目标对象，从而在不改变目标对象功能的前提下，增加额外的控制逻辑。</p><hr><h2 id="模式的作用"><a href="#模式的作用" class="headerlink" title="模式的作用"></a>模式的作用</h2><blockquote><p><strong>核心思想</strong>：通过代理对象来控制对真实对象的访问。</p></blockquote><p>这样可以避免直接操作真实对象带来的问题，例如：对象创建代价过高、需要安全校验、远程调用等。</p><hr><h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><p>在实际开发中，直接访问某些对象可能会遇到以下问题：  </p><ul><li>对象创建成本高（如加载大文件、初始化复杂资源）。  </li><li>需要权限或安全控制，不能让调用方直接访问。  </li><li>需要远程访问或延迟加载。  </li></ul><p>代理模式通过增加中间代理层，解决了这些问题。</p><hr><h2 id="优缺点分析"><a href="#优缺点分析" class="headerlink" title="优缺点分析"></a>优缺点分析</h2><h3 id="✅-优点"><a href="#✅-优点" class="headerlink" title="✅ 优点"></a>✅ 优点</h3><ul><li><strong>职责分离</strong>：代理对象负责访问控制，真实对象专注于业务逻辑。  </li><li><strong>扩展性强</strong>：可以灵活增加功能（如缓存、日志、延迟加载）。  </li><li><strong>智能控制</strong>：代理可以对请求做智能处理，例如只在必要时才加载对象。  </li></ul><h3 id="⚠️-缺点"><a href="#⚠️-缺点" class="headerlink" title="⚠️ 缺点"></a>⚠️ 缺点</h3><ul><li><strong>性能开销</strong>：多了一层代理，可能会降低访问效率。  </li><li><strong>实现复杂</strong>：某些高级代理（如远程代理、动态代理）实现较复杂。  </li></ul><hr><h2 id="UML-示意图"><a href="#UML-示意图" class="headerlink" title="UML 示意图"></a>UML 示意图</h2><p><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.png" alt=""></p><hr><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>下面以图片加载为例，演示代理模式。</p><h3 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Image</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="真实对象类"><a href="#真实对象类" class="headerlink" title="真实对象类"></a>真实对象类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RealImage</span> <span class="keyword">implements</span> <span class="title class_">Image</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">private</span> String fileName;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">RealImage</span><span class="params">(String fileName)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.fileName = fileName;</span><br><span class="line">      loadFromDisk(fileName);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Displaying &quot;</span> + fileName);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadFromDisk</span><span class="params">(String fileName)</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Loading &quot;</span> + fileName);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代理对象类"><a href="#代理对象类" class="headerlink" title="代理对象类"></a>代理对象类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyImage</span> <span class="keyword">implements</span> <span class="title class_">Image</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RealImage realImage;</span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyImage</span><span class="params">(String fileName)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.fileName = fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(realImage == <span class="literal">null</span>)&#123;</span><br><span class="line">            realImage = <span class="keyword">new</span> <span class="title class_">RealImage</span>(fileName);</span><br><span class="line">        &#125;</span><br><span class="line">        realImage.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyPatternDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">Image</span> <span class="variable">image</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyImage</span>(<span class="string">&quot;test_10mb.jpg&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 图像将从磁盘加载</span></span><br><span class="line">      image.display(); </span><br><span class="line">      System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 图像不需要再次加载</span></span><br><span class="line">      image.display();  </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Loading test_10mb.jpg</span><br><span class="line">Displaying test_10mb.jpg</span><br><span class="line"></span><br><span class="line">Displaying test_10mb.jpg</span><br></pre></td></tr></table></figure><hr><h2 id="生活中的实例"><a href="#生活中的实例" class="headerlink" title="生活中的实例"></a>生活中的实例</h2><ul><li><strong>快捷方式</strong>：Windows 系统中的快捷方式就是文件或程序的代理。  </li><li><strong>Spring AOP</strong>：Spring 使用动态代理模式来实现面向切面编程（AOP），在方法调用前后织入额外逻辑（如日志、事务管理）。  </li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>代理模式通过引入代理对象，使我们在访问真实对象前后可以进行一系列操作。它不仅能降低系统开销，还能增强灵活性和安全性。  </p><p><strong>适用场景</strong>：  </p><ul><li>需要控制访问权限的对象。  </li><li>创建开销较大的对象（如大文件、远程连接）。  </li><li>需要在访问对象前后添加额外功能（如缓存、日志、延迟加载）。  </li></ul><p>掌握代理模式，不仅能帮助我们写出更灵活的代码，还能更好地理解如 <strong>AOP、RPC 框架</strong> 等技术的底层实现。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板方法模式</title>
      <link href="/posts/ecc6414b.html"/>
      <url>/posts/ecc6414b.html</url>
      
        <content type="html"><![CDATA[<h1 id="模板方法模式（Template-Pattern）"><a href="#模板方法模式（Template-Pattern）" class="headerlink" title="模板方法模式（Template Pattern）"></a>模板方法模式（Template Pattern）</h1><p>在学习设计模式的过程中，<strong>模板方法模式</strong>（Template Pattern）是一个非常常见且实用的模式。它的核心思想是：<strong>定义一个算法的框架，并将一些步骤延迟到子类中实现，从而保证整体流程固定，同时允许子类灵活扩展细节</strong>。</p><hr><h2 id="模式的作用"><a href="#模式的作用" class="headerlink" title="模式的作用"></a>模式的作用</h2><p>模板方法模式通过在父类中封装算法的整体结构，避免了子类重复编写通用逻辑。子类只需实现特定的步骤，即可复用整体框架。</p><blockquote><p><strong>一句话总结</strong>：模板方法模式就是<strong>父类定流程，子类填细节</strong>。</p></blockquote><hr><h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><p>在实际开发中，不同的子类往往需要实现相似的逻辑，但其中的细节可能有所不同。若每个子类都独立实现完整的逻辑，难免会出现大量重复代码。模板方法模式通过<strong>抽象父类提取公共部分</strong>，有效解决了这个问题。</p><hr><h2 id="优缺点分析"><a href="#优缺点分析" class="headerlink" title="优缺点分析"></a>优缺点分析</h2><h3 id="✅-优点"><a href="#✅-优点" class="headerlink" title="✅ 优点"></a>✅ 优点</h3><ul><li><strong>封装不变部分</strong>：父类统一定义算法结构，保持整体流程稳定。  </li><li><strong>扩展可变部分</strong>：子类自由实现差异化的步骤，保证灵活性。  </li><li><strong>减少重复代码</strong>：提取公共逻辑，提升维护性和可读性。  </li></ul><h3 id="⚠️-缺点"><a href="#⚠️-缺点" class="headerlink" title="⚠️ 缺点"></a>⚠️ 缺点</h3><ul><li><strong>类数量增加</strong>：每种不同实现都需要一个子类，可能导致系统类较多。  </li></ul><hr><h2 id="UML-示意图"><a href="#UML-示意图" class="headerlink" title="UML 示意图"></a>UML 示意图</h2><p><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.png" alt=""></p><hr><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>下面通过一个小游戏的例子来演示模板方法模式。</p><h3 id="抽象类（模板）"><a href="#抽象类（模板）" class="headerlink" title="抽象类（模板）"></a>抽象类（模板）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">   <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">()</span>;</span><br><span class="line">   <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">startPlay</span><span class="params">()</span>;</span><br><span class="line">   <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">endPlay</span><span class="params">()</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 模板方法（定义整体流程）</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>&#123;</span><br><span class="line">      initialize();   <span class="comment">// 初始化游戏</span></span><br><span class="line">      startPlay();    <span class="comment">// 开始游戏</span></span><br><span class="line">      endPlay();      <span class="comment">// 结束游戏</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体子类"><a href="#具体子类" class="headerlink" title="具体子类"></a>具体子类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cricket</span> <span class="keyword">extends</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">endPlay</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Cricket Game Finished!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Cricket Game Initialized! Start playing.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">startPlay</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Cricket Game Started. Enjoy the game!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Football</span> <span class="keyword">extends</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">endPlay</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Football Game Finished!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Football Game Initialized! Start playing.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">startPlay</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Football Game Started. Enjoy the game!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplatePatternDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">Game</span> <span class="variable">game</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cricket</span>();</span><br><span class="line">      game.play();</span><br><span class="line"></span><br><span class="line">      System.out.println();</span><br><span class="line"></span><br><span class="line">      game = <span class="keyword">new</span> <span class="title class_">Football</span>();</span><br><span class="line">      game.play();      </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Cricket Game Initialized! Start playing.</span><br><span class="line">Cricket Game Started. Enjoy the game!</span><br><span class="line">Cricket Game Finished!</span><br><span class="line"></span><br><span class="line">Football Game Initialized! Start playing.</span><br><span class="line">Football Game Started. Enjoy the game!</span><br><span class="line">Football Game Finished!</span><br></pre></td></tr></table></figure><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>模板方法模式在软件开发中非常常见，尤其适合那些<strong>流程固定但步骤可变</strong>的场景。它通过父类统一流程、子类实现细节的方式，既提高了代码的复用性，又保持了灵活性。  </p><p><strong>应用场景举例</strong>：  </p><ul><li>游戏开发中定义“初始化 → 开始 → 结束”的固定流程。  </li><li>Web 框架中，父类定义请求处理流程，子类实现具体业务逻辑。  </li><li>数据处理管道中，父类定义整体处理步骤，子类实现具体处理方式。  </li></ul><p>掌握并灵活运用模板方法模式，可以让代码结构更加清晰、可维护性更强。  </p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建造者模式</title>
      <link href="/posts/fe816c3c.html"/>
      <url>/posts/fe816c3c.html</url>
      
        <content type="html"><![CDATA[<h1 id="建造者模式（Builder-Pattern）学习总结"><a href="#建造者模式（Builder-Pattern）学习总结" class="headerlink" title="建造者模式（Builder Pattern）学习总结"></a>建造者模式（Builder Pattern）学习总结</h1><p>在设计模式中，<strong>建造者模式（Builder Pattern）</strong> 也称为生成器模式。它的核心思想是：<strong>将复杂对象的构建过程与表示分离，使得同样的构建过程可以创建不同的表示</strong>。这种模式常用于创建步骤固定但内部结构复杂的对象。</p><hr><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><blockquote><p>将一个复杂的构建过程与其表示相分离，使得同样的构建过程可以创建不同的表示。</p></blockquote><hr><h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><p>当我们需要 <strong>分步骤创建复杂对象</strong> 时，如果将构建逻辑和表示逻辑混在一起，代码会变得臃肿且难以维护。建造者模式就是为了解决这个问题。</p><hr><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p><strong>优点：</strong></p><ul><li>分离构建过程和表示，使得构建更加灵活。</li><li>隐藏具体构建细节，客户端只需关心最终对象。</li><li>代码复用性高，可以在不同构建中重复使用相同的建造者。</li></ul><p><strong>缺点：</strong></p><ul><li>如果产品属性较少，使用建造者模式会显得过于复杂。</li><li>会增加系统中的类和对象数量。</li></ul><hr><h2 id="UML-示意图（快餐店例子）"><a href="#UML-示意图（快餐店例子）" class="headerlink" title="UML 示意图（快餐店例子）"></a>UML 示意图（快餐店例子）</h2><p>在快餐店中，一份套餐（Meal）通常由汉堡（Burger）和饮料（ColdDrink）组成。汉堡一般用纸盒包装，饮料用瓶子包装。建造者模式可以很好地模拟这种“分步骤构建套餐”的过程。</p><p><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F.png" alt=""></p><hr><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="1-定义-Item-和-Packing-接口"><a href="#1-定义-Item-和-Packing-接口" class="headerlink" title="1. 定义 Item 和 Packing 接口"></a>1. 定义 Item 和 Packing 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Item</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line">   <span class="keyword">public</span> Packing <span class="title function_">packing</span><span class="params">()</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">price</span><span class="params">()</span>;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Packing</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">pack</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-创建实现-Packing-的实体类"><a href="#2-创建实现-Packing-的实体类" class="headerlink" title="2. 创建实现 Packing 的实体类"></a>2. 创建实现 Packing 的实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Wrapper</span> <span class="keyword">implements</span> <span class="title class_">Packing</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">pack</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Wrapper&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bottle</span> <span class="keyword">implements</span> <span class="title class_">Packing</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">pack</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Bottle&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-创建实现-Item-的抽象类"><a href="#3-创建实现-Item-的抽象类" class="headerlink" title="3. 创建实现 Item 的抽象类"></a>3. 创建实现 Item 的抽象类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Burger</span> <span class="keyword">implements</span> <span class="title class_">Item</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Packing <span class="title function_">packing</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Wrapper</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">float</span> <span class="title function_">price</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ColdDrink</span> <span class="keyword">implements</span> <span class="title class_">Item</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Packing <span class="title function_">packing</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bottle</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">float</span> <span class="title function_">price</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-扩展-Burger-和-ColdDrink-的实体类"><a href="#4-扩展-Burger-和-ColdDrink-的实体类" class="headerlink" title="4. 扩展 Burger 和 ColdDrink 的实体类"></a>4. 扩展 Burger 和 ColdDrink 的实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VegBurger</span> <span class="keyword">extends</span> <span class="title class_">Burger</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">price</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="number">25.0f</span>; &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="string">&quot;Veg Burger&quot;</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChickenBurger</span> <span class="keyword">extends</span> <span class="title class_">Burger</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">price</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="number">50.5f</span>; &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="string">&quot;Chicken Burger&quot;</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Coke</span> <span class="keyword">extends</span> <span class="title class_">ColdDrink</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">price</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="number">30.0f</span>; &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="string">&quot;Coke&quot;</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pepsi</span> <span class="keyword">extends</span> <span class="title class_">ColdDrink</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">price</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="number">35.0f</span>; &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="string">&quot;Pepsi&quot;</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-创建-Meal-类"><a href="#5-创建-Meal-类" class="headerlink" title="5. 创建 Meal 类"></a>5. 创建 Meal 类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Meal</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> List&lt;Item&gt; items = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Item&gt;();    </span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addItem</span><span class="params">(Item item)</span>&#123; items.add(item); &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getCost</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="type">float</span> <span class="variable">cost</span> <span class="operator">=</span> <span class="number">0.0f</span>;</span><br><span class="line">      <span class="keyword">for</span> (Item item : items) cost += item.price();</span><br><span class="line">      <span class="keyword">return</span> cost;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showItems</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (Item item : items) &#123;</span><br><span class="line">         System.out.print(<span class="string">&quot;Item : &quot;</span>+item.name());</span><br><span class="line">         System.out.print(<span class="string">&quot;, Packing : &quot;</span>+item.packing().pack());</span><br><span class="line">         System.out.println(<span class="string">&quot;, Price : &quot;</span>+item.price());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-创建-Builder-类（MealBuilder）"><a href="#6-创建-Builder-类（MealBuilder）" class="headerlink" title="6. 创建 Builder 类（MealBuilder）"></a>6. 创建 Builder 类（MealBuilder）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MealBuilder</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> Meal <span class="title function_">prepareVegMeal</span> <span class="params">()</span>&#123;</span><br><span class="line">      <span class="type">Meal</span> <span class="variable">meal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Meal</span>();</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> <span class="title class_">VegBurger</span>());</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> <span class="title class_">Coke</span>());</span><br><span class="line">      <span class="keyword">return</span> meal;</span><br><span class="line">   &#125;   </span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> Meal <span class="title function_">prepareNonVegMeal</span> <span class="params">()</span>&#123;</span><br><span class="line">      <span class="type">Meal</span> <span class="variable">meal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Meal</span>();</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> <span class="title class_">ChickenBurger</span>());</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> <span class="title class_">Pepsi</span>());</span><br><span class="line">      <span class="keyword">return</span> meal;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-测试"><a href="#7-测试" class="headerlink" title="7. 测试"></a>7. 测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BuilderPatternDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">MealBuilder</span> <span class="variable">mealBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MealBuilder</span>();</span><br><span class="line"></span><br><span class="line">      <span class="type">Meal</span> <span class="variable">vegMeal</span> <span class="operator">=</span> mealBuilder.prepareVegMeal();</span><br><span class="line">      System.out.println(<span class="string">&quot;Veg Meal&quot;</span>);</span><br><span class="line">      vegMeal.showItems();</span><br><span class="line">      System.out.println(<span class="string">&quot;Total Cost: &quot;</span> + vegMeal.getCost());</span><br><span class="line"></span><br><span class="line">      <span class="type">Meal</span> <span class="variable">nonVegMeal</span> <span class="operator">=</span> mealBuilder.prepareNonVegMeal();</span><br><span class="line">      System.out.println(<span class="string">&quot;\n\nNon-Veg Meal&quot;</span>);</span><br><span class="line">      nonVegMeal.showItems();</span><br><span class="line">      System.out.println(<span class="string">&quot;Total Cost: &quot;</span> + nonVegMeal.getCost());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="实际应用：Lombok-Builder"><a href="#实际应用：Lombok-Builder" class="headerlink" title="实际应用：Lombok Builder"></a>实际应用：Lombok Builder</h2><p>在实际开发中，Java 的 <strong>Lombok</strong> 提供了 <code>@Builder</code> 注解，可以快速实现建造者模式，减少模板代码。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">   <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> User.builder()</span><br><span class="line">                      .name(<span class="string">&quot;Alice&quot;</span>)</span><br><span class="line">                      .age(<span class="number">25</span>)</span><br><span class="line">                      .email(<span class="string">&quot;alice@example.com&quot;</span>)</span><br><span class="line">                      .build();</span><br><span class="line">      System.out.println(user);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就避免了手动编写 Builder 类，更加高效。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>建造者模式适合用于 <strong>构建过程复杂的对象</strong>。</li><li>它的优势在于 <strong>解耦构建过程和表示</strong>，让代码更灵活。</li><li>在日常开发中，Lombok 的 <code>@Builder</code> 注解可以帮助我们快速实现建造者模式，非常实用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略模式</title>
      <link href="/posts/72e3b671.html"/>
      <url>/posts/72e3b671.html</url>
      
        <content type="html"><![CDATA[<h1 id="策略模式（Strategy-Pattern）"><a href="#策略模式（Strategy-Pattern）" class="headerlink" title="策略模式（Strategy Pattern）"></a>策略模式（Strategy Pattern）</h1><p>在日常开发中，我们经常会遇到这样一种场景：存在多种可替换的算法或行为，而传统的 <code>if-else</code> 或 <code>switch</code> 语句不仅使代码显得臃肿，还让后期维护和扩展变得复杂。<strong>策略模式（Strategy Pattern）</strong> 正是为了解决这个问题而提出的。</p><h2 id="一、策略模式的作用"><a href="#一、策略模式的作用" class="headerlink" title="一、策略模式的作用"></a>一、策略模式的作用</h2><p>策略模式的核心思想是：</p><blockquote><p><strong>将每个算法单独封装成独立的类，使它们可以互相替换使用，而不影响客户端的代码。</strong></p></blockquote><p>这样，算法的变化不会影响使用它的类，实现了代码的解耦与可扩展性。</p><hr><h2 id="二、它解决了什么问题？"><a href="#二、它解决了什么问题？" class="headerlink" title="二、它解决了什么问题？"></a>二、它解决了什么问题？</h2><p>在存在多种相似算法时，如果我们使用大量的条件语句（<code>if-else</code> 或 <code>switch</code>），会导致：</p><ul><li>代码复杂度增加，难以阅读；</li><li>算法修改或扩展时需要改动已有逻辑，违背开闭原则；</li><li>可维护性和可扩展性差。</li></ul><p>策略模式通过<strong>分离算法</strong>与<strong>使用算法的环境类</strong>，让代码更加清晰、灵活。</p><hr><h2 id="三、优缺点分析"><a href="#三、优缺点分析" class="headerlink" title="三、优缺点分析"></a>三、优缺点分析</h2><p><strong>优点：</strong></p><ol><li><strong>算法切换自由</strong>：可以在运行时灵活选择不同的算法。</li><li><strong>避免条件语句</strong>：消除了复杂的 <code>if-else</code>，提高了代码可读性。</li><li><strong>扩展性强</strong>：新增算法时，只需新增一个策略类，无需修改原有代码。</li></ol><p><strong>缺点：</strong></p><ol><li><strong>策略类数量增多</strong>：每新增一个算法，都需要额外创建一个策略类。</li><li><strong>策略类对外暴露</strong>：调用者必须知道并理解不同策略类的作用，才能正确选择使用。</li></ol><hr><h2 id="四、UML示意图"><a href="#四、UML示意图" class="headerlink" title="四、UML示意图"></a>四、UML示意图</h2><p><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.png" alt=""></p><p>Context 持有一个 Strategy 接口的引用，具体的算法逻辑则由不同的策略实现类提供。</p><hr><h2 id="五、代码实现"><a href="#五、代码实现" class="headerlink" title="五、代码实现"></a>五、代码实现</h2><p>下面通过一个简单的数学运算示例，来展示策略模式的实现过程：</p><h3 id="1-定义策略接口"><a href="#1-定义策略接口" class="headerlink" title="1. 定义策略接口"></a>1. 定义策略接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">doOperation</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-实现不同的策略类"><a href="#2-实现不同的策略类" class="headerlink" title="2. 实现不同的策略类"></a>2. 实现不同的策略类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperationAdd</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">doOperation</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperationMultiply</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">doOperation</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num1 * num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperationSubtract</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">doOperation</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num1 - num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-上下文类（Context）"><a href="#3-上下文类（Context）" class="headerlink" title="3. 上下文类（Context）"></a>3. 上下文类（Context）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Context</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Context</span><span class="params">(Strategy strategy)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">executeStrategy</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> strategy.doOperation(num1, num2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-测试类"><a href="#4-测试类" class="headerlink" title="4. 测试类"></a>4. 测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrategyPatternDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Context</span>(<span class="keyword">new</span> <span class="title class_">OperationAdd</span>());</span><br><span class="line">        System.out.println(<span class="string">&quot;10 + 5 = &quot;</span> + context.executeStrategy(<span class="number">10</span>, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">        context = <span class="keyword">new</span> <span class="title class_">Context</span>(<span class="keyword">new</span> <span class="title class_">OperationSubtract</span>());</span><br><span class="line">        System.out.println(<span class="string">&quot;10 - 5 = &quot;</span> + context.executeStrategy(<span class="number">10</span>, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">        context = <span class="keyword">new</span> <span class="title class_">Context</span>(<span class="keyword">new</span> <span class="title class_">OperationMultiply</span>());</span><br><span class="line">        System.out.println(<span class="string">&quot;10 * 5 = &quot;</span> + context.executeStrategy(<span class="number">10</span>, <span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10 + 5 = 15</span><br><span class="line">10 - 5 = 5</span><br><span class="line">10 * 5 = 50</span><br></pre></td></tr></table></figure><hr><h2 id="六、总结与思考"><a href="#六、总结与思考" class="headerlink" title="六、总结与思考"></a>六、总结与思考</h2><p>策略模式的本质是：<strong>行为封装 + 动态切换</strong>。通过将算法独立封装，我们不仅提高了代码的灵活性和扩展性，还让系统更加符合开闭原则。</p><p>在实际开发中，策略模式常用于：</p><ul><li>排序算法的多种实现；</li><li>支付方式（支付宝、微信、银行卡）的切换；</li><li>日志输出策略（文件、数据库、远程服务）；</li><li>缓存更新策略等。</li></ul><blockquote><p>学习策略模式让我更深刻地理解了“解耦”与“可扩展”的价值。在项目中，与其让 <code>if-else</code> 统治代码，不如通过策略模式让每个算法独立生长，保持代码清晰优雅。</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迭代器模式</title>
      <link href="/posts/9055d217.html"/>
      <url>/posts/9055d217.html</url>
      
        <content type="html"><![CDATA[<h1 id="迭代器模式（Iterator-Pattern）"><a href="#迭代器模式（Iterator-Pattern）" class="headerlink" title="迭代器模式（Iterator Pattern）"></a>迭代器模式（Iterator Pattern）</h1><p>在日常开发中，我们经常需要对集合类进行遍历，比如 <code>ArrayList</code>、<code>HashSet</code>、<code>Map</code> 等。如果每一种集合都需要开发者自己去关心底层的数据结构（数组、链表、树等），代码会变得复杂而且不够灵活。<br><strong>迭代器模式（Iterator Pattern）</strong> 就是为了解决这一问题而出现的，它为不同的集合提供了一种统一的遍历方式。</p><hr><h2 id="一、迭代器模式的作用"><a href="#一、迭代器模式的作用" class="headerlink" title="一、迭代器模式的作用"></a>一、迭代器模式的作用</h2><blockquote><p>在不暴露集合底层表现形式（如列表、栈、树、图）的情况下，提供一种顺序访问集合中所有元素的方法。</p></blockquote><p>换句话说，迭代器模式的核心价值是：<br><strong>“使用者无需知道集合内部的存储结构，只需要通过迭代器就能访问其中的元素。”</strong></p><hr><h2 id="二、解决的问题"><a href="#二、解决的问题" class="headerlink" title="二、解决的问题"></a>二、解决的问题</h2><p>如果没有迭代器模式，不同的集合需要不同的遍历方式，比如数组通过索引，链表通过指针，树和图则更复杂。<br>这样会导致<strong>遍历逻辑和集合逻辑高度耦合</strong>，难以维护。  </p><p>迭代器模式提供了一个统一的接口，使用者只需要按照固定的方法调用（<code>hasNext()</code> / <code>next()</code>），就能遍历任意集合。</p><hr><h2 id="三、优缺点分析"><a href="#三、优缺点分析" class="headerlink" title="三、优缺点分析"></a>三、优缺点分析</h2><p><strong>优点：</strong></p><ol><li><strong>支持多种遍历方式</strong>：可以根据需求扩展不同类型的迭代器。  </li><li><strong>简化聚合类</strong>：集合类只需提供数据存储，不再关心遍历逻辑。  </li><li><strong>多次遍历支持</strong>：可以同时对同一个聚合对象进行多次遍历。  </li><li><strong>扩展性好</strong>：增加新的聚合类和迭代器类都很方便，不需要修改已有代码。</li></ol><p><strong>缺点：</strong></p><ul><li><strong>系统复杂性增加</strong>：每增加一个新的聚合类，就需要增加一个对应的迭代器类，可能导致类数量膨胀。</li></ul><hr><h2 id="四、UML-示意图"><a href="#四、UML-示意图" class="headerlink" title="四、UML 示意图"></a>四、UML 示意图</h2><p>（示意图中，<code>Iterator</code> 定义了遍历的统一接口，<code>Container</code> 定义了获取迭代器的接口，每个具体的聚合类都会有一个内部迭代器类实现 <code>Iterator</code>。）<br><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.png" alt=""></p><hr><h2 id="五、实现示例"><a href="#五、实现示例" class="headerlink" title="五、实现示例"></a>五、实现示例</h2><h3 id="1-定义迭代器接口"><a href="#1-定义迭代器接口" class="headerlink" title="1. 定义迭代器接口"></a>1. 定义迭代器接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Iterator</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span>;</span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">next</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-定义容器接口"><a href="#2-定义容器接口" class="headerlink" title="2. 定义容器接口"></a>2. 定义容器接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Container</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> Iterator <span class="title function_">getIterator</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-实现容器类及其内部迭代器"><a href="#3-实现容器类及其内部迭代器" class="headerlink" title="3. 实现容器类及其内部迭代器"></a>3. 实现容器类及其内部迭代器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NameRepository</span> <span class="keyword">implements</span> <span class="title class_">Container</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> String[] names = &#123;<span class="string">&quot;Robert&quot;</span>, <span class="string">&quot;John&quot;</span>, <span class="string">&quot;Julie&quot;</span>, <span class="string">&quot;Lora&quot;</span>&#125;;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Iterator <span class="title function_">getIterator</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NameIterator</span>();</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">NameIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span> &#123;</span><br><span class="line">      <span class="type">int</span> index;</span><br><span class="line"> </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> index &lt; names.length;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> Object <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">if</span>(<span class="built_in">this</span>.hasNext())&#123;</span><br><span class="line">            <span class="keyword">return</span> names[index++];</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;     </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IteratorPatternDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">NameRepository</span> <span class="variable">namesRepository</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NameRepository</span>();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="type">Iterator</span> <span class="variable">iter</span> <span class="operator">=</span> namesRepository.getIterator(); iter.hasNext();)&#123;</span><br><span class="line">         <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String)iter.next();</span><br><span class="line">         System.out.println(<span class="string">&quot;Name : &quot;</span> + name);</span><br><span class="line">      &#125;  </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>迭代器模式在 Java 集合框架中有着非常广泛的应用，例如 <code>ArrayList</code>、<code>HashSet</code>、<code>Map</code> 的遍历都依赖迭代器。它的核心思想是<strong>“分离存储与遍历”</strong>，不仅提高了代码的复用性，也增强了系统的灵活性。</p><p>虽然会增加一定的类数量，但在复杂系统中，这种模式能显著提高代码的可维护性和扩展性，是设计模式中非常实用的一种。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式</title>
      <link href="/posts/54788f73.html"/>
      <url>/posts/54788f73.html</url>
      
        <content type="html"><![CDATA[<h1 id="工厂模式（Factory-Pattern）"><a href="#工厂模式（Factory-Pattern）" class="headerlink" title="工厂模式（Factory Pattern）"></a>工厂模式（Factory Pattern）</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在软件开发中，设计模式是一种被广泛应用的经验总结。它能够帮助开发者在面对重复性问题时，提供更优雅和高效的解决方案。其中，工厂模式（Factory Pattern）作为创建型模式的典型代表，被大量应用在框架与业务开发中。本文结合学习笔记与个人理解，对工厂模式进行总结。</p><h2 id="一、工厂模式的作用"><a href="#一、工厂模式的作用" class="headerlink" title="一、工厂模式的作用"></a>一、工厂模式的作用</h2><p>工厂模式的核心思想是：<strong>将对象的创建与使用分离</strong>。通过引入工厂类，调用者无需关心具体对象的实例化逻辑，只需依赖抽象接口，从而降低代码耦合度。</p><p>通俗地说，工厂模式就像“订餐外卖”：我们只需要点餐（调用工厂方法），而不必自己去买菜、洗菜、炒菜（对象实例化的过程）。</p><h3 id="UML示意图"><a href="#UML示意图" class="headerlink" title="UML示意图"></a>UML示意图</h3><p><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.png" alt=""></p><h2 id="二、工厂模式解决的问题"><a href="#二、工厂模式解决的问题" class="headerlink" title="二、工厂模式解决的问题"></a>二、工厂模式解决的问题</h2><p>在没有工厂模式之前，对象的创建通常由调用者直接使用 <code>new</code> 关键字完成。这种做法带来了以下问题：</p><ol><li><strong>高耦合</strong>：调用者需要知道具体的类名。  </li><li><strong>扩展性差</strong>：新增或修改产品时，调用者的代码也要随之改动。  </li><li><strong>难以维护</strong>：对象创建逻辑分散在代码各处，不利于统一管理。  </li></ol><p>工厂模式通过集中化、抽象化对象的创建过程，有效解决了这些问题。</p><h2 id="三、工厂模式的实现方式"><a href="#三、工厂模式的实现方式" class="headerlink" title="三、工厂模式的实现方式"></a>三、工厂模式的实现方式</h2><h3 id="1-简单工厂模式"><a href="#1-简单工厂模式" class="headerlink" title="1. 简单工厂模式"></a>1. 简单工厂模式</h3><p>通过一个工厂类，根据参数决定实例化哪一个具体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 产品接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductA</span> <span class="keyword">implements</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产了产品A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductB</span> <span class="keyword">implements</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产了产品B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Product <span class="title function_">createProduct</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;A&quot;</span>.equals(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductA</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;B&quot;</span>.equals(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductB</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> SimpleFactory.createProduct(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        product.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特点</strong>：简单直观，但工厂类职责过重，新增产品时需要修改工厂类。</p><hr><h3 id="2-工厂方法模式"><a href="#2-工厂方法模式" class="headerlink" title="2. 工厂方法模式"></a>2. 工厂方法模式</h3><p>为每种产品提供一个具体的工厂，工厂类只负责生产某一类产品。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工厂接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    Product <span class="title function_">createProduct</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FactoryA</span> <span class="keyword">implements</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">createProduct</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductA</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FactoryB</span> <span class="keyword">implements</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">createProduct</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductB</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryMethodTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Factory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FactoryA</span>();</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> factory.createProduct();</span><br><span class="line">        product.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特点</strong>：遵循开闭原则，扩展性更好，但会增加类的数量。</p><hr><h3 id="3-抽象工厂模式"><a href="#3-抽象工厂模式" class="headerlink" title="3. 抽象工厂模式"></a>3. 抽象工厂模式</h3><p>在工厂方法模式的基础上，抽象工厂可以创建<strong>多个产品族</strong>，常用于框架开发中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象工厂</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">    Product <span class="title function_">createProductA</span><span class="params">()</span>;</span><br><span class="line">    Product <span class="title function_">createProductB</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteFactory</span> <span class="keyword">implements</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">createProductA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductA</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">createProductB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductB</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特点</strong>：可以批量创建一系列相关的对象，但结构复杂。</p><h2 id="四、工厂模式在实际开发中的应用"><a href="#四、工厂模式在实际开发中的应用" class="headerlink" title="四、工厂模式在实际开发中的应用"></a>四、工厂模式在实际开发中的应用</h2><ol><li><strong>Spring 框架中的 BeanFactory</strong>：通过工厂方法生成 Bean，而不是直接 <code>new</code>。  </li><li><strong>日志框架</strong>（如 SLF4J、Log4j）：使用工厂方法创建 Logger 实例。  </li><li><strong>数据库驱动</strong>：JDBC 使用 DriverManager.getConnection() 获取数据库连接，本质就是工厂模式的应用。  </li></ol><h2 id="五、学习感想"><a href="#五、学习感想" class="headerlink" title="五、学习感想"></a>五、学习感想</h2><p>通过学习工厂模式，我体会到设计模式并不是死记硬背的概念，而是解决问题的一种思维方式。工厂模式解决了“对象创建”的复杂性，提升了代码的可维护性与可扩展性。在日常开发中，只要遇到<strong>对象创建逻辑复杂或需要频繁扩展的场景</strong>，工厂模式都能提供优雅的解决方案。</p><p>未来在学习其他设计模式时，我也会尝试结合实际开发案例，把“模式”与“问题”联系起来，而不是孤立地记忆。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>工厂模式是创建型模式中的重要一员。它通过抽象和封装对象的创建过程，实现了<strong>解耦合、易扩展、可维护</strong>的目标。在理解并应用工厂模式的过程中，不仅能写出更优雅的代码，也能逐步培养面向对象设计的思维方式。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/posts/f1601c3e.html"/>
      <url>/posts/f1601c3e.html</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式（Singleton-Pattern）"><a href="#单例模式（Singleton-Pattern）" class="headerlink" title="单例模式（Singleton Pattern）"></a>单例模式（Singleton Pattern）</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>确保一个类只有一个实例，并且自行实例化并向整个系统提供这个实例。</p><h3 id="UML示意图"><a href="#UML示意图" class="headerlink" title="UML示意图"></a>UML示意图</h3><p><img src="https://platypusbucket.oss-cn-shanghai.aliyuncs.com/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.png" alt="&quot;success&quot;:true,&quot;result&quot;"></p><h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><p>频繁创建和销毁全局使用的类实例的问题。</p><h2 id="常见实现方式"><a href="#常见实现方式" class="headerlink" title="常见实现方式"></a>常见实现方式</h2><h3 id="1-饿汉式"><a href="#1-饿汉式" class="headerlink" title="1. 饿汉式"></a>1. 饿汉式</h3><p>在类加载后立即实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonPattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点</strong>：类加载时即创建实例，避免多线程问题。<br><strong>缺点</strong>：如果未使用实例，也会被加载，占用内存资源。</p><hr><h3 id="2-懒汉式"><a href="#2-懒汉式" class="headerlink" title="2. 懒汉式"></a>2. 懒汉式</h3><p>在第一次使用类时实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton2</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton2 singleton;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton2</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Singleton2 <span class="title function_">getInstance</span><span class="params">()</span>&#123; <span class="comment">// 加锁防止被多次实例化</span></span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="literal">null</span>)&#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> <span class="title class_">Singleton2</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点</strong>：用到时才创建实例，节省资源。<br><strong>缺点</strong>：方法加锁，效率较低。</p><hr><h3 id="3-双重检查锁"><a href="#3-双重检查锁" class="headerlink" title="3. 双重检查锁"></a>3. 双重检查锁</h3><p>在懒汉式的基础上，使用双重检查来减少锁的开销。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton2</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton2 singleton;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton2</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton2.class)&#123;</span><br><span class="line">                <span class="keyword">if</span> (singleton == <span class="literal">null</span>)&#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> <span class="title class_">Singleton2</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点</strong>：在保证线程安全的同时，提高了性能。<br><strong>注意</strong>：<code>singleton</code> 必须加上 <code>volatile</code>，防止指令重排。</p><hr><h2 id="框架源码中的应用"><a href="#框架源码中的应用" class="headerlink" title="框架源码中的应用"></a>框架源码中的应用</h2><p>在 <strong>Spring</strong> 框架中，Bean 默认就是单例模式（Singleton Scope）。这保证了容器中同一个 Bean 只会有一个实例，便于统一管理和资源复用。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>饿汉式</strong>：简单，类加载时即创建，适合单例长期使用的场景。</li><li><strong>懒汉式</strong>：延迟加载，节省内存，但性能稍差。</li><li><strong>双重检查锁</strong>：线程安全 + 高效，实际开发中最常用。</li></ul><p>单例模式作为设计模式中的经典模式，广泛应用于各种框架和系统开发中，理解它的实现方式和优缺点，对于学习设计模式和框架源码都非常重要。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式快速入门</title>
      <link href="/posts/2c4abd50.html"/>
      <url>/posts/2c4abd50.html</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式快速入门"><a href="#设计模式快速入门" class="headerlink" title="设计模式快速入门"></a>设计模式快速入门</h1><h3 id="设计模式概念"><a href="#设计模式概念" class="headerlink" title="设计模式概念"></a>设计模式概念</h3><p>设计模式是针对软件设计中常见问题的标准化解决方案，提供可重用的设计模板。它们不是直接代码，而是描述如何组织代码结构的最佳实践，能提升代码可维护性、扩展性和复用性。</p><hr><h3 id="常用设计模式分类"><a href="#常用设计模式分类" class="headerlink" title="常用设计模式分类"></a>常用设计模式分类</h3><h4 id="创建型模式（处理对象创建）"><a href="#创建型模式（处理对象创建）" class="headerlink" title="创建型模式（处理对象创建）"></a>创建型模式（处理对象创建）</h4><ul><li><strong>单例模式</strong>：确保类只有一个实例（如全局配置管理器）。  </li><li><strong>工厂方法模式</strong>：子类决定实例化哪个类（如支付方式工厂）。  </li><li><strong>抽象工厂模式</strong>：创建相关对象族（如跨平台UI组件库）。  </li><li><strong>建造者模式</strong>：分步骤构建复杂对象（如SQL查询构造器）。  </li><li><strong>原型模式</strong>：通过克隆生成新对象（如游戏中的敌人复制）。  </li></ul><h4 id="结构型模式（处理对象组合）"><a href="#结构型模式（处理对象组合）" class="headerlink" title="结构型模式（处理对象组合）"></a>结构型模式（处理对象组合）</h4><ul><li><strong>适配器模式</strong>：转换接口兼容性（如旧API适配新系统）。  </li><li><strong>装饰器模式</strong>：动态扩展功能（如Java I/O流包装）。  </li><li><strong>代理模式</strong>：控制对象访问（如虚拟代理延迟加载图片）。  </li><li><strong>外观模式</strong>：简化复杂子系统调用（如一键启动计算机）。 </li></ul><h4 id="行为型模式（处理对象交互）"><a href="#行为型模式（处理对象交互）" class="headerlink" title="行为型模式（处理对象交互）"></a>行为型模式（处理对象交互）</h4><ul><li><strong>策略模式</strong>：封装可互换算法（如排序策略切换）。  </li><li><strong>观察者模式</strong>：一对多状态通知（如事件监听系统）。  </li><li><strong>迭代器模式</strong>：统一集合遍历方式（如Java集合的<code>Iterator</code>）。  </li><li><strong>责任链模式</strong>：链式处理请求（如审批流程）。  </li></ul><hr><h3 id="学习路径"><a href="#学习路径" class="headerlink" title="学习路径"></a>学习路径</h3><p><strong>理论奠基</strong>  </p><ul><li>理解模式的意图、UML类图和适用场景。例如，观察者模式包含<code>Subject</code>和<code>Observer</code>接口。  </li><li>对比模式优缺点：单例模式节省资源但可能引入全局状态问题。  </li></ul><p><strong>代码实践</strong>  </p><ul><li>手写经典实现，如懒汉式单例的双重检查锁定：  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>项目应用</strong>  </p><ul><li>识别代码坏味道：大量<code>if-else</code>可改用策略模式。  </li><li>避免滥用：简单场景无需引入抽象工厂。  </li></ul><p><strong>面试准备</strong>  </p><ul><li>高频问题：如何实现线程安全的单例？何时用装饰器而非继承？  </li><li>场景分析：设计一个支持撤销操作的编辑器（命令模式）。  </li></ul><hr><h3 id="推荐资源"><a href="#推荐资源" class="headerlink" title="推荐资源"></a>推荐资源</h3><ul><li><strong>书籍</strong>：《图解设计模式》。  </li><li><strong>在线</strong>：  <ul><li>菜鸟教程-设计模式（含代码示例）。</li><li>视频-b站-<a href="https://www.bilibili.com/video/BV1af4y1y7sS?spm_id_from=333.788.videopod.sections&amp;vd_source=2480596959bf3131bb20161784528140">5分钟学设计模式</a>  </li></ul></li><li><strong>工具</strong>：使用StarUML绘制模式类图辅助理解。  </li></ul><p>通过“学习→编码→重构”的闭环，逐步掌握模式精髓。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《乔布斯传》读书报告</title>
      <link href="/posts/56e00ecd.html"/>
      <url>/posts/56e00ecd.html</url>
      
        <content type="html"><![CDATA[<h1 id="《史蒂夫·乔布斯传》读书报告：创造者的回馈与矛盾"><a href="#《史蒂夫·乔布斯传》读书报告：创造者的回馈与矛盾" class="headerlink" title="《史蒂夫·乔布斯传》读书报告：创造者的回馈与矛盾"></a>《史蒂夫·乔布斯传》读书报告：创造者的回馈与矛盾</h1><h1 id="比特与灵魂：乔布斯留下的科技史诗与人类长河"><a href="#比特与灵魂：乔布斯留下的科技史诗与人类长河" class="headerlink" title="比特与灵魂：乔布斯留下的科技史诗与人类长河"></a>比特与灵魂：乔布斯留下的科技史诗与人类长河</h1><blockquote><p>“我们试图用仅有的天分，为历史长河添一笔。”</p><p>—— 史蒂夫·乔布斯，1976–2011：一场永恒的创世记</p></blockquote><hr><h2 id="一、被遗弃者的创世纪：从车库到星辰"><a href="#一、被遗弃者的创世纪：从车库到星辰" class="headerlink" title="一、被遗弃者的创世纪：从车库到星辰"></a>一、被遗弃者的创世纪：从车库到星辰</h2><h3 id="童年烙印：被遗弃与被选择的双重奏"><a href="#童年烙印：被遗弃与被选择的双重奏" class="headerlink" title="童年烙印：被遗弃与被选择的双重奏"></a>童年烙印：被遗弃与被选择的双重奏</h3><blockquote><p>“他想完全掌控自己制造的每一样东西，那种强烈欲望源于刚出生就被抛弃。”</p></blockquote><p>1976年，硅谷的一个车库里，三个年轻人点燃了个人计算机革命的火种。Apple I 只是一块裸露的电路板，却承载着乔布斯重塑世界的野心：</p><ul><li><strong>被遗弃的创伤</strong>：生母的抛弃造就了他对“绝对控制”的执念——从 Mac 内部电路的美学布线到 iOS 的封闭生态。</li><li><strong>养父的工匠启蒙</strong>：养父教导他：“即使是柜子背面，也要做到完美。”孕育了 iPhone 极致触感的审美。</li><li><strong>宗教与科学的熔炉</strong>：<ul><li>禅宗启示：“直觉比逻辑更强大”（源自里德学院的顿悟）</li><li>激光实验室隐喻：“在混沌中聚焦能量” → 未来产品美学的雏形</li></ul></li></ul><blockquote><p>“他站在反主流文化与科技的交汇处，看到了工具为人所用的本质。”</p></blockquote><div class="table-container"><table><thead><tr><th>反叛武器</th><th>起源</th><th>革命产物</th></tr></thead><tbody><tr><td>电子巫术</td><td>蓝盒子电话黑客</td><td>Apple I 的极客基因</td></tr><tr><td>字体美学</td><td>旁听书法课</td><td>Mac 的衬线字体革命</td></tr><tr><td>迷幻药灵感</td><td>LSD 边界探索</td><td>“不同思维”产品哲学</td></tr><tr><td>印度禅修</td><td>直觉优于理性</td><td>iPhone 的直觉交互设计</td></tr></tbody></table></div><h3 id="计算机地位的史诗转变："><a href="#计算机地位的史诗转变：" class="headerlink" title="计算机地位的史诗转变："></a>计算机地位的史诗转变：</h3><ul><li><strong>1977</strong>：Apple II + VisiCalc → 计算机从实验室走进会计室</li><li><strong>1984</strong>：Mac 图形界面 → 让普通人拥有数字创作权</li><li><strong>2007</strong>：iPhone 电容触屏 → 人机交互史分为“前 / 后 iPhone 时代”</li></ul><blockquote><p>“预见未来的最好方式，就是亲手创造未来。”</p></blockquote><hr><h2 id="二、现实扭曲力场：光与暗的双螺旋"><a href="#二、现实扭曲力场：光与暗的双螺旋" class="headerlink" title="二、现实扭曲力场：光与暗的双螺旋"></a>二、现实扭曲力场：光与暗的双螺旋</h2><h3 id="光明面：直觉的圣火"><a href="#光明面：直觉的圣火" class="headerlink" title="光明面：直觉的圣火"></a>光明面：直觉的圣火</h3><blockquote><p>“他拥有一种能力——将个人魅力转化为说服力，通过意志改变现实。”</p></blockquote><h3 id="发布会的魔法："><a href="#发布会的魔法：" class="headerlink" title="发布会的魔法："></a>发布会的魔法：</h3><ol><li>抬高预期：“价值成千上万美元的功能”（如 NeXT）</li><li>价格突降：令实际售价显得“难以置信”</li></ol><h3 id="预见力的神迹："><a href="#预见力的神迹：" class="headerlink" title="预见力的神迹："></a>预见力的神迹：</h3><ul><li>“手机会吞噬 iPod”的断言</li><li>多点触控技术从平板移植到手机</li></ul><h3 id="禅意设计革命："><a href="#禅意设计革命：" class="headerlink" title="禅意设计革命："></a>禅意设计革命：</h3><ul><li>“至繁归于至简”<ul><li>iPod 的三键哲学</li><li>iPhone 取消键盘</li></ul></li></ul><hr><h3 id="黑暗面：暴君的荆棘王冠"><a href="#黑暗面：暴君的荆棘王冠" class="headerlink" title="黑暗面：暴君的荆棘王冠"></a>黑暗面：暴君的荆棘王冠</h3><blockquote><p>“当乔布斯不想为事情分心时，他就完全忽略它，就像此事从未存在。”</p><ul><li><strong>非黑即白的管理哲学</strong>：<ul><li>Mac 团队每周工作 90 小时</li><li>“天才 / 饭桶”的二元评价体系</li></ul></li><li><strong>选择性遗忘现实</strong>：<ul><li>否认亲生女丽莎，直至 DNA 检测揭穿谎言</li></ul></li><li><strong>闭环帝国的原罪</strong>：<ul><li>年轻时倡导“信息应自由”，</li><li>晚年却筑起 iOS 的围墙花园</li></ul></li></ul><p>“他让同事经历了特殊的地狱——爱上一个缺乏共情能力的人。”</p></blockquote><hr><h2 id="三、蝴蝶蜕变史：苹果的生死七幕剧"><a href="#三、蝴蝶蜕变史：苹果的生死七幕剧" class="headerlink" title="三、蝴蝶蜕变史：苹果的生死七幕剧"></a>三、蝴蝶蜕变史：苹果的生死七幕剧</h2><div class="table-container"><table><thead><tr><th>阶段</th><th>关键转折</th><th>雪崩效应</th></tr></thead><tbody><tr><td>坠落</td><td>1985 被逐出苹果</td><td>NeXT 开发 Unix → 奠定 macOS 基础</td></tr><tr><td>觉醒</td><td>1986 收购皮克斯</td><td>《玩具总动员》验证艺术 + 科技的结合</td></tr><tr><td>归位</td><td>1997 精简产品线</td><td>iMac 透明外壳 → 点燃消费电子革命</td></tr><tr><td>登基</td><td>2001 iPod + iTunes</td><td>0.99 美元正版音乐 → 唤醒音乐行业</td></tr><tr><td>封神</td><td>2007 iPhone 问世</td><td>App Store 催生全球开发者经济</td></tr><tr><td>永生</td><td>2010 推出 iPad</td><td>平板成为儿童的第一台“计算机”</td></tr><tr><td>遗产</td><td>2023 M 系列芯片</td><td>终结英特尔霸权，重塑计算架构</td></tr></tbody></table></div><blockquote><p>“微软占据市场却无创新，苹果输了，计算机进入黑暗时代。”</p><p>→ <strong>2010年，苹果市值超越微软，完成历史性复仇</strong></p></blockquote><hr><h2 id="四、创造者的涅槃：失败锻造终极武器"><a href="#四、创造者的涅槃：失败锻造终极武器" class="headerlink" title="四、创造者的涅槃：失败锻造终极武器"></a>四、创造者的涅槃：失败锻造终极武器</h2><h3 id="NeXT：自由的普罗米修斯"><a href="#NeXT：自由的普罗米修斯" class="headerlink" title="NeXT：自由的普罗米修斯"></a>NeXT：自由的普罗米修斯</h3><blockquote><p>“他后来的成功，不是因为被逐，而是因为被逐后的华丽失败。”</p><ul><li><strong>电子书先知</strong>：内置词典与百科 → Kindle 雏形</li><li><strong>设计哲学</strong>：镁黑色立方体主机 → 价值观的物理映射</li></ul></blockquote><hr><h3 id="皮克斯：艺术与技术的联姻"><a href="#皮克斯：艺术与技术的联姻" class="headerlink" title="皮克斯：艺术与技术的联姻"></a>皮克斯：艺术与技术的联姻</h3><ul><li><strong>顿悟时刻</strong>：放弃硬件幻想 → 专注数字动画</li><li><p><strong>灵魂宣言</strong>：</p><blockquote><p>“产品应有灵魂，渴望实现价值。”</p><p>→ 《玩具总动员》赋予玩具人格与情感</p></blockquote></li></ul><hr><h3 id="回归苹果的蝴蝶战略"><a href="#回归苹果的蝴蝶战略" class="headerlink" title="回归苹果的蝴蝶战略"></a>回归苹果的蝴蝶战略</h3><ul><li>“决定不做什么比决定做什么更重要。”</li></ul><h3 id="四象限聚焦法："><a href="#四象限聚焦法：" class="headerlink" title="四象限聚焦法："></a>四象限聚焦法：</h3><p><strong>专业 / 消费 × 桌面 / 便携</strong> → 催生 iMac 与 MacBook</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[iTunes] --&gt; B[iPod]</span><br><span class="line">A --&gt; C[iPhone]</span><br><span class="line">A --&gt; D[iPad]</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="程序员与乔布斯：一场跨越时代的编码对话"><a href="#程序员与乔布斯：一场跨越时代的编码对话" class="headerlink" title="程序员与乔布斯：一场跨越时代的编码对话"></a>程序员与乔布斯：一场跨越时代的编码对话</h1><blockquote><p>“设计不仅是外观和感觉，设计是如何运作的。”</p><p>—— Steve Jobs</p></blockquote><hr><h2 id="五、程序员启示录：乔布斯代码的四大戒律"><a href="#五、程序员启示录：乔布斯代码的四大戒律" class="headerlink" title="五、程序员启示录：乔布斯代码的四大戒律"></a>五、程序员启示录：乔布斯代码的四大戒律</h2><h3 id="1-杀死冗余功能"><a href="#1-杀死冗余功能" class="headerlink" title="1. 杀死冗余功能"></a>1. 杀死冗余功能</h3><blockquote><p>“为什么简单就是好？因为我们要让产品听从你。”</p><ul><li>MacBook 曾因电源线不美而推迟发布</li><li>删除 30% “能用但丑陋”的模块，源代码重构是常态</li></ul></blockquote><h3 id="2-端到端的征服"><a href="#2-端到端的征服" class="headerlink" title="2. 端到端的征服"></a>2. 端到端的征服</h3><blockquote><p>“最好的产品是一体的——软件为硬件而生，硬件为软件而造。”</p><ul><li>全栈信仰：从 A4 芯片到 M1 Ultra 的垂直整合</li><li>程序员应掌控比特流到用户体验的完整链路</li></ul></blockquote><h3 id="3-向死而生的创造力"><a href="#3-向死而生的创造力" class="headerlink" title="3. 向死而生的创造力"></a>3. 向死而生的创造力</h3><blockquote><p>“死亡是生命最伟大的发明。”——斯坦福演讲</p><ul><li>癌症期间爆发创造力</li><li>iPhone 主板从 30 块压缩至 4 块</li><li>设定“假想死亡日”作为项目截止节点</li></ul></blockquote><h3 id="4-盗火者的悖论"><a href="#4-盗火者的悖论" class="headerlink" title="4. 盗火者的悖论"></a>4. 盗火者的悖论</h3><blockquote><p>“年轻时我是黑客，现在明白：普通用户只要简单好用。”</p><ul><li>开源辩证：<ul><li>继承：GitHub 是 Homebrew 俱乐部的现代形态</li><li>警惕：安卓的碎片化 → 开发精力被消耗殆尽</li></ul></li></ul></blockquote><hr><h2 id="六、未完成的革命：人类长河中的永恒涟漪"><a href="#六、未完成的革命：人类长河中的永恒涟漪" class="headerlink" title="六、未完成的革命：人类长河中的永恒涟漪"></a>六、未完成的革命：人类长河中的永恒涟漪</h2><h3 id="封闭与开放：数字时代的终极之问"><a href="#封闭与开放：数字时代的终极之问" class="headerlink" title="封闭与开放：数字时代的终极之问"></a>封闭与开放：数字时代的终极之问</h3><ul><li>比尔·盖茨说：“开放会胜出”</li><li>乔布斯证明：“封闭也能赢得尊重”</li><li>“我们封闭，不是因为控制欲，而是不想用户吃垃圾。”</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> user == <span class="string">&quot;Grandma&quot;</span>:</span><br><span class="line">    choose(<span class="string">&quot;苹果式体验一致性&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    preserve(<span class="string">&quot;黑客的自由权杖&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="科技人文十字路口的灯塔"><a href="#科技人文十字路口的灯塔" class="headerlink" title="科技人文十字路口的灯塔"></a>科技人文十字路口的灯塔</h3><ul><li>iPad 的禅意：“它是《全球概览》的电子化身，创意与工具在此相遇。”</li><li>ChatGPT 时代的反思：更需要“让技术有温度”的苹果哲学</li></ul><h3 id="永恒的天问"><a href="#永恒的天问" class="headerlink" title="永恒的天问"></a>永恒的天问</h3><p>“当我的指尖划过 iPhone 的玻璃屏，是否触摸到他留给宇宙的情书？”</p><p>在 Apple Park 的环形飞船总部，访客驻足于乔布斯剧院的铭文前：</p><blockquote><p>“致疯狂的人——他们推动人类向前。”</p></blockquote><p>而每一个深夜敲下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;Fix bug&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>的程序员，都在续写这封寄往比特长河的情书。</p><h3 id="数字朝圣者指南"><a href="#数字朝圣者指南" class="headerlink" title="数字朝圣者指南"></a>数字朝圣者指南</h3><p>⌛️ 时间胶囊：1976 Apple I 主板｜2007 iPhone 原型机</p><p>📜 精神图腾：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ascii</span><br><span class="line">被咬的苹果 → 禁果知识与残缺之美</span><br><span class="line">☸️ 禅圆        → 留白处的无限可能</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="程序员的圣歌"><a href="#程序员的圣歌" class="headerlink" title="程序员的圣歌"></a>程序员的圣歌</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> <span class="variable language_">self</span>.die():</span><br><span class="line">    idea = <span class="built_in">filter</span>(intuition, noise)  <span class="comment"># 如他过滤冗余功能</span></span><br><span class="line">    product = compress(idea, to=<span class="string">&quot;essential&quot;</span>)  <span class="comment"># 至繁归于至简</span></span><br><span class="line">    legacy = push(humanity_forward)  <span class="comment"># 为历史长河添一笔</span></span><br><span class="line">    <span class="variable language_">self</span>.commit(legacy)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="七、结语：在乔布斯之后，我们如何编码未来？"><a href="#七、结语：在乔布斯之后，我们如何编码未来？" class="headerlink" title="七、结语：在乔布斯之后，我们如何编码未来？"></a>七、结语：在乔布斯之后，我们如何编码未来？</h2><p>乔布斯离世多年，但他留下的不是“方法论”，而是“信仰”：</p><ul><li>技术是人文的延伸，而非冷冰冰的堆砌；</li><li>程序员不仅是解决问题的人，更是塑造世界的一群人；</li><li>简洁、优雅、一致性，是代码的审美底线，也是数字时代的建筑哲学。</li></ul><p>在 Apple Park 某个寂静的夜晚，剧院顶端玻璃映出天光。</p><p>他不再敲键盘，却仍在无数程序员的光标下回响：</p><blockquote><p>“你可以质疑他们、引用他们、赞美或诋毁他们。但唯一不能做的，是忽视他们。因为他们改变了世界。”</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 书籍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人物传记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《富爸爸穷爸爸》读书报告</title>
      <link href="/posts/e17b4fc3.html"/>
      <url>/posts/e17b4fc3.html</url>
      
        <content type="html"><![CDATA[<h1 id="《富爸爸穷爸爸》读书报告"><a href="#《富爸爸穷爸爸》读书报告" class="headerlink" title="《富爸爸穷爸爸》读书报告"></a><center>《富爸爸穷爸爸》读书报告</h1><h2 id="一、核心观点概述"><a href="#一、核心观点概述" class="headerlink" title="一、核心观点概述"></a>一、核心观点概述</h2><h5 id="传统教育的局限性："><a href="#传统教育的局限性：" class="headerlink" title="传统教育的局限性："></a>传统教育的局限性：</h5><p>&emsp;&emsp;因为现在传统教育的<strong>局限性</strong>，使得很多人无法保障财务成功，因此<strong>财商（理财智慧）</strong>比学术成绩更重要。</p><h5 id="关键能力："><a href="#关键能力：" class="headerlink" title="关键能力："></a>关键能力：</h5><p>&emsp;&emsp;让钱为自己工作，而并非为钱工作</p><h5 id="消费主义与储蓄的真相："><a href="#消费主义与储蓄的真相：" class="headerlink" title="消费主义与储蓄的真相："></a>消费主义与储蓄的真相：</h5><p>&emsp;&emsp;现代经济中，合理消费和投资比单纯储蓄更能创造财富</p><p><u><strong>区分资产（增加收入）与负债（消耗收入）是财务自由的基础</strong></u></p><h2 id="二、核心课程精要"><a href="#二、核心课程精要" class="headerlink" title="二、核心课程精要"></a>二、核心课程精要</h2><h3 id="Lesson-1：富人不为钱工作"><a href="#Lesson-1：富人不为钱工作" class="headerlink" title="Lesson 1：富人不为钱工作"></a>Lesson 1：富人不为钱工作</h3><p><strong>核心思想</strong>：打破<strong><em>“工作-赚钱-消费”</em></strong>的循环，通过资产积累实现被动收入</p><p>关键启示：</p><ul><li>恐惧和欲望是财务陷阱的根源（如害怕失业、盲目消费）</li><li>控制情绪，用理性决策代替本能反应</li></ul><h3 id="Lesson-2：财务知识的力量"><a href="#Lesson-2：财务知识的力量" class="headerlink" title="Lesson 2：财务知识的力量"></a>Lesson 2：财务知识的力量</h3><h5 id="资产与负债的定义："><a href="#资产与负债的定义：" class="headerlink" title="资产与负债的定义："></a>资产与负债的定义：</h5><div class="table-container"><table><thead><tr><th>概念</th><th>定义</th><th>例子</th></tr></thead><tbody><tr><td>资产</td><td>能带来现金流入（把钱放进你口袋里的东西）</td><td>股票、债券、共同基金、能够产生收入的房地产、票据、版税，如音乐、手稿、专利以及其他可产生收入的大小</td></tr><tr><td>负债</td><td>导致现金流出（把钱从你口袋里取走的东西）</td><td>房贷、车贷</td></tr></tbody></table></div><p>中产<strong>困境</strong>：误将负债（如自住房）当作资产</p><h5 id="财富的定义："><a href="#财富的定义：" class="headerlink" title="财富的定义："></a><strong>财富</strong>的定义：</h5><blockquote><p>财富是支撑一个人生存多长时间的能力，即不工作能活多久</p></blockquote><h3 id="Lesson-3：关注自己的事业"><a href="#Lesson-3：关注自己的事业" class="headerlink" title="Lesson 3：关注自己的事业"></a>Lesson 3：关注自己的事业</h3><h5 id="职业≠事业："><a href="#职业≠事业：" class="headerlink" title="职业≠事业："></a>职业≠事业：</h5><p>&emsp;职业为别人创造财富，事业为自己积累资产</p><h5 id="真正的资产类型："><a href="#真正的资产类型：" class="headerlink" title="真正的资产类型："></a>真正的资产类型：</h5><p>企业股权、知识产权、可产生收入的房地产等</p><p>行动<strong>建议</strong>：在职场外建立资产项，延迟奢侈品消费</p><h3 id="Lesson-4：税收与公司的力量"><a href="#Lesson-4：税收与公司的力量" class="headerlink" title="Lesson 4：税收与公司的力量"></a>Lesson 4：税收与公司的力量</h3><h5 id="富人逻辑："><a href="#富人逻辑：" class="headerlink" title="富人逻辑："></a>富人逻辑：</h5><p>利用公司结构合法减税（如企业支出抵扣）</p><h5 id="财商的四大支柱："><a href="#财商的四大支柱：" class="headerlink" title="财商的四大支柱："></a>财商的四大支柱：</h5><ul><li>会计</li><li>投资</li><li>市场</li><li>法律（尤其是税法）</li></ul><h3 id="Lesson-5：富人的投资思维"><a href="#Lesson-5：富人的投资思维" class="headerlink" title="Lesson 5：富人的投资思维"></a>Lesson 5：富人的投资思维</h3><blockquote><p>首先克服恐惧，风险永远存在，需通过知识降低风险</p></blockquote><h5 id="投资者类型："><a href="#投资者类型：" class="headerlink" title="投资者类型："></a>投资者类型：</h5><ul><li>被动投资者（购买现成产品）</li><li>主动投资者（创造投资机会，如创业或改造资产）</li></ul><p><strong>关键能力</strong>：<u>发现被忽视的机会、融资能力、整合资源</u></p><h3 id="Lesson-6：不为钱工作"><a href="#Lesson-6：不为钱工作" class="headerlink" title="Lesson 6：不为钱工作"></a>Lesson 6：不为钱工作</h3><h5 id="多技能发展："><a href="#多技能发展：" class="headerlink" title="多技能发展："></a>多技能发展：</h5><p>专业化是陷阱，需掌握销售、管理等综合能力</p><h5 id="长期视角："><a href="#长期视角：" class="headerlink" title="长期视角："></a>长期视角：</h5><p>工作是为了学习，而非短期工资</p><h2 id="三、实践行动指南"><a href="#三、实践行动指南" class="headerlink" title="三、实践行动指南"></a>三、实践行动指南</h2><h3 id="克服五大障碍"><a href="#克服五大障碍" class="headerlink" title="克服五大障碍"></a>克服五大障碍</h3><ol><li>恐惧→教育自己，从小投资开始</li><li>愤世嫉俗→用数据分析代替情绪化判断</li><li>懒惰→用”贪婪”（对美好生活的渴望）激励行动</li><li>坏习惯→优先支付自己（强制储蓄/投资）</li><li>傲慢→承认无知并持续学习</li></ol><h3 id="十步行动计划"><a href="#十步行动计划" class="headerlink" title="十步行动计划"></a>十步行动计划</h3><ol><li>找到深层理由（如自由、家庭保障）</li><li>每日学习财务知识（书籍、课程）</li><li>结交成功投资者，获取内线信息</li><li>掌握多种商业模式（如房地产、创业）</li><li>自律：先投资再消费，利用压力激发创造力</li><li>雇佣优秀顾问（如专业经纪人）</li><li>做”印第安给予者”：投资时规划退出策略</li><li>用资产收益购买奢侈品（如租金换车贷）</li><li>向榜样学习（如巴菲特、马斯克）</li><li>先给予后获取（资源互换思维）</li></ol><h3 id="立即行动建议"><a href="#立即行动建议" class="headerlink" title="立即行动建议"></a>立即行动建议</h3><ul><li>记账区分资产/负债</li><li>用月收入的10%购买资产（如指数基金、小户型出租房）</li><li>参加投资社群，寻找导师</li></ul><h2 id="四、总结与个人启示"><a href="#四、总结与个人启示" class="headerlink" title="四、总结与个人启示"></a>四、总结与个人启示</h2><p><strong><em><u>核心价值：本书颠覆了对金钱、工作和风险的认知，强调思维转变比盲目努力更重要</u></em></strong></p><h2 id="五、金句摘录"><a href="#五、金句摘录" class="headerlink" title="五、金句摘录"></a>五、金句摘录</h2><p>富人买入资产，穷人只有支出，中产购买他们以为是资产的负债</p><p>你无法为钱工作，除非你承认它在控制你</p><p>失败是成功的一部分——但学校只惩罚失败</p>]]></content>
      
      
      <categories>
          
          <category> 书籍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理财 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/manifest.json"/>
      <url>/manifest.json</url>
      
        <content type="html"><![CDATA[{"name":"DB_platypuS`Blog","short_name":"DB_platypuS","theme_color":"#3b70fc","background_color":"#3b70fc","display":"standalone","scope":"/","start_url":"/","icons":[{"src":"/img/siteicon/16.png","sizes":"16x16","type":"image/png"},{"src":"/img/siteicon/32.png","sizes":"32x32","type":"image/png"},{"src":"/img/siteicon/48.png","sizes":"48x48","type":"image/png"},{"src":"/img/siteicon/64.png","sizes":"64x64","type":"image/png"},{"src":"/img/siteicon/128.png","sizes":"128x128","type":"image/png"},{"src":"/img/siteicon/144.png","sizes":"144x144","type":"image/png"},{"src":"/img/siteicon/512.png","sizes":"512x512","type":"image/png"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {  font-family: ZhuZiAYuanJWD;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);  font-display: swap;  font-weight: lighter;}div#menus {  font-family: "ZhuZiAYuanJWD";}h1#site-title {  font-family: ZhuZiAYuanJWD;  font-size: 3em !important;}a.article-title,a.blog-slider__title,a.categoryBar-list-link,h1.post-title {  font-family: ZhuZiAYuanJWD;}.iconfont {  font-family: "iconfont" !important;  font-size: 3em;  /* 可以定义图标大小 */  font-style: normal;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}/* 时间轴生肖icon */svg.icon {  /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */  width: 1em;  height: 1em;  /* width和height定义图标的默认宽度和高度*/  vertical-align: -0.15em;  fill: currentColor;  overflow: hidden;}.icon-zhongbiao::before {  color: #f7c768;}/* bilibli番剧插件 */#article-container .bangumi-tab.bangumi-active {  background: var(--anzhiyu-theme);  color: var(--anzhiyu-ahoverbg);  border-radius: 10px;}a.bangumi-tab:hover {  text-decoration: none !important;}.bangumi-button:hover {  background: var(--anzhiyu-theme) !important;  border-radius: 10px !important;  color: var(--anzhiyu-ahoverbg) !important;}a.bangumi-button.bangumi-nextpage:hover {  text-decoration: none !important;}.bangumi-button {  padding: 5px 10px !important;}a.bangumi-tab {  padding: 5px 10px !important;}svg.icon.faa-tada {  font-size: 1.1em;}.bangumi-info-item {  border-right: 1px solid #f2b94b;}.bangumi-info-item span {  color: #f2b94b;}.bangumi-info-item em {  color: #f2b94b;}/* 解决artitalk的图标问题 */#uploadSource > svg {  width: 1.19em;  height: 1.5em;}/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */#page-header:not(.not-top-img):before {  background-color: transparent !important;}/* 首页文章卡片 */#recent-posts > .recent-post-item {  background: rgba(255, 255, 255, 0.9);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: rgba(255, 255, 255, 0.9);}/* 文章页面正文背景 */div#post {  background: rgba(255, 255, 255, 0.9);}/* 分页页面 */div#page {  background: rgba(255, 255, 255, 0.9);}/* 归档页面 */div#archive {  background: rgba(255, 255, 255, 0.9);}/* 标签页面 */div#tag {  background: rgba(255, 255, 255, 0.9);}/* 分类页面 */div#category {  background: rgba(255, 255, 255, 0.9);}/*夜间模式伪类遮罩层透明*/[data-theme="dark"] #recent-posts > .recent-post-item {  background: #121212;}[data-theme="dark"] .card-widget {  background: #121212 !important;}[data-theme="dark"] div#post {  background: #121212 !important;}[data-theme="dark"] div#tag {  background: #121212 !important;}[data-theme="dark"] div#archive {  background: #121212 !important;}[data-theme="dark"] div#page {  background: #121212 !important;}[data-theme="dark"] div#category {  background: #121212 !important;}[data-theme="dark"] div#category {  background: transparent !important;}/* 页脚透明 */#footer {  background: transparent !important;}/* 头图透明 */#page-header {  background: transparent !important;}#rightside > div > button {  border-radius: 5px;}/* 滚动条 */::-webkit-scrollbar {  width: 10px;  height: 10px;}::-webkit-scrollbar-thumb {  background-color: #3b70fc;  border-radius: 2em;}::-webkit-scrollbar-corner {  background-color: transparent;}::-moz-selection {  color: #fff;  background-color: #3b70fc;}/* 音乐播放器 *//* .aplayer .aplayer-lrc {  display: none !important;} */.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {  left: -66px !important;  transition: all 0.3s;  /* 默认情况下缩进左侧66px，只留一点箭头部分 */}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {  left: 0 !important;  transition: all 0.3s;  /* 鼠标悬停是左侧缩进归零，完全显示按钮 */}.aplayer.aplayer-fixed {  z-index: 999999 !important;}/* 评论框  */.vwrap {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 30px 0px;}/* 设置评论框 */.vcard {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 0px 0px;}/* md网站下划线 */#article-container a:hover {  text-decoration: none !important;}#article-container #hpp_talk p img {  display: inline;}/* 404页面 */#error-wrap {  position: absolute;  top: 40%;  right: 0;  left: 0;  margin: 0 auto;  padding: 0 1rem;  max-width: 1000px;  transform: translate(0, -50%);}#error-wrap .error-content {  display: flex;  flex-direction: row;  justify-content: center;  align-items: center;  margin: 0 1rem;  height: 18rem;  border-radius: 8px;  background: var(--card-bg);  box-shadow: var(--card-box-shadow);  transition: all 0.3s;}#error-wrap .error-content .error-img {  box-flex: 1;  flex: 1;  height: 100%;  border-top-left-radius: 8px;  border-bottom-left-radius: 8px;  background-color: #3b70fc;  background-position: center;  background-size: cover;}#error-wrap .error-content .error-info {  box-flex: 1;  flex: 1;  padding: 0.5rem;  text-align: center;  font-size: 14px;  font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;}#error-wrap .error-content .error-info .error_title {  margin-top: -4rem;  font-size: 9em;}#error-wrap .error-content .error-info .error_subtitle {  margin-top: -3.5rem;  word-break: break-word;  font-size: 1.6em;}#error-wrap .error-content .error-info a {  display: inline-block;  margin-top: 0.5rem;  padding: 0.3rem 1.5rem;  background: var(--btn-bg);  color: var(--btn-color);}#body-wrap.error .aside-list {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  bottom: 0px;  position: absolute;  padding: 1rem;  width: 100%;  overflow: scroll;}#body-wrap.error .aside-list .aside-list-group {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  max-width: 1200px;  margin: 0 auto;}#body-wrap.error .aside-list .aside-list-item {  padding: 0.5rem;}#body-wrap.error .aside-list .aside-list-item img {  width: 100%;  object-fit: cover;  border-radius: 12px;}#body-wrap.error .aside-list .aside-list-item .thumbnail {  overflow: hidden;  width: 230px;  height: 143px;  background: var(--anzhiyu-card-bg);  display: flex;}#body-wrap.error .aside-list .aside-list-item .content .title {  -webkit-line-clamp: 2;  overflow: hidden;  display: -webkit-box;  -webkit-box-orient: vertical;  line-height: 1.5;  justify-content: center;  align-items: flex-end;  align-content: center;  padding-top: 0.5rem;  color: white;}#body-wrap.error .aside-list .aside-list-item .content time {  display: none;}/* 代码框主题 */#article-container figure.highlight {  border-radius: 10px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/ali_font.js"/>
      <url>/js/ali_font.js</url>
      
        <content type="html"><![CDATA[!(function (c) {  var l,    h,    a,    t,    i,    v =      '<svg><symbol id="icon-dragon_chen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-498.122105 265.620211L431.157895 754.526316V485.052632h-66.074948c-14.470737 110.645895-44.355368 197.066105-102.696421 260.742736l-39.747368-36.432842C306.526316 617.876211 323.368421 462.901895 323.368421 242.526316V215.578947h377.263158v53.894737H377.182316c-0.404211 58.260211-2.209684 112.128-6.359579 161.684211H700.631579v53.894737h-122.152421a481.172211 481.172211 0 0 0 76.826947 119.70021l66.479158-39.855158 27.728842 46.214737-54.460631 32.687158c29.507368 24.953263 63.757474 45.675789 102.80421 58.098526l-16.303158 51.361684c-134.224842-42.711579-222.773895-167.073684-261.551158-268.207157H485.052632v221.857684l68.985263-41.391158 27.728842 46.214737-109.783579 65.886316zM646.736842 377.263158h-215.578947v-53.894737h215.578947v53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-dog_xu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-375.592421 150.393263c33.684211 44.544 75.210105 74.698105 124.739369 90.812632l11.425684 3.718737 10.401684-6.009264C781.204211 727.740632 808.421053 622.565053 808.421053 592.842105h-53.894737c0 22.069895-19.132632 80.869053-33.711158 103.504842-34.816-14.605474-64.538947-39.262316-89.249684-74.13221 48.316632-55.269053 92.079158-117.328842 120.535579-179.900632l-49.044211-22.285473c-23.767579 52.250947-59.742316 104.717474-100.055579 152.656842-24.010105-50.930526-41.148632-115.927579-51.658105-195.395369H700.631579v-53.894737h-155.189895A1848.050526 1848.050526 0 0 1 538.947368 161.684211h-53.894736c0 58.206316 2.155789 112.074105 6.494315 161.68421H323.368421v26.947368c0 216.549053-13.177263 263.545263-100.702316 359.046737l39.747369 36.432842c63.326316-69.093053 92.806737-118.272 105.714526-206.848H485.052632v-53.894736h-111.319579a1742.147368 1742.147368 0 0 0 3.449263-107.789474h120.158316c12.611368 98.250105 35.031579 177.475368 67.395368 238.187789-61.978947 65.536-128.053895 117.975579-173.298526 142.282106l25.519158 47.481263c47.589053-25.573053 114.095158-77.446737 177.55621-142.821053z m125.170526-411.971368l-80.842105-80.842106-38.103579 38.103579 80.842105 80.842106 38.103579-38.103579z" fill="#231F20" ></path></symbol><symbol id="icon-dog" viewBox="0 0 1024 1024"><path d="M894.814316 904.434526l83.240421-183.134315-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939369-185.263158-0.134737-7.922526-0.134737-33.953684-0.134736-55.996631-30.693053 15.306105-70.090105 19.887158-106.09179 19.887157-92.752842 0-163.624421-23.983158-210.647579-71.275789a192.512 192.512 0 0 1-27.944421-36.513684H377.263158v377.263158c342.662737 0 403.105684 51.092211 494.592 128.377263 7.922526 6.682947 15.521684 13.312 22.959158 19.86021z" fill="#85C3DE" ></path><path d="M326.063158 282.947368c0 34.250105-13.231158 44.463158-29.642105 44.463158s-29.642105-10.213053-29.642106-44.463158c0-34.223158 13.231158-44.463158 29.642106-44.463157s29.642105 10.24 29.642105 44.463157zM269.473684 430.295579v311.646316L190.275368 916.210526h59.203369L323.368421 753.637053V377.263158h-26.947368c-119.403789 0-172.732632-53.382737-185.505685-107.789474h35.624421c51.092211 0 68.581053-15.764211 120.535579-62.544842 12.773053-11.506526 28.079158-25.276632 47.023158-41.741474l18.351158-15.952842-69.658947-99.139368-44.085895 30.989474 41.768421 59.472842c-11.183158 9.862737-20.884211 18.593684-29.480421 26.327579C180.736 212.156632 176.235789 215.578947 146.539789 215.578947H53.894737v26.947369c0 88.710737 66.910316 178.149053 215.578947 187.769263z m216.710737-161.414737c2.290526 71.733895 28.698947 136.326737 75.048421 182.918737C618.711579 509.628632 702.437053 538.947368 810.091789 538.947368c18.593684 0 36.190316-1.158737 52.628211-3.449263 3.745684 111.265684 33.630316 170.334316 51.496421 196.015158l-38.507789 84.722526C782.174316 742.049684 688.774737 700.631579 377.263158 700.631579v53.894737c34.277053 0 65.697684 0.512 94.639158 1.509052L374.595368 970.105263h59.203369l96.013474-211.240421c66.182737 4.338526 117.005474 11.829895 157.911578 22.016L626.229895 916.210526h59.176421l54.16421-119.134315c47.616 18.405053 79.737263 42.091789 113.125053 69.739789L805.753263 970.105263h59.203369l113.071157-248.778105-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939368-185.263158C985.168842 498.553263 1024 447.811368 1024 377.263158c0-95.205053-66.506105-161.684211-161.684211-161.684211v53.894737c65.482105 0 107.789474 42.307368 107.789474 107.789474 0 89.088-87.013053 107.789474-160.013474 107.789474-92.752842 0-163.624421-23.983158-210.647578-71.27579-30.315789-30.504421-45.891368-65.832421-53.35579-98.735158 11.210105 6.952421 22.932211 13.338947 35.274105 19.186527l23.04-48.720843c-92.106105-43.654737-148.992-128.646737-219.243789-243.981473l-46.026105 28.05221c49.448421 81.246316 92.968421 148.506947 147.051789 199.302737z" fill="#231F20" ></path></symbol><symbol id="icon-goat" viewBox="0 0 1024 1024"><path d="M548.378947 646.736842a952.32 952.32 0 0 1 140.90779-161.68421H107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L66.721684 754.526316h417.172211c20.345263-41.472 43.654737-77.446737 64.485052-107.789474z" fill="#F7C768" ></path><path d="M608.256 144.734316C555.762526 115.577263 506.098526 107.789474 485.052632 107.789474V53.894737c32.579368 0 91.270737 11.452632 149.369263 43.735579 75.290947 41.822316 130.694737 94.531368 171.385263 150.878316C755.873684 288.013474 697.101474 323.368421 646.736842 323.368421h-107.789474v-53.894737h107.789474c20.506947 0 48.424421-11.210105 80.437895-31.285895a471.04 471.04 0 0 0-118.918737-93.453473zM832.673684 342.231579c-16.384 0-29.642105 10.24-29.642105 44.463158 0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642105-44.463158c0-34.223158-13.231158-44.463158-29.642105-44.463158zM1024 619.789474C1024 347.109053 901.066105 122.448842 686.753684 3.395368l-26.165895 47.104C914.324211 191.461053 964.688842 440.400842 969.647158 592.842105h-84.506947c-17.92-35.624421-45.352421-69.12-87.013053-101.995789l-16.788211-13.285053-16.734315 13.392842c-66.128842 52.897684-134.629053 127.083789-187.311158 209.677474H102.965895l-8.272842-20.318316C159.043368 617.013895 161.684211 603.109053 161.684211 485.052632v-53.894737h485.052631v-53.894737H161.684211c0-80.384 14.309053-110.026105 66.586947-137.916632l-25.384421-47.535158C123.365053 234.226526 107.789474 291.920842 107.789474 377.263158v107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L110.618947 862.315789h58.206316l-43.897263-107.789473h103.477895l43.897263 107.789473h58.206316l-43.897263-107.789473h259.47621C508.981895 824.939789 485.052632 899.152842 485.052632 970.105263h53.894736c0-68.688842 27.270737-144.060632 68.958316-215.578947H687.157895c7.410526 0 13.473684 6.063158 13.473684 13.473684V862.315789h53.894737v-94.315789c0-37.160421-30.208-67.368421-67.368421-67.368421h-44.65179c40.771368-58.017684 89.438316-111.427368 138.913684-153.626947C841.512421 600.037053 862.315789 655.225263 862.315789 754.526316h53.894737c0-38.912-2.748632-74.482526-11.102315-107.789474H1024v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-goat_wei" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 50.202947c52.304842 70.925474 136.973474 152.144842 232.528843 190.383158l19.994947-50.041263c-109.271579-43.708632-202.805895-152.629895-238.780632-217.49221H808.421053v-53.894737H538.947368v-53.894737h215.578948v-53.894737h-215.578948V161.684211h-53.894736v161.68421h-215.578948v53.894737h215.578948v53.894737H215.578947v53.894737h255.757474c-35.974737 64.862316-129.536 173.783579-238.807579 217.49221l20.021895 50.041263c95.528421-38.238316 180.197053-119.484632 232.501895-190.383158V808.421053h53.894736v-246.218106z" fill="#231F20" ></path></symbol><symbol id="icon-dragon" viewBox="0 0 1024 1024"><path d="M366.376421 344.441263l152.980211-152.98021c43.142737-43.142737 141.204211-9.216 270.201263 115.738947-15.225263 9.835789-25.114947 15.818105-44.13979 32.256s-38.076632 35.489684-59.418947 56.832c-4.203789 4.203789-51.173053 53.221053-78.740211 82.027789-10.805895-12.126316-22.743579-24.171789-34.654315-36.082526L493.136842 362.792421l-54.218105 54.218105-72.542316-72.569263zM862.315789 512c0 46.834526-45.352421 80.842105-107.789473 80.842105-108.948211 0-189.359158-28.806737-267.129263-56.697263C414.100211 509.871158 344.872421 485.052632 258.182737 485.052632 80.788211 485.052632 0 588.126316 0 683.897263h53.894737C73.216 659.779368 135.302737 646.736842 177.340632 646.736842c77.338947 0 223.124211 23.282526 291.893894 47.912421C547.462737 722.701474 615.989895 754.526316 734.315789 754.526316 862.315789 754.526316 916.210526 670.315789 916.210526 512h-53.894737z" fill="#FF8787" ></path><path d="M552.421053 1024c-69.766737 0-113.825684-13.958737-156.402527-27.459368-54.487579-17.273263-110.807579-35.004632-232.421052-26.516211l-3.826527-53.733053c131.718737-9.458526 195.934316 10.967579 252.52379 28.887579 42.226526 13.365895 78.686316 24.926316 140.126316 24.926316 92.752842 0 148.210526-57.936842 148.210526-113.960421 0-16.949895-5.524211-101.618526-114.634105-101.618526-64.970105 0-112.747789 23.336421-163.328 48.02021C365.325474 830.571789 300.301474 862.315789 204.288 862.315789 85.908211 862.315789 0 787.294316 0 683.897263 0 588.126316 80.788211 485.052632 258.182737 485.052632c86.689684 0 155.917474 24.818526 229.214316 51.09221 45.810526 16.410947 92.564211 33.172211 145.488842 44.166737 9.000421-7.033263 13.850947-16.276211 13.850947-26.758737 0-37.187368-37.672421-74.859789-74.13221-111.265684l-3.287579-3.287579 38.103579-38.103579 3.260631 3.287579C652.853895 446.275368 700.631579 494.026105 700.631579 553.552842c0 12.719158-2.802526 24.926316-7.976421 36.109474A594.997895 594.997895 0 0 0 754.526316 592.842105c62.437053 0 107.789474-34.007579 107.789473-80.842105 0-58.853053-52.870737-110.268632-108.840421-164.702316l-8.057263-7.841684c-19.024842 16.437895-38.076632 35.489684-59.418947 56.832l-38.103579-38.103579c74.805895-74.832842 134.898526-134.898526 268.314947-141.931789V55.619368c-63.407158 7.787789-120.993684 39.424-121.667368 39.801264l-15.818105 8.811789-14.120421-11.344842C731.701895 66.452211 709.712842 53.894737 673.684211 53.894737c-41.418105 0-74.347789 25.869474-109.190737 53.301895-26.624 20.911158-54.137263 42.549895-86.851369 53.194105L469.342316 161.684211h-69.093053l-105.525895 105.525894-38.103579-38.130526L324.015158 161.684211H161.684211V107.789474h303.104c22.231579-8.272842 43.708632-25.168842 66.398315-42.981053C569.829053 34.438737 613.618526 0 673.684211 0c48.909474 0 81.408 17.946947 110.888421 40.097684C813.702737 26.300632 877.729684 0 943.157895 0h26.947368v323.368421h-53.894737v-53.167158c-54.164211 3.098947-92.914526 15.845053-127.002947 36.675369l1.832421 1.778526C852.587789 368.505263 916.210526 430.376421 916.210526 512c0 60.928-43.708632 109.945263-107.789473 127.622737V700.631579h53.894736v-53.894737h53.894737v53.894737h53.894737v53.894737h-53.894737v53.894737h-53.894737v-53.894737h-53.894736c-29.722947 0-53.894737-24.171789-53.894737-53.894737v-53.894737c-118.325895 0-207.063579-31.797895-285.318737-59.877053C400.437895 562.229895 335.494737 538.947368 258.182737 538.947368 117.059368 538.947368 53.894737 611.732211 53.894737 683.897263 53.894737 757.221053 115.738947 808.421053 204.288 808.421053c11.910737 0 23.228632-0.538947 34.034526-1.536C248.454737 796.321684 269.473684 770.640842 269.473684 739.166316c0-33.118316-43.088842-70.979368-58.152421-81.596632l30.935579-44.139789c8.299789 5.793684 81.111579 58.664421 81.111579 125.736421 0 19.429053-4.527158 37.052632-10.994526 52.304842 30.773895-10.051368 58.314105-23.498105 86.662737-37.349053C452.877474 727.848421 508.577684 700.631579 585.997474 700.631579 702.410105 700.631579 754.526316 778.725053 754.526316 856.144842 754.526316 938.657684 678.912 1024 552.421053 1024z m-21.180632-623.104L493.136842 362.792421l137.889684-137.889684 38.103579 38.103579-137.889684 137.889684z m-126.760421-18.351158l-38.103579-38.103579 152.980211-152.98021 38.103579 38.103579-152.980211 152.98021z m282.004211-218.624c15.494737-9.754947 43.331368-31.447579 43.331368-31.447579-25.734737-27.809684-49.556211-33.333895-67.368421-29.07621-19.240421 4.608-37.753263 24.602947-37.753263 24.602947s42.253474 22.447158 61.790316 35.920842z" fill="#231F20" ></path></symbol><symbol id="icon-horse" viewBox="0 0 1024 1024"><path d="M776.003368 646.736842c16.599579-99.947789 43.439158-181.086316 83.213474-256.538947l6.817684-12.934737H269.473684c-36.756211 0-53.894737 54.945684-53.894737 92.05221 0 46.753684 6.656 77.527579 70.278737 176.074106l84.533895 128.269473L498.876632 646.736842h277.126736z" fill="#FFAF6E" ></path><path d="M1024 0v404.210526c0 33.333895 0 134.736842-92.079158 134.736842h-13.824l-78.362947-109.056c-22.743579 49.906526-40.340211 103.046737-53.490527 162.950737h115.092211C937.310316 592.842105 970.105263 625.637053 970.105263 661.638737c0 60.631579-69.389474 154.300632-77.312 164.75621l-43.008-32.471579C875.466105 759.861895 916.210526 693.813895 916.210526 661.638737c0-5.982316-8.919579-14.901895-14.901894-14.901895h-125.332211C761.128421 736.121263 754.526316 840.569263 754.526316 970.105263h-53.894737c0-283.971368 31.097263-453.605053 110.888421-605.049263l20.318316-38.534737 112.801684 156.995369c14.443789-4.419368 25.465263-20.938105 25.465263-79.306106V0h53.894737z m-161.684211 161.684211h53.894737V0h-53.894737v80.842105c-17.381053-14.955789-38.184421-26.947368-80.842105-26.947368h-134.736842v53.894737h134.736842c37.672421 0 80.842105 40.906105 80.842105 53.894737z m-107.789473 0h-215.578948v53.894736h161.684211l53.894737-53.894736zM300.894316 766.544842L400.680421 916.210526h64.754526l-95.043368-142.551579L498.876632 646.736842h167.855157a1212.631579 1212.631579 0 0 1 9.431579-53.894737h-199.383579l-175.885473 173.702737z m109.97221-184.400842l-37.861052-38.319158-132.419369 130.802526C173.729684 571.095579 161.684211 529.812211 161.684211 469.315368 161.684211 398.578526 199.464421 323.368421 269.473684 323.368421h323.368421l53.894737-53.894737H269.473684c-6.709895 0-13.258105 0.565895-19.698526 1.482105C234.927158 249.451789 204.638316 215.578947 160.633263 215.578947 65.967158 215.578947 0 349.291789 0 469.315368c0 70.170947 16.141474 136.650105 49.232842 202.671158L6.197895 723.833263l41.472 34.41179 66.128842-79.737264-8.704-16.033684C83.105684 622.133895 53.894737 558.214737 53.894737 469.315368 53.894737 368.451368 106.765474 269.473684 160.633263 269.473684c13.231158 0 25.815579 9.889684 35.43579 20.533895C142.874947 321.967158 107.789474 388.500211 107.789474 469.315368c0 78.201263 19.698526 130.937263 93.642105 243.981474l-55.296 54.622316L280.899368 970.105263h64.754527l-130.048-195.072 195.260631-192.889263z" fill="#231F20" ></path></symbol><symbol id="icon-monkey_shen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 134.736842h161.684211v53.894737h53.894737V269.473684h-215.578948V161.684211h-53.894736v107.789473h-215.578948v431.157895h53.894737v-53.894737h161.684211v215.578947h53.894736v-215.578947z m0-161.68421h161.684211v107.789473h-161.684211v-107.789473z m-215.578947 0h161.684211v107.789473h-161.684211v-107.789473z m215.578947-161.684211h161.684211v107.789474h-161.684211v-107.789474z m-215.578947 0h161.684211v107.789474h-161.684211v-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-ox_chou" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-161.68421 188.631579h-159.555369c13.985684-172.813474 43.115789-357.429895 70.817684-385.158737L700.631579 269.473684H323.368421v53.894737h107.169684c-1.940211 45.756632-8.192 103.962947-15.76421 161.684211H323.368421v53.894736h83.968c-9.862737 68.446316-20.264421 130.128842-25.734737 161.684211H215.578947v53.894737h592.842106v-53.894737z m-346.543158-161.684211h149.800421a3313.717895 3313.717895 0 0 0-16.842105 161.684211h-158.477474c6.036211-35.247158 16.114526-95.636211 25.519158-161.684211z m22.608842-215.578947h171.735579c-15.198316 41.121684-27.405474 100.594526-36.890948 161.684211h-150.123789c7.383579-57.505684 13.419789-115.361684 15.279158-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-monkey" viewBox="0 0 1024 1024"><path d="M757.733053 485.052632H565.894737a80.842105 80.842105 0 0 0-80.842105 80.842105v215.578947c0 40.96 43.546947 99.678316 77.446736 139.210105C596.426105 960.215579 603.055158 970.105263 603.055158 970.105263H754.526316s15.144421-18.674526 45.891368-58.071579S862.315789 809.984 862.315789 717.608421c0-89.573053-47.993263-166.346105-104.582736-232.555789z" fill="#C3D686" ></path><path d="M538.947368 1024h-53.894736c0-32.794947 25.869474-87.417263 77.446736-103.316211C528.599579 881.152 485.052632 822.433684 485.052632 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h80.842105v53.894737h-80.842105a26.947368 26.947368 0 0 0-26.947369 26.947368c0 19.725474 36.675368 77.473684 92.133053 134.736842h88.602947c20.210526-14.147368 88.737684-71.464421 88.737685-198.602105 0-108.382316-93.237895-202.967579-168.151579-278.986105-49.502316-50.202947-88.576-89.842526-98.735158-128.61979-11.749053-44.732632-21.584842-112.586105-26.327579-148.318315H377.263158c-45.136842 0-89.519158 8.434526-121.802105 53.894736H431.157895v53.894737c-97.28 0-107.789474 113.071158-107.789474 161.684211v53.894737h53.894737v161.68421h-53.894737v-107.789474h-26.947368c-170.253474 0-188.631579-94.234947-188.631579-134.736842 0-31.043368 35.220211-72.326737 55.727158-93.722947 2.694737-14.686316 5.847579-28.348632 9.431579-41.013895H161.684211V215.578947h31.528421C239.642947 120.993684 317.224421 107.789474 377.263158 107.789474h185.640421l2.802526 23.794526c0.134737 1.050947 12.719158 106.657684 27.944421 164.756211 6.494316 24.872421 44.624842 63.514947 84.965053 104.448C760.481684 483.813053 862.315789 587.129263 862.315789 717.608421c0 92.375579-31.124211 155.028211-61.898105 194.425263C904.919579 892.146526 970.105263 803.004632 970.105263 673.684211c0-91.405474-42.819368-154.381474-84.237474-215.255579C847.791158 402.458947 808.421053 344.576 808.421053 269.473684c0-119.349895 87.093895-161.684211 161.68421-161.68421v53.894737c-32.417684 0-107.789474 10.509474-107.789474 107.789473 0 58.502737 31.555368 104.933053 68.096 158.639158C974.282105 492.597895 1024 565.679158 1024 673.684211c0 177.286737-108.301474 296.421053-269.473684 296.421052h-161.684211c-37.672421 0-53.894737 40.906105-53.894737 53.894737zM229.214316 269.473684a384.808421 384.808421 0 0 0-14.012632 58.341053l-1.401263 8.488421-6.090105 6.117053c-22.878316 22.932211-44.813474 52.601263-46.026105 62.275368 0 56.805053 53.76 75.264 107.789473 79.386947V431.157895c0-58.691368 13.473684-119.619368 46.511158-161.684211h-86.770526zM323.368421 1024h-53.894737c0-32.794947 25.869474-87.417263 77.446737-103.316211C313.020632 881.152 269.473684 822.433684 269.473684 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h45.16379A188.847158 188.847158 0 0 1 565.894737 592.842105h134.736842v53.894737h-134.736842c-74.293895 0-134.736842 60.442947-134.736842 134.736842v26.516211l-53.894737 0.377263V781.473684c0-9.162105 0.646737-18.135579 1.913263-26.947368H350.315789c-14.848 0-26.947368 12.072421-26.947368 26.947368 0 19.725474 36.675368 77.473684 92.133053 134.736842H431.157895v53.894737h-53.894737c-37.672421 0-53.894737 40.906105-53.894737 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-horse_wu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 26.947368h269.473685v-53.894736H538.947368v-161.684211h161.684211v-53.894737H411.001263c12.045474-33.28 20.156632-69.793684 20.156632-107.789473h-53.894737c0 121.963789-105.364211 233.391158-106.415158 234.496l38.858105 37.349052c2.883368-3.018105 43.816421-46.133895 77.392842-110.160842H485.052632v161.684211H215.578947v53.894736h269.473685v323.368421h53.894736V538.947368z" fill="#231F20" ></path></symbol><symbol id="icon-ox" viewBox="0 0 1025 1024"><path d="M540.294737 754.526316h215.578947c20.210526 0 35.112421 1.374316 53.894737 4.581052 91.863579 15.656421 145.354105 67.691789 161.684211 86.069895V916.210526h53.894736V635.580632l-7.895579-7.895579c-9.269895-9.269895-36.513684-49.232842-44.032-196.527158H540.294737a161.684211 161.684211 0 0 0-161.684211 161.68421v131.098948c43.304421 20.210526 97.28 30.585263 161.684211 30.585263z" fill="#FFAF6E" ></path><path d="M1025.347368 635.580632V916.210526h-53.894736v-71.033263c-16.330105-18.405053-69.820632-70.413474-161.684211-86.069895V916.210526h-53.894737v-161.68421h-107.789473v215.578947h-53.894737V700.631579h161.68421c100.998737 0 172.570947 38.669474 215.578948 71.868632v-115.738948c-33.684211-43.627789-51.712-137.458526-53.706106-279.498105H701.978947c-76.934737 0-127.218526-26.219789-175.804631-51.550316a1556.048842 1556.048842 0 0 0-26.839579-13.743158c-26.839579 26.004211-66.209684 44.921263-115.738948 55.511579 24.441263 22.986105 60.874105 52.116211 106.469053 72.838737l-22.312421 49.044211c-76.584421-34.816-129.589895-88.926316-150.824421-113.125053-10.644211 0.619789-21.477053 1.024-32.687158 1.024a473.734737 473.734737 0 0 1-123.365053-15.952842l-93.022315 186.314105 68.581052 53.86779C167.882105 579.557053 237.891368 538.947368 324.715789 538.947368v53.894737c-95.986526 0-170.361263 62.490947-171.088842 63.137684l-16.78821 14.282106-136.838737-107.358316 109.729684-219.809684C46.430316 314.448842 1.347368 267.371789 1.347368 199.868632 1.347368 89.815579 121.586526 53.894737 163.031579 53.894737v53.894737c-14.120421 0-107.789474 17.165474-107.789474 92.079158C55.242105 290.465684 192.188632 323.368421 284.240842 323.368421c67.907368 0 122.421895-12.988632 157.696-35.624421-42.711579-14.336-95.097263-23.120842-169.337263-18.324211l-3.503158-53.786947c95.878737-6.117053 160.148211 8.515368 211.429053 28.833684C484.244211 235.439158 486.4 225.818947 486.4 215.578947c0-48.855579-57.829053-76.288-58.394947-76.557473l22.393263-49.017263C454.063158 91.648 540.294737 131.826526 540.294737 215.578947c0 18.566737-3.422316 35.84-9.997474 51.631158 7.060211 3.584 13.985684 7.168 20.776421 10.698106C597.854316 302.322526 638.248421 323.368421 701.978947 323.368421h269.473685v26.947368c0 214.689684 35.220211 266.590316 45.999157 277.369264l7.895579 7.895579z m-729.384421 25.141894l-98.789052 118.541474 86.797473 137.835789 45.594948-28.725894-65.913263-104.690527 37.052631-44.43621C358.642526 785.192421 439.080421 808.421053 540.294737 808.421053v-53.894737c-99.893895 0-175.077053-24.549053-223.474526-72.946527l-20.857264-20.857263z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit_mao" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-377.263158-188.631579h107.789474v323.368421c-20.48 0-39.936-11.264-40.016842-11.317895l-27.728842 46.214737c3.206737 1.940211 32.660211 18.997895 67.745684 18.997895 30.746947 0 53.894737-23.147789 53.894737-53.894737V269.473684h-215.578948v538.947369h53.894737V323.368421z m-107.789473 242.526316v-242.526316h-53.894737v196.904421l-107.789474 40.421053v-243.927579l169.094737-48.316632-14.821053-51.819789L269.473684 276.102737v304.801684l-36.405895 13.662316 18.917053 50.472421 178.741895-67.018105c-5.039158 69.928421-55.269053 106.981053-165.133474 122.933894l7.733895 53.328842C325.712842 746.657684 485.052632 723.536842 485.052632 565.894737z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit" viewBox="0 0 1024 1024"><path d="M680.96 488.744421a1666.667789 1666.667789 0 0 0-54.433684-23.95621c-16.006737 12.234105-33.899789 20.264421-60.631579 20.264421h-80.842105c-36.810105 0-83.644632 30.396632-104.394106 67.772631-42.819368 77.123368-53.409684 117.813895-11.021473 201.701053C397.096421 808.879158 431.157895 876.409263 431.157895 970.105263h338.539789l68.338527-138.859789c20.129684-40.96 24.252632-73.701053 24.252631-110.349474 0.026947-57.397895-25.061053-159.717053-181.328842-232.151579z" fill="#FFBDD8" ></path><path d="M862.315789 720.896c0 36.621474-4.122947 69.389474-24.252631 110.349474L769.697684 970.105263H485.052632v-53.894737h48.370526C507.877053 880.074105 485.052632 833.509053 485.052632 781.473684c0-59.418947 24.171789-113.313684 63.218526-152.360421l38.103579 38.103579A161.091368 161.091368 0 0 0 538.947368 781.473684c0 54.784 35.381895 104.043789 63.514948 134.736842h133.712842l53.490526-108.759579c15.710316-31.851789 18.755368-55.834947 18.755369-86.554947 0-80.976842-63.434105-150.096842-178.607158-195.503158-17.542737 8.138105-38.292211 13.554526-63.919158 13.554526h-80.842105c-13.958737 0-43.924211 15.979789-57.290106 40.016843l-47.104-26.165895C401.408 515.449263 448.242526 485.052632 485.052632 485.052632h80.842105c37.268211 0 57.478737-15.440842 79.090526-36.45979C625.367579 336.195368 549.753263 269.473684 485.052632 269.473684h-107.789474a21.288421 21.288421 0 0 0-5.955369 2.021053A683.762526 683.762526 0 0 0 302.187789 194.021053c-35.84-34.223158-61.763368-58.933895-94.908631-79.440842A42.442105 42.442105 0 0 0 185.478737 107.789474a22.824421 22.824421 0 0 0-17.381053 7.194947c-10.913684 11.425684-6.063158 28.240842 1.428211 39.181474 21.989053 32.121263 47.912421 56.858947 83.752421 91.109052 20.614737 19.671579 49.259789 43.169684 77.392842 63.08379C281.007158 367.400421 215.578947 484.432842 215.578947 592.842105c0 74.482526 24.791579 124.065684 51.065264 176.586106C294.534737 825.209263 323.368421 882.903579 323.368421 970.105263h-53.894737c0-74.482526-24.791579-124.065684-51.065263-176.586105C190.517895 737.738105 161.684211 680.043789 161.684211 592.842105c0-90.866526 42.226526-197.685895 93.453473-274.485894a803.759158 803.759158 0 0 1-39.046737-34.115369C177.852632 247.754105 150.231579 221.399579 125.035789 184.616421c-24.441263-35.759158-22.797474-78.686316 4.069053-106.819368 26.300632-27.567158 70.898526-31.043368 106.522947-9.000421 37.941895 23.444211 65.562947 49.798737 103.774316 86.258526 9.970526 9.512421 33.037474 32.309895 56.93979 60.550737h68.634947c-27.621053-37.780211-60.416-72.730947-88.522105-99.543579-28.833684-27.540211-54.730105-52.116211-84.533895-74.024421L326.305684 0.296421c31.232 23.228632 57.802105 48.532211 87.309474 76.719158 53.840842 51.388632 94.450526 100.594526 121.74821 146.83621 82.836211 26.650947 150.042947 116.870737 165.025685 230.750316l1.724631 13.177263-9.404631 9.404632c-3.772632 3.772632-7.706947 7.653053-11.802948 11.587368C837.227789 561.178947 862.315789 663.498105 862.315789 720.896zM309.463579 754.526316c3.934316 8.057263 7.895579 16.087579 11.991579 24.144842C348.887579 832.970105 377.263158 889.128421 377.263158 970.105263h53.894737c0-93.696-34.061474-161.226105-61.520842-215.578947h-60.173474z m597.90821 53.894737c-3.422316 9.404632-7.814737 19.806316-13.770105 31.959579L829.790316 970.105263h60.065684l52.143158-105.957052c10.778947-21.935158 17.515789-40.016842 21.90821-55.727158h-56.535579zM514.694737 390.736842c0-34.223158-13.231158-44.463158-29.642105-44.463158s-29.642105 10.24-29.642106 44.463158c0 34.250105 13.231158 44.463158 29.642106 44.463158s29.642105-10.213053 29.642105-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rat_zi" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 188.631579v-215.578947h269.473685v-53.894737H538.947368v-39.585684c26.543158-18.081684 94.585263-65.050947 177.852632-127.488L700.631579 215.578947H323.368421v53.894737h295.316211a4221.008842 4221.008842 0 0 1-121.640421 85.369263l-11.991579 8.003369V431.157895H242.526316v53.894737h242.526316v215.578947c0 48.343579-13.850947 53.894737-134.736843 53.894737v53.894737c105.391158 0 188.631579 0 188.631579-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-rat" viewBox="0 0 1024 1024"><path d="M727.659789 431.157895c-132.581053 0-220.348632 47.454316-285.803789 154.354526-19.779368 32.309895-15.845053 76.503579-9.404632 96.579368 3.260632 10.159158 7.760842 18.647579 12.422737 25.546106C464.761263 737.010526 499.927579 754.526316 538.947368 754.526316h66.829474c1.158737 17.893053-1.967158 34.762105-15.144421 53.975579-12.692211 18.539789-37.807158 40.151579-56.32 54.810947 25.249684-0.673684 52.709053-0.997053 83.240421-0.997053C877.487158 862.315789 970.105263 711.922526 970.105263 571.176421 936.421053 512 882.364632 431.157895 727.659789 431.157895z" fill="#85C3DE" ></path><path d="M210.432 1012.897684l-43.573895-31.690105c106.954105-147.051789 185.317053-171.196632 423.828211-172.705684 21.396211-31.258947 16.249263-56.266105 9.377684-89.70779-3.557053-17.138526-7.221895-34.842947-7.221895-54.433684 0-68.958316 25.330526-104.636632 63.407158-136.973474l34.896842 41.040842c-29.453474 25.061053-44.409263 46.780632-44.409263 95.932632 0 14.093474 2.937263 28.402526 6.063158 43.546947 5.901474 28.510316 12.8 62.032842-1.131789 99.462737 166.373053-10.24 264.542316-96.902737 264.542315-236.193684C916.210526 418.330947 827.580632 323.368421 684.921263 323.368421c-83.644632 0-153.303579 29.696-174.187789 39.612632a224.875789 224.875789 0 0 1-20.533895 31.339789l-41.741474-34.115368 20.884211 17.057684-20.911158-16.976842C448.781474 359.828211 485.052632 314.287158 485.052632 262.736842c0-34.816-8.946526-60.766316-26.570106-77.069474-17.515789-16.249263-44.786526-24.602947-81.219368-24.953263V323.368421h-53.894737V109.783579l24.872421-1.913263c64.700632-4.931368 114.095158 7.895579 146.863158 38.238316C524.207158 173.056 538.947368 212.291368 538.947368 262.736842c0 11.102316-1.131789 21.908211-3.072 32.202105 37.268211-12.584421 89.842526-25.465263 149.045895-25.465263C858.165895 269.473684 970.105263 387.907368 970.105263 571.176421 970.105263 711.922526 877.487158 862.315789 617.552842 862.315789c-258.667789 0-311.942737 19.698526-407.120842 150.581895z m19.105684-256.835368c-12.045474 0-24.387368-0.565895-37.025684-1.64379l-22.096842-1.859368-2.425263-22.016C167.747368 728.144842 161.684211 672.444632 161.684211 631.026526c0-103.585684 21.450105-178.903579 53.894736-259.045052V107.789474h53.894737v274.782315l-2.021052 4.904422C235.439158 465.758316 215.578947 533.800421 215.578947 631.026526c0 22.878316 2.101895 51.442526 3.826527 70.979369 99.678316 2.802526 172.813474-35.408842 222.450526-116.493474l48.020211 24.090947c-11.237053 28.133053-11.371789 51.577263-0.377264 67.853474 9.701053 14.282105 28.645053 23.174737 49.448421 23.174737v53.894737c-39.019789 0-74.186105-17.515789-94.073263-46.888421a100.244211 100.244211 0 0 1-12.422737-25.546106c-53.221053 49.178947-121.128421 73.943579-202.913684 73.970527zM379.957895 525.473684c0-34.223158-13.231158-44.463158-29.642106-44.463158s-29.642105 10.24-29.642105 44.463158c0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642106-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rooster_you" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-215.578947-188.631579h-161.684211v-26.947368h161.684211V242.526316H269.473684v53.894737h161.684211v26.947368h-161.684211v485.052632h53.894737v-53.894737h377.263158v53.894737h53.894737V323.368421zM323.368421 646.736842h377.263158v53.894737H323.368421v-53.894737z m0-269.473684h107.789474c0 103.316211-72.784842 107.654737-81.084632 107.789474L350.315789 538.947368c46.592 0 134.736842-33.792 134.736843-161.68421h53.894736v107.789474c0 29.722947 24.171789 53.894737 53.894737 53.894736h107.789474v53.894737H323.368421v-215.578947z m377.263158 0v107.789474h-107.789474v-107.789474h107.789474z m-215.578947-80.842105h53.894736v26.947368h-53.894736v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-rooster" viewBox="0 0 1024 1024"><path d="M891.688421 506.421895C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V116.224l-323.368421 195.745684V323.368421c0 78.524632 14.928842 131.664842 29.372632 183.053474 12.611368 44.894316 24.522105 87.282526 24.522105 140.314947 0 101.618526-77.931789 176.693895-168.286316 203.991579l5.416422 11.587368h215.578947c24.333474 0 43.385263-0.242526 58.556631-2.128842C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947z" fill="#FF8787" ></path><path d="M673.684211 354.357895c-16.384 0-29.642105-10.213053-29.642106-44.463158 0-34.223158 13.231158-44.463158 29.642106-44.463158s29.642105 10.24 29.642105 44.463158c0 34.250105-13.258105 44.463158-29.642105 44.463158zM540.106105 970.105263l-50.58021-107.789474h156.05221l50.607158 107.789474h59.553684l-51.60421-109.918316C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V107.789474c0-59.445895-48.343579-107.789474-107.789473-107.789474a107.924211 107.924211 0 0 0-107.789474 106.172632 100.890947 100.890947 0 0 0-24.117895-3.314527 88.710737 88.710737 0 0 0-88.602947 88.602948c0 20.668632 5.227789 39.720421 10.671158 53.921684l-99.489684 59.688421 93.749894 14.470737V377.263158c0 14.416842-5.901474 21.692632-33.360842 49.152l-11.129263 11.129263C398.228211 326.521263 324.985263 269.473684 215.740632 269.473684 96.768 269.473684 0 366.241684 0 485.214316V646.736842h53.894737v-161.522526A162.007579 162.007579 0 0 1 215.740632 323.368421c82.081684 0 140.422737 36.244211 240.64 152.252632l-38.615579 38.615579C367.804632 461.285053 323.098947 431.157895 259.584 431.157895A151.983158 151.983158 0 0 0 107.789474 582.952421V754.526316h53.894737v-171.573895A98.007579 98.007579 0 0 1 259.584 485.052632c46.322526 0 79.629474 20.911158 137.027368 86.016l18.970948 21.530947 128.080842-128.080842C572.200421 435.981474 592.842105 415.366737 592.842105 377.263158v-97.926737l23.309474-14.120421-13.662316-23.04c-0.161684-0.242526-14.578526-24.899368-14.578526-50.688 0-19.132632 15.575579-34.708211 34.70821-34.708211 5.093053 0 26.785684 3.179789 39.558737 18.647579l26.327579 46.026106 39.774316-24.090948-20.372211-49.367579C704.754526 140.449684 700.631579 117.517474 700.631579 107.789474c0-29.722947 24.171789-53.894737 53.894737-53.894737s53.894737 24.171789 53.894737 53.894737v215.578947c0 85.935158 16.680421 145.300211 31.366736 197.632C851.887158 564.008421 862.315789 601.141895 862.315789 646.736842c0 95.285895-99.408842 161.684211-188.631578 161.684211h-209.461895l-68.419369-145.704421C375.242105 618.954105 338.108632 592.842105 296.448 592.842105A80.976842 80.976842 0 0 0 215.578947 673.711158V862.315789h53.894737v-188.604631c0-14.874947 12.099368-26.974316 26.974316-26.974316 20.533895 0 38.965895 14.147368 50.553263 38.858105L480.579368 970.105263h59.526737z" fill="#231F20" ></path></symbol><symbol id="icon-snake_si" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-242.041263 180.762947l-52.116211-13.797052C657.219368 749.864421 651.425684 754.526316 619.789474 754.526316h-242.526316V485.052632h269.473684v53.894736h53.894737V215.578947H323.368421v538.947369c0 29.722947 24.171789 53.894737 53.894737 53.894737h242.526316c77.689263 0 91.189895-51.065263 108.274526-115.658106zM377.263158 269.473684h269.473684v161.684211H377.263158v-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-tiger_yin" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-257.42821 299.250526l-107.789474-53.894737-24.117895 48.208843 107.789474 53.894736 24.117895-48.208842z m-269.473685-5.658947l-24.117894-48.208842-107.789474 53.894737 24.117895 48.208842 107.789473-53.894737zM700.631579 431.157895h-161.684211v-53.894737h107.789474v-53.894737H377.263158v53.894737h107.789474v53.894737h-161.684211v323.368421h53.894737v-53.894737h269.473684v53.894737h53.894737V431.157895z m-161.684211 161.68421h107.789474v53.894737h-107.789474v-53.894737z m-161.68421 0h107.789474v53.894737h-107.789474v-53.894737z m161.68421-107.789473h107.789474v53.894736h-107.789474v-53.894736z m-161.68421 0h107.789474v53.894736h-107.789474v-53.894736zM754.526316 215.578947h-223.097263l-20.803369-62.410105-51.119158 17.057684L474.624 215.578947H269.473684v107.789474h53.894737v-53.894737h377.263158v53.894737h53.894737V215.578947z" fill="#231F20" ></path></symbol><symbol id="icon-snake" viewBox="0 0 1024 1024"><path d="M107.789474 790.474105c0-72.434526 67.880421-91.513263 121.451789-91.513263 74.401684 0 153.815579 34.438737 237.891369 70.925474 50.580211 21.935158 104.609684 45.325474 162.250105 63.083789-52.412632 44.786526-118.784 74.347789-195.152842 83.078737-143.171368 16.357053-326.440421 7.006316-326.440421-125.574737zM377.263158 215.578947c-15.575579 0-30.288842 3.449263-43.654737 9.377685A250.691368 250.691368 0 0 0 323.368421 296.421053c0 115.550316 76.422737 169.391158 137.83579 212.614736 8.138105 5.712842 16.141474 11.371789 23.848421 17.057685V323.368421a107.789474 107.789474 0 0 0-107.789474-107.789474z" fill="#C3D686" ></path><path d="M671.528421 788.857263c44.328421 11.964632 89.626947 19.563789 136.892632 19.56379 89.168842 0 161.684211-60.442947 161.68421-134.736842s-72.515368-134.736842-161.68421-134.736843c-19.078737 0-37.025684 1.509053-54.218106 4.015158-0.754526-101.402947-38.211368-172.355368-79.413894-219.648L673.684211 323.368421a1749.962105 1749.962105 0 0 1-79.036632-1.751579c45.702737 35.866947 108.705684 107.870316 105.984 232.367158 0 0.431158-0.080842 0.808421-0.10779 1.239579-34.923789 10.994526-66.155789 26.731789-95.097263 45.190737a163.085474 163.085474 0 0 0-15.845052-42.388211c-21.557895-39.639579-60.065684-66.775579-97.360842-93.022316C433.098105 423.343158 377.263158 384 377.263158 296.421053c0-130.290526 108.274526-188.631579 215.578947-188.631579 64.134737 0 132.715789 12.045474 214.366316 37.807158C802.330947 180.250947 780.099368 209.381053 700.631579 214.635789V161.684211h-53.894737v53.679157c-63.272421-1.024-104.528842-5.200842-104.986947-5.254736l-5.578106 53.598315C538.408421 263.949474 592.357053 269.473684 673.684211 269.473684c125.170526 0 188.631579-48.128 188.631578-143.063579V106.981053l-18.432-6.144C747.789474 68.823579 668.025263 53.894737 592.842105 53.894737c-158.666105 0-269.473684 99.732211-269.473684 242.526316 0 115.550316 76.422737 169.391158 137.83579 212.614736 33.684211 23.713684 65.509053 46.106947 81.003789 74.698106 9.539368 17.542737 13.285053 33.414737 12.341895 47.750737 21.153684 9.108211 42.118737 17.839158 62.949052 25.977263C671.151158 620.193684 729.977263 592.842105 808.421053 592.842105c59.445895 0 107.789474 36.271158 107.789473 80.842106s-48.343579 80.842105-107.789473 80.842105c-105.472 0-203.237053-42.388211-297.768421-83.429053-94.800842-41.094737-184.346947-79.952842-281.411369-79.952842C122.718316 591.171368 53.894737 644.715789 53.894737 727.578947c0 79.063579 67.098947 136.434526 159.555368 136.434527 142.174316 0 230.426947-66.883368 306.79579-129.886316 31.420632 13.419789 62.787368 26.058105 94.450526 37.133474-47.077053 49.637053-110.969263 82.566737-186.610526 91.270736l5.066105 53.625264c93.453474-7.006316 143.144421 9.350737 195.718737 26.543157 46.457263 15.225263 94.127158 30.854737 169.822316 30.854737 19.994947 0 41.957053-1.077895 66.344421-3.557052l-5.416421-53.625263c-105.283368 10.778947-158.100211-6.548211-213.935158-24.872422-22.150737-7.275789-44.624842-14.632421-70.305684-20.345263a334.848 334.848 0 0 0 96.14821-82.297263z m-458.078316 21.261474C162.573474 810.118737 107.789474 784.276211 107.789474 727.578947c0-60.847158 62.733474-82.539789 121.451789-82.539789 77.850947 0 154.731789 30.288842 235.250526 64.943158-66.263579 52.924632-139.722105 100.136421-251.041684 100.136421z" fill="#231F20" ></path></symbol><symbol id="icon-tiger" viewBox="0 0 1024 1024"><path d="M431.157895 162.250105V134.736842c0-41.552842-39.289263-80.842105-80.842106-80.842105-28.833684 0-57.128421 4.661895-58.314105 4.850526L269.473684 62.490947v83.887158C144.788211 223.824842 89.222737 346.839579 66.991158 431.157895h266.051368c240.747789 0 415.851789 107.789474 415.85179 269.473684-14.848-25.114947-43.924211-53.894737-88.68379-53.894737-67.988211 0-121.263158 71.033263-121.263158 161.684211 0 66.802526 30.477474 119.888842 60.712421 156.16 12.638316 15.171368 36.055579 37.726316 59.014737 58.88 5.066105 0.107789 9.781895 0.538947 15.009685 0.538947 219.297684 0 350.315789-191.811368 350.315789-377.263158C1024 327.545263 679.855158 172.813474 431.157895 162.250105z" fill="#F7C768" ></path><path d="M673.684211 1024c-114.768842 0-188.820211-33.333895-254.167579-62.787368-53.625263-24.144842-99.974737-45.002105-161.28-45.002106-40.448 0-83.590737 23.255579-103.639579 45.16379l-39.747369-36.432842C142.497684 894.787368 199.168 862.315789 258.236632 862.315789c68.392421 0 119.861895 21.288421 172.921263 45.056V673.684211c0-35.166316-17.542737-64.107789-30.639158-80.815158-15.198316 9.835789-32.067368 18.890105-50.741895 26.947368l-21.342316-49.475368C469.800421 509.413053 485.052632 377.317053 485.052632 323.368421V221.642105A597.827368 597.827368 0 0 0 404.210526 215.578947h-26.947368V134.736842c0-12.099368-14.848-26.947368-26.947369-26.947368-9.377684 0-18.836211 0.592842-26.947368 1.347368V269.473684h-53.894737V211.671579c-136.030316 102.912-158.450526 266.886737-161.306947 295.882105 9.135158 9.108211 38.992842 25.061053 71.976421 38.669474l38.103579-59.365053 12.449684-1.589894C321.212632 473.653895 377.263158 392.192 377.263158 323.368421h53.894737c0 88.333474-68.796632 192.242526-180.870737 213.342316l-48.397474 75.398737-20.291368-7.437474C53.894737 557.756632 53.894737 523.317895 53.894737 512c0-50.041263 37.025684-254.733474 215.578947-365.621895V62.490947l22.528-3.745684C293.187368 58.556632 321.482105 53.894737 350.315789 53.894737c41.552842 0 80.842105 39.289263 80.842106 80.842105v27.513263c248.697263 10.563368 592.842105 165.295158 592.842105 484.486737 0 185.451789-131.018105 377.263158-350.315789 377.263158z m-13.473685-323.368421c-36.513684 0-67.368421 49.367579-67.368421 107.789474 0 85.746526 68.096 145.084632 89.465263 161.549473 91.540211-2.533053 164.378947-45.487158 213.827369-107.654737H700.631579v-53.894736h230.238316c8.919579-17.273263 16.357053-35.354947 22.285473-53.894737h-239.885473l-6.467369-17.650527C706.290526 735.582316 692.439579 700.631579 660.210526 700.631579zM485.052632 931.112421c33.926737 14.066526 70.521263 26.597053 114.607157 33.468632C569.424842 928.309895 538.947368 875.223579 538.947368 808.421053c0-90.650947 53.274947-161.684211 121.263158-161.684211 44.759579 0 73.835789 28.779789 88.68379 53.894737h217.007158c2.775579-17.866105 4.203789-35.920842 4.203789-53.894737 0-38.938947-5.658947-74.752-15.925895-107.627789l-126.706526 126.679579-38.103579-38.103579L932.001684 485.052632a367.939368 367.939368 0 0 0-57.775158-81.596632l-154.543158 154.543158-38.103579-38.103579 153.573053-153.573053a537.869474 537.869474 0 0 0-82.593684-56.751158l-140.665263 140.638316-38.103579-38.103579 128.134737-128.134737A794.731789 794.731789 0 0 0 538.947368 231.046737V323.368421c0 50.149053-11.102316 156.698947-95.932631 236.328421 18.378105 23.417263 42.037895 63.407158 42.037895 113.987369v257.42821zM215.578947 431.157895v-53.894737c39.774316 0 53.894737-29.022316 53.894737-53.894737h53.894737c0 53.571368-37.025684 107.789474-107.789474 107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-boar" viewBox="0 0 1024 1024"><path d="M732.079158 377.263158c-107.789474 0-186.421895 31.393684-281.869474 126.841263L180.331789 773.982316C257.724632 807.909053 348.725895 808.421053 485.052632 808.421053h96.013473c55.834947-34.411789 133.551158-53.894737 227.354948-53.894737h121.344L970.105263 680.555789V572.631579c0-94.315789-130.236632-195.368421-238.026105-195.368421z" fill="#FFBDD8" ></path><path d="M808.421053 700.631579v53.894737c-196.446316 0-323.368421 84.641684-323.368421 215.578947h-53.894737c0-163.705263 148.075789-269.473684 377.263158-269.473684z m-323.368421 107.789474v-53.894737c-158.342737 0-245.598316 0-319.649685-49.367579L158.612211 700.631579H80.842105c-21.692632 0-26.624-14.821053-26.947368-26.947368v-82.620632c84.156632-11.183158 161.684211-74.913684 161.68421-186.853053V215.578947H161.684211v161.684211H134.736842c-66.964211 0-134.736842 37.025684-134.736842 107.789474h53.894737c0-42.630737 52.870737-53.894737 80.842105-53.894737h24.629895C147.132632 504.912842 85.153684 538.947368 26.947368 538.947368H0v134.736843c0 32.498526 21.530947 80.842105 80.842105 80.842105h61.682527c32.687158 20.506947 67.125895 33.145263 105.957052 41.013895A232.879158 232.879158 0 0 0 215.578947 916.210526h53.894737c0-41.930105 14.012632-80.303158 39.424-112.505263C358.885053 808.151579 415.959579 808.421053 485.052632 808.421053z m-72.946527-342.420211L323.368421 554.738526V431.157895h-53.894737v253.682526l180.736-180.736-38.103579-38.103579zM323.368421 161.684211h-53.894737v190.032842a769.536 769.536 0 0 1 53.894737-49.098106V161.684211z m323.368421-53.894737c-72.623158 0-146.809263 23.336421-215.578947 58.637473V107.789474h-53.894737v154.138947C458.832842 205.392842 555.331368 161.684211 646.736842 161.684211c148.587789 0 269.473684 120.885895 269.473684 269.473684v235.654737L809.579789 862.315789h61.359158L970.105263 680.555789V431.157895c0-178.310737-145.057684-323.368421-323.368421-323.368421z" fill="#231F20" ></path></symbol><symbol id="icon-boar_hai" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M309.975579 804.756211l-27.136-46.592c103.073684-60.011789 183.026526-132.473263 241.475368-219.24379H350.315789l-13.473684-50.283789c58.88-33.980632 99.435789-117.571368 118.703158-165.295158H242.526316v-53.894737h538.947368v53.894737h-268.18021c-12.395789 34.088421-42.469053 106.603789-90.435369 161.68421h134.009263a680.555789 680.555789 0 0 0 46.349474-107.708631l51.092211 17.057684c-58.421895 175.265684-171.034947 309.490526-344.333474 410.381474z m192.350316-2.937264L467.806316 760.454737c88.414316-73.728 154.516211-158.773895 202.105263-259.907369l48.801684 22.959158a797.372632 797.372632 0 0 1-82.351158 137.781895c32.741053 15.009684 83.456 44.867368 137.647158 101.591579l-38.938947 37.268211c-57.236211-59.877053-109.325474-85.557895-133.766737-95.178106a850.997895 850.997895 0 0 1-98.977684 96.848842z m48.613052-536.872421l-80.842105-53.894737 29.884632-44.840421 80.842105 53.894737-29.884632 44.840421zM512 53.894737C259.395368 53.894737 53.894737 259.395368 53.894737 512s205.500632 458.105263 458.105263 458.105263c9.081263 0 17.973895-0.835368 26.947368-1.374316v-53.894736c-8.946526 0.619789-17.866105 1.374316-26.947368 1.374315-222.881684 0-404.210526-181.328842-404.210526-404.210526S289.118316 107.789474 512 107.789474s404.210526 181.328842 404.210526 404.210526c0 195.206737-139.075368 358.507789-323.368421 396.045474v54.460631c214.096842-38.346105 377.263158-225.549474 377.263158-450.533052C970.105263 259.395368 764.604632 53.894737 512 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-bilibili1" viewBox="0 0 1129 1024"><path d="M234.909 9.656a80.468 80.468 0 0 1 68.398 0 167.374 167.374 0 0 1 41.843 30.578l160.937 140.82h115.07l160.936-140.82a168.983 168.983 0 0 1 41.843-30.578A80.468 80.468 0 0 1 930.96 76.445a80.468 80.468 0 0 1-17.703 53.914 449.818 449.818 0 0 1-35.406 32.187 232.553 232.553 0 0 1-22.531 18.508h100.585a170.593 170.593 0 0 1 118.289 53.109 171.397 171.397 0 0 1 53.914 118.288v462.693a325.897 325.897 0 0 1-4.024 70.007 178.64 178.64 0 0 1-80.468 112.656 173.007 173.007 0 0 1-92.539 25.75H212.377a341.186 341.186 0 0 1-72.421-4.024A177.835 177.835 0 0 1 28.91 939.065a172.202 172.202 0 0 1-27.36-92.539V388.662a360.498 360.498 0 0 1 0-66.789A177.03 177.03 0 0 1 162.487 178.64h105.414c-16.899-12.07-31.383-26.555-46.672-39.43a80.468 80.468 0 0 1-25.75-65.984 80.468 80.468 0 0 1 39.43-63.57M216.4 321.873a80.468 80.468 0 0 0-63.57 57.937 108.632 108.632 0 0 0 0 30.578v380.615a80.468 80.468 0 0 0 55.523 80.469 106.218 106.218 0 0 0 34.601 5.632h654.208a80.468 80.468 0 0 0 76.444-47.476 112.656 112.656 0 0 0 8.047-53.109v-354.06a135.187 135.187 0 0 0 0-38.625 80.468 80.468 0 0 0-52.304-54.719 129.554 129.554 0 0 0-49.89-7.242H254.22a268.764 268.764 0 0 0-37.82 0z m0 0" fill="#20B0E3" ></path><path d="M348.369 447.404a80.468 80.468 0 0 1 55.523 18.507 80.468 80.468 0 0 1 28.164 59.547v80.468a80.468 80.468 0 0 1-16.094 51.5 80.468 80.468 0 0 1-131.968-9.656 104.609 104.609 0 0 1-10.46-54.719v-80.468a80.468 80.468 0 0 1 70.007-67.593z m416.02 0a80.468 80.468 0 0 1 86.102 75.64v80.468a94.148 94.148 0 0 1-12.07 53.11 80.468 80.468 0 0 1-132.773 0 95.757 95.757 0 0 1-12.875-57.133V519.02a80.468 80.468 0 0 1 70.007-70.812z m0 0" fill="#20B0E3" ></path></symbol><symbol id="icon-yinle" viewBox="0 0 1024 1024"><path d="M512.2976 0a531.2 531.2 0 0 0-512 548.48V960h128V548.48a398.72 398.72 0 0 1 384-411.52 398.72 398.72 0 0 1 384 411.52V960h128V548.48A531.2 531.2 0 0 0 512.2976 0z" fill="#5c8add" ></path><path d="M64.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path><path d="M704.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path></symbol><symbol id="icon-icon-test-copy" viewBox="0 0 1024 1024"><path d="M512 512m-229.517241 0a229.517241 229.517241 0 1 0 459.034482 0 229.517241 229.517241 0 1 0-459.034482 0Z" fill="#5c8add" ></path><path d="M512 1024A512 512 0 1 1 1024 512 512 512 0 0 1 512 1024z m0-141.241379A370.758621 370.758621 0 1 0 141.241379 512 370.758621 370.758621 0 0 0 512 882.758621z" fill="#5c8add" ></path></symbol><symbol id="icon-V" viewBox="0 0 1024 1024"><path d="M1012.47774251 492.58192592L544.94137566 87.22962963a49.96686561 49.96686561 0 0 0-65.88275132 0L11.63784127 492.6975097c-21.03624691 18.26223633-23.3479224 49.93219048-5.08568606 70.96843739 18.03106878 21.03624691 49.93219048 23.3479224 70.96843738 5.08568607L512 191.83294532l434.71057495 376.91868784c9.47786949 8.20644797 21.26741446 12.25188008 32.82579189 12.13629629 14.10122046 0 27.97127337-5.77918871 38.02706173-17.33756613 18.14665256-20.92066314 15.95056084-52.70620106-5.08568606-70.9684374z" fill="#5c8add" ></path><path d="M109.30613051 567.59579541V896.89396825c0 42.53482892 34.90629982 77.44112875 77.44112875 77.44112875h220.76500882V666.30433862c0-25.54401411 20.92066314-46.46467725 46.46467724-46.46467724h116.16169313c25.54401411 0 46.46467725 20.92066314 46.46467725 46.46467724V974.335097h220.76500882c42.53482892 0 77.44112875-34.90629982 77.44112874-77.44112875l0.11558377-329.29817284L512 218.18604586 109.30613051 567.59579541zM848.00203175 197.49655027h-63.91782716c-12.82979894 0-23.23233862 10.40253968-23.23233863 23.23233862v24.27259259l110.49808818 95.70336508V220.72888889h-0.11558377c0-12.82979894-10.40253968-23.23233862-23.23233862-23.23233862zM905.44716754 83.18419754s-34.90629982 56.86721693-89.11508994 100.32671603c152.68616579 13.98563668 127.83565432-133.26809171 127.83565432-133.2680917-134.07717813-10.28695591-132.92134039 102.29164021-131.072 127.83565432 20.92066314-20.92066314 49.70102293-62.64640564 92.35143562-94.89427865zM798.53217637 174.61096297c-19.64924162-16.52847972-40.56990476-43.45949912-51.203612-53.97762258 0 0 32.94137566 20.57391182 56.40488184 49.3542716 2.42725926-18.37782011 6.47269135-93.3916896-93.16052205-85.3008254 0 0-13.98563668 104.71889947 87.95925221 89.92417638z" fill="#5c8add" ></path></symbol><symbol id="icon-zhifeiji" viewBox="0 0 1167 1024"><path d="M41.201759 463.52493L1110.665064 30.117647c10.32605-4.159104 21.942857 0.860504 26.101961 11.043137 1.434174 3.728852 1.864426 7.744538 1.003921 11.616807L949.033691 978.823529c-2.151261 10.89972-12.764146 17.927171-23.663865 15.632493-2.72493-0.573669-5.306443-1.721008-7.601121-3.298599L634.80624 789.79944l-163.065546 133.951821c-16.492997 13.62465-40.87395 11.186555-54.498599-5.306443-3.011765-3.728852-5.306443-7.887955-6.884034-12.477311l-102.973669-313.080112-265.178712-91.787115c-10.469468-3.585434-16.062745-15.058824-12.333893-25.528291 1.864426-5.44986 6.023529-9.895798 11.329972-12.047059z" fill="#FCFDFC" ></path><path d="M929.385512 1023.569748c-3.155182 0-6.453782-0.286835-9.752381-1.003922-6.740616-1.434174-12.907563-4.015686-18.50084-8.031372L635.953579 825.940616l-146.142297 120.040336c-13.911485 11.473389-31.408403 16.779832-49.335574 15.058824-17.927171-1.721008-34.133333-10.32605-45.463305-24.237535-5.306443-6.453782-9.322129-13.768067-11.903642-21.79944l-98.527731-299.598879-251.697479-87.19776c-12.333894-4.302521-22.229692-13.05098-27.966386-24.811204s-6.453782-24.954622-2.151261-37.288515c4.589356-13.337815 14.771989-23.9507 27.82297-29.257143L1099.908761 3.585434c24.954622-10.039216 53.351261 2.007843 63.533894 26.819048 3.585434 8.891877 4.445938 18.644258 2.581513 28.109804L977.143495 984.560224c-4.732773 23.090196-25.098039 39.009524-47.757983 39.009524z m-294.579272-233.770308l282.962465 201.357983c2.294678 1.577591 4.87619 2.72493 7.601121 3.298599 10.89972 2.151261 21.512605-4.87619 23.663865-15.632493L1137.914364 52.777591c0.860504-3.872269 0.430252-7.887955-1.003922-11.616807-4.159104-10.32605-15.919328-15.202241-26.101961-11.043137L41.201759 463.52493c-5.306443 2.151261-9.465546 6.597199-11.47339 12.047059-1.721008 5.019608-1.434174 10.469468 0.860505 15.345658 2.294678 4.87619 6.453782 8.461625 11.473389 10.182633l265.178711 91.787115L410.214644 905.967507c1.434174 4.589356 3.872269 8.748459 6.884033 12.477311 6.597199 8.031373 15.919328 12.907563 26.101961 13.911485 10.32605 1.003922 20.365266-2.007843 28.396639-8.605042l163.208963-133.951821z" fill="#4A4A4A" ></path><path d="M307.097557 592.743978l105.698599 316.091876c6.310364 18.787675 26.532213 28.970308 45.319888 22.659944 4.159104-1.434174 7.887955-3.442017 11.186555-6.166946l164.786555-133.951821-165.360224-118.892997c297.017367-287.982073 447.462185-433.980952 451.191036-437.853222 0.573669-0.573669 2.581513-3.442017 0.430252-7.027451-1.290756-1.577591-3.298599-3.298599-7.027451-2.15126-202.218487 120.327171-404.293557 242.805602-606.22521 367.291877z" fill="#CAE0EE" ></path><path d="M446.786072 934.794398c-5.736695 0-11.329972-1.290756-16.636414-3.872269-8.891877-4.445938-15.632493-12.047059-18.787675-21.512605L305.376549 592.313725l1.003921-0.573669C507.308201 467.684034 711.391114 344.058263 912.60568 224.161345l0.286835-0.143418c3.585434-1.147339 6.310364-0.286835 8.605042 2.581513l0.143417 0.143417c2.438095 4.015686 0.573669 7.457703-0.573669 8.74846-3.872269 4.015686-155.177591 150.87507-450.043698 436.705882l165.503642 119.036414-166.220728 135.09916c-3.442017 2.868347-7.457703 5.019608-11.760225 6.453782-3.728852 1.290756-7.744538 2.007843-11.760224 2.007843z m-137.967507-341.333334l105.268348 314.944538c2.868347 8.748459 9.035294 15.77591 17.210084 19.935014 8.17479 4.159104 17.496919 4.732773 26.245378 1.864426 3.872269-1.290756 7.60112-3.298599 10.756302-5.880112l163.352381-132.804482L466.434252 672.627451l1.290756-1.147339C763.308201 384.932213 915.043775 237.642577 918.772627 233.626891c0 0 2.007843-2.294678 0.286835-5.306443-1.003922-1.290756-2.438095-2.438095-5.306443-1.577591-200.784314 119.610084-404.293557 242.94902-604.934454 366.718207z" fill="#CAE0EE" ></path><path d="M460.840974 924.898599l7.457703-253.561904 165.933894 119.896918-168.658824 135.959664c-1.290756 1.003922-3.011765 0.860504-4.015686-0.430252-0.430252-0.430252-0.717087-1.147339-0.717087-1.864426z" fill="#94C3E2" ></path><path d="M463.709322 929.344538c-1.290756 0-2.438095-0.573669-3.2986-1.577591-0.573669-0.860504-1.003922-1.864426-1.003921-2.868348l7.60112-256.286834 169.519328 122.621848-1.434174 1.147339-168.658823 135.959664c-0.860504 0.717087-1.721008 1.003922-2.72493 1.003922z m6.023529-255.282913l-7.457703 250.836974c0 0.286835 0.143417 0.717087 0.286835 1.003922 0.430252 0.573669 1.434174 0.717087 2.007843 0.286835l167.22465-134.812325-162.061625-117.315406z" fill="#94C3E2" ></path></symbol><symbol id="icon-lianjie" viewBox="0 0 1079 1024"><path d="M695.355535 432.666896c-0.553495-1.10699-0.885592-2.186305-1.383737-3.265619-0.193723-0.193723-0.193723-0.359772-0.359771-0.719543-12.508983-26.318678-39.436506-43.366319-69.325226-41.013966-39.076734 3.265619-68.439634 39.021384-65.312388 79.841627 0.857917 10.516401 3.653066 20.147211 7.998 28.83708 19.78744 46.659613 11.097571 103.448181-25.377737 141.750022l-191.094085 199.950001a118.088119 118.088119 0 0 1-171.998513 0c-47.434506-49.537786-47.434506-130.098956 0-179.636742l71.234782-74.389703-0.52582-0.553494a75.911814 75.911814 0 0 0 24.326097-61.880721c-3.127246-40.820243-37.3609-71.51153-76.437634-68.24591a69.463599 69.463599 0 0 0-46.908685 23.966325l-0.166049-0.193723-72.618519 75.856464c-103.226783 107.793115-103.226783 282.36538 0 390.158495 103.171433 107.793115 270.299193 107.793115 373.498301 0l191.619904-200.1714c80.256748-83.992838 97.636485-208.307773 52.83108-310.289193z" fill="#5c8add" ></path><path d="M1002.047012 80.865592c-103.226783-107.82079-270.382217-107.82079-373.581325 0l-191.619905 200.199075c-80.284423 83.854464-97.66416 208.197074-52.997128 310.233843 0.52582 1.079315 0.857917 2.15863 1.383737 3.26562 0.166048 0.166048 0.166048 0.359772 0.332097 0.719543 12.536658 26.291004 39.46418 43.366319 69.3529 41.013966 39.076734-3.265619 68.439634-39.021384 65.312388-79.869302a78.679288 78.679288 0 0 0-7.998-28.864755c-19.78744-46.631938-11.097571-103.448181 25.377737-141.750022l191.287808-199.839302a118.088119 118.088119 0 0 1 172.026188 0c47.434506 49.537786 47.434506 130.126631 0 179.692091l-71.234782 74.417378 0.52582 0.553495a75.939489 75.939489 0 0 0-24.353772 61.88072c3.15492 40.847917 37.3609 71.51153 76.465309 68.245911a69.463599 69.463599 0 0 0 46.908685-23.938651l0.166049 0.166048 72.646194-75.856464c103.03306-107.82079 103.03306-282.642127 0-390.269194z" fill="#5c8add" ></path></symbol><symbol id="icon-liaotian" viewBox="0 0 1171 1024"><path d="M1068.71699 0.243751H102.193768C46.228437 0.243751 0.500666 45.045267 0.500666 99.74309v696.251622c0 54.697824 45.727771 99.450589 101.693102 99.450589h329.113198l120.851966 114.465677a48.652788 48.652788 0 0 0 66.641644 0l120.851966-114.465677h329.064448c55.965331 0 101.741852-44.752765 101.741852-99.450589V99.74309C1170.458842 45.045267 1124.682321 0.243751 1068.71699 0.243751z m-439.776354 596.849784h-370.989696c-27.933915 0-50.846551-22.425133-50.846551-49.774045 0-27.348912 22.912636-49.725294 50.846551-49.725294h370.989696c27.933915 0 50.846551 22.376382 50.846551 49.725294 0 27.348912-22.912636 49.774045-50.846551 49.774045z m287.18795-211.381252H254.782171a50.456549 50.456549 0 0 1-50.846551-49.725294c0-27.397662 22.912636-49.774045 50.846551-49.774045h661.346415c27.933915 0 50.846551 22.376382 50.846551 49.774045 0 27.348912-22.912636 49.725294-50.846551 49.725294z" fill="#5C8ADD" ></path></symbol><symbol id="icon-xinfeng" viewBox="0 0 1400 1024"><path d="M1301.63733163 214.78520234a207.81921797 207.81921797 0 0 1 7.02423018 52.42036465v489.73590176a205.10753818 205.10753818 0 0 1-205.05853125 205.05853125H283.05853124A205.15654424 205.15654424 0 0 1 77.99999999 756.79444971V267.20556699a201.36672685 201.36672685 0 0 1 7.02423106-52.42036465L586.24393329 562.1905874c69.44187217 51.96297217 146.36536612 49.13694404 214.1736961 0zM1103.60303056 62.0000167H283.05853124A204.50312753 204.50312753 0 0 0 106.37462518 163.41030547l489.71956641 335.75823018c62.43397646 50.77048623 127.85733457 50.31309463 194.62019765 0L1280.28693749 163.41030547A204.68281729 204.68281729 0 0 0 1103.60303056 62.0000167z m0 0" fill="#5c8add" ></path></symbol><symbol id="icon-QQ1" viewBox="0 0 1024 1024"><path d="M0 512a512 512 0 1 0 1024 0A512 512 0 1 0 0 512z" fill="#18ACFC" ></path><path d="M500.113 228.39c118.396-1.518 178.924 61.004 201 156 3.497 15.048 0.15 34.807 0 50 27.143 5.682 33.087 60.106 10 75v1h1c8.26 14.33 19.04 28.125 26 44 7.332 16.723 9.306 35.16 14 55 4.024 17.01-2.287 51.505-10 57-0.771 0.683-2.231 1.312-3 2-14.601-3.016-30.377-16.865-38-27-3.065-4.074-5.275-9.672-10-12-0.395 21.568-12.503 41.15-22 55-3.514 5.123-14.073 13.217-14 18 3.691 2.836 8.305 2.956 13 5 10.513 4.577 25.449 13.168 32 22 2.334 3.146 5.548 7.555 7 11 16.193 38.414-36.527 48.314-63 54-27.185 5.839-77.818-10.224-92-19-8.749-5.414-16.863-18.573-29-19-3.666 2.389-14.438 1.132-20 1-16.829 32.804-101.913 47.868-148 31-14.061-5.146-43.398-17.695-38-40 4.437-18.327 19.947-29.224 35-37 5.759-2.975 18.915-4.419 22-10-13.141-8.988-24.521-28.659-31-44-3.412-8.077-4.193-25.775-9-32-7.789 12.245-32.097 36.91-52 33-3.071-4.553-7.213-9.097-9-15-4.792-15.835-1.81-40.379 2-54 8.117-29.02 16.965-50.623 32-72 4.672-6.643 11.425-12.135 16-19-8.945-9.733-6.951-37.536-1-49 4.002-7.709 9.701-7.413 10-20-1.92-3.022-0.071-8.604-1-13-4.383-20.75 3.273-47.552 9-63 19.8-53.421 53.712-90.466 105-112 11.986-5.033 25.833-7.783 39-11 5.322-1.3 11.969 0.518 16-2z" fill="#FFFFFF" ></path></symbol><symbol id="icon-rss" viewBox="0 0 1024 1024"><path d="M749.61196492 908.06119793C749.61196492 560.41848146 463.58151854 274.36328126 115.93880207 274.36328126V115.93880207c434.50388795 0 792.12239584 357.61850789 792.12239586 792.12239586zM224.55858562 690.72261555a108.91682943 108.91682943 0 0 1 108.69404499 108.74355267C333.25263061 859.29616292 284.24005737 908.06119793 224.31104736 908.06119793 164.48105265 908.06119793 115.96355592 859.41993206 115.96355592 799.46616822s48.69077351-108.71879883 108.61978351-108.74355267zM641.01693522 908.06119793h-153.96879069c0-203.60020956-167.50913289-371.13409627-371.10934246-371.13409629v-153.96879068c288.03550619 0 525.07813313 237.11688843 525.07813315 525.10288697z" fill="#FFA500" ></path></symbol><symbol id="icon-youxiang" viewBox="0 0 1024 1024"><path d="M583.60666667 972h-68.08c-8.43333333 0-15.33333333-6.9-15.33333334-15.33333333V609.52c0-8.43333333 6.9-15.33333333 15.33333334-15.33333333h68.08c8.43333333 0 15.33333333 6.9 15.33333333 15.33333333V956.66666667c0 8.43333333-6.9 15.33333333-15.33333333 15.33333333z" fill="#629FF9" ></path><path d="M294.42 167c-113.62 0-205.77333333 92-205.77333333 205.31333333v336.72h411.39333333V372.31333333c0.15333333-113.31333333-92-205.31333333-205.62-205.31333333z" fill="#2166CC" ></path><path d="M519.97333333 627H216.98666667c-25.45333333 0-46-20.54666667-46-46V393.78c0-25.45333333 20.54666667-46 46-46h302.98666666c25.45333333 0 46 20.54666667 46 46V581c0 25.45333333-20.54666667 46-46 46z" fill="#D2E4FF" ></path><path d="M565.97333333 397a49.22 49.22 0 0 0-49.37333333-49.22H220.36c-27.29333333 0-49.37333333 22.08-49.37333333 49.22v10.27333333l179.4 94.60666667c11.34666667 5.98 24.84 5.98 36.18666666 0l179.4-94.60666667v-10.27333333z" fill="#FFFFFF" ></path><path d="M730.5 167h-427.8v0.46c109.78666667 4.29333333 197.49333333 94.3 197.49333333 205.00666667v336.72h411.39333334c27.29333333 0 49.37333333-22.08 49.37333333-49.22V397c0-126.96-103.19333333-230-230.46-230z" fill="#4E8DF6" ></path><path d="M845.80666667 52H681.12666667c-9.04666667 0-16.40666667 7.36-16.40666667 16.40666667v336.72a24.67133333 24.67133333 0 1 0 49.37333333 0V134.18666667h131.71333334c9.04666667 0 16.40666667-7.36 16.40666666-16.40666667V68.40666667c0-9.04666667-7.36-16.40666667-16.40666666-16.40666667z" fill="#2166CC" ></path><path d="M896.25333333 659.81333333h-35.11333333c-8.43333333 0-15.33333333-6.9-15.33333333-15.33333333v-35.11333333c0-8.43333333 6.9-15.33333333 15.33333333-15.33333334h35.11333333c8.43333333 0 15.33333333 6.9 15.33333334 15.33333334v35.11333333c0 8.58666667-6.9 15.33333333-15.33333334 15.33333333z" fill="#FFFFFF" ></path><path d="M88.8 709.18666667l-24.22666667 131.40666666c-9.66 54.43333333 26.83333333 98.59333333 81.26666667 98.59333334h213.9c54.58666667 0 106.56666667-44.16 116.22666667-98.59333334l23.15333333-131.40666666H88.8z" fill="#2974CE" ></path></symbol><symbol id="icon-gitHub" viewBox="0 0 1049 1024"><path d="M523.6581816 52C262.83923907 52 52 262.8401375 52 523.6581816c0 208.49703047 135.09433812 384.97758117 322.50789391 447.44906532 23.42658172 4.68531653 32.01647887-10.15136894 32.01647796-22.64584583 0-10.93210574-0.78163433-48.41463703-0.78163433-87.45953855-131.18885996 28.11189824-158.5200223-56.22379738-158.52002231-56.22379739-21.08437312-54.66232469-52.3201152-68.71827336-52.3201152-68.71827335-42.94858371-28.89353348 3.12384382-28.89353348 3.12384384-28.89353348 47.63479867 3.12384382 72.62285398 48.41643391 72.62285398 48.4164339 42.16784782 71.84121875 110.10538527 51.53758242 137.43654672 39.04400399 3.90457972-30.45500618 16.3990566-51.5393793 29.67427028-63.25222094-104.64023039-10.93300418-214.74561566-51.53848086-214.74561657-232.70524742 0-51.53848086 18.74126609-93.70632867 48.4164339-126.50444187-4.68621496-11.71284164-21.08527156-60.12837711 4.6844181-124.94207075 0 0 39.82563922-12.49447688 129.62738726 48.41463704 37.48253129-10.15136894 78.08980484-15.61742227 117.91454562-15.61742137s80.43201433 5.46605242 117.91454473 15.61742137c89.80264648-60.90911391 129.62828571-48.41463703 129.62828571-48.41463704 25.76879122 64.81369363 9.37063305 113.22922911 4.68531651 124.94207075 30.45410773 32.79721477 48.41463703 74.96506258 48.41463703 126.50444187 0 181.16676656-110.10538527 220.99150644-215.52545401 232.70524742 17.1797934 14.83668547 32.01647887 42.94858371 32.01647886 87.45953946 0 63.25222094-0.78163433 114.009965-0.78163523 129.62738636 0 12.49447688 8.59079468 27.33116234 32.01737731 22.64584583 187.41265734-62.4705866 322.50699547-238.95203574 322.50699546-447.44996375C995.31636231 262.8401375 783.69369203 52 523.6581816 52z" fill="#663399" ></path><path d="M230.82365863 729.03136735c-0.7807359 2.34310703-4.68531653 3.12384382-7.80916035 1.56237113s-5.46605242-4.68531653-3.90368129-7.02842356c0.7807359-2.34220859 4.68531653-3.12384382 7.80826192-1.56147269s4.68531653 4.68531653 3.90457972 7.02752512z m18.7412661 21.08437312c-2.34220859 2.34220859-7.02752512 0.78163433-9.37063305-2.34310703-3.12294539-3.12294539-3.90457972-7.80826192-1.5614727-10.15136894 2.34220859-2.34220859 6.24678922-0.7807359 9.37063305 2.34310702 3.12384382 3.90457972 3.90457972 8.58899782 1.5614727 10.15136895zM268.30618992 777.44690281c-3.12294539 2.34220859-7.80826192 0-10.15136895-3.90457972-3.12384382-3.90457972-3.12384382-9.37063305 0-10.93210574 3.12384382-2.34310703 7.80916035 0 10.15226739 3.90457972 3.12294539 3.90368129 3.12294539 8.58899782 0 10.93210574z m25.76968965 26.55042555c-2.34220859 3.12294539-7.80916035 2.34220859-12.49447688-1.56237113-3.90457972-3.90368129-5.46605242-9.37063305-2.34220859-11.71284164 2.34220859-3.12384382 7.80826192-2.34310703 12.49447687 1.56147269 3.90368129 3.12384382 4.68531653 8.58989625 2.3422086 11.71374008z m35.1403227 14.83668637c-0.78163433 3.90457972-6.24768766 5.46605242-11.71374008 3.90457972-5.46605242-1.5614727-8.58899782-6.24768766-7.80916036-9.37063305 0.78163433-3.90457972 6.24768766-5.46605242 11.71374009-3.90457972 5.46605242 1.5614727 8.58899782 5.46605242 7.80916035 9.37063305z m38.26416562 3.12384382c0 3.90457972-4.68621496 7.02752512-10.15226738 7.02752512-5.46605242 0-10.15226738-3.12294539-10.15226739-7.02752512s4.68621496-7.02842356 10.15226739-7.02842445c5.46605242 0 10.15226738 3.12384382 10.15226738 7.02842445z m35.92016106-6.24768766c0.78163433 3.90457972-3.12384382 7.80916035-8.58899872 8.58989625-5.46695086 0.78163433-10.15226738-1.5614727-10.93390172-5.46605241-0.77983747-3.90457972 3.12384382-7.80916035 8.5907947-8.58899872 5.46605242-0.78163433 10.15136894 1.56057426 10.93210574 5.46515488z m0 0" fill="#663399" ></path></symbol><symbol id="icon-bilibili" viewBox="0 0 1024 1024"><path d="M832.61667555 181.33447111h-164.32545185l74.45617778-74.45617778c12.84020148-12.84020148 12.84020148-30.8140563 0-43.65425778-12.84020148-12.84020148-30.8140563-12.84020148-43.65425778 0L573.2882963 189.04101925H450.04420741L324.2272237 63.23617185c-10.26730667-12.84020148-25.68040297-15.40096-41.08136295-7.70654815-2.57289482 0-2.57289482 2.57289482-5.13365334 5.13365333-12.84020148 12.84020148-12.84020148 30.8140563 0 43.65425779l77.02907259 77.02907259h-164.32545185c-89.86927408 0-164.32545185 74.45617778-164.32545185 164.32545184v408.24073483c0 87.29637925 74.45617778 161.75255703 164.32545185 161.75255703h25.68040296c0 30.8140563 25.68040297 53.92156445 53.92156444 53.92156444s53.92156445-25.68040297 53.92156445-53.92156444H704.23893333c2.57289482 30.8140563 28.24116148 53.92156445 59.05521778 51.34866964 28.24116148-2.57289482 48.78791111-23.10750815 51.34866964-51.34866964h20.53461333c89.86927408 0 164.32545185-74.45617778 164.32545184-164.32545186V343.09916445c-2.56075852-89.86927408-77.02907259-161.76469333-166.88621037-161.76469334z m-5.13365333 634.19429926H200.99527111c-33.37481482 0-59.05521778-28.24116148-61.61597629-61.61597629l-2.57289482-415.94728297c0-33.37481482 28.24116148-61.6159763 61.6159763-61.61597629h626.48775111c33.37481482 0 59.05521778 28.24116148 61.61597629 61.61597629l2.57289482 415.94728297c-2.57289482 35.93557333-28.24116148 61.6159763-61.6159763 61.61597629z" fill="#ff7299" ></path><path d="M403.82919111 417.55534222l15.40096 77.0290726-205.40681481 38.50846815-15.40096-77.0290726 205.40681481-38.50846815z m197.70026667 77.0290726l15.40096-77.0290726 205.40681481 38.50846815-15.40096 77.0290726-205.40681481-38.50846815z m41.08136297 161.75255703c0 2.57289482 0 7.70654815-2.57289483 10.26730667-12.84020148 28.24116148-41.08136297 46.2150163-74.45617777 48.78791111-20.53461333 0-41.08136297-10.26730667-53.92156445-25.68040296-15.40096 15.40096-33.37481482 25.68040297-53.92156445 25.68040296-30.8140563-2.57289482-59.05521778-20.53461333-74.45617777-48.78791111 0-2.57289482-2.57289482-5.13365333-2.57289481-10.26730667 0-10.26730667 7.70654815-17.97385482 17.97385481-20.53461333h2.57289482c7.70654815 0 12.84020148 2.57289482 15.40096 10.26730666 0 0 20.53461333 28.24116148 38.50846815 28.24116149 35.94770963 0 35.94770963-30.8140563 56.48232296-53.92156445 23.10750815 25.68040297 23.10750815 53.92156445 56.48232296 53.92156445 23.10750815 0 38.50846815-28.24116148 38.50846815-28.24116149 2.57289482-5.13365333 10.26730667-10.26730667 15.40096-10.26730666 10.26730667-2.57289482 17.97385482 5.13365333 20.53461333 15.40096v5.13365333h0.0364089z" fill="#ff7299" ></path></symbol></svg>',    o = (o = document.getElementsByTagName("script"))[o.length - 1].getAttribute("data-injectcss"),    p = function (c, l) {      l.parentNode.insertBefore(c, l);    };  if (o && !c.__iconfont__svg__cssinject__) {    c.__iconfont__svg__cssinject__ = !0;    try {      document.write(        "<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>"      );    } catch (c) {      console && console.log(c);    }  }  function d() {    i || ((i = !0), a());  }  function m() {    try {      t.documentElement.doScroll("left");    } catch (c) {      return void setTimeout(m, 50);    }    d();  }  (l = function () {    var c,      l = document.createElement("div");    (l.innerHTML = v),      (v = null),      (l = l.getElementsByTagName("svg")[0]) &&        (l.setAttribute("aria-hidden", "true"),        (l.style.position = "absolute"),        (l.style.width = 0),        (l.style.height = 0),        (l.style.overflow = "hidden"),        (l = l),        (c = document.body).firstChild ? p(l, c.firstChild) : c.appendChild(l));  }),    document.addEventListener      ? ~["complete", "loaded", "interactive"].indexOf(document.readyState)        ? setTimeout(l, 0)        : ((h = function () {            document.removeEventListener("DOMContentLoaded", h, !1), l();          }),          document.addEventListener("DOMContentLoaded", h, !1))      : document.attachEvent &&        ((a = l),        (t = c.document),        (i = !1),        m(),        (t.onreadystatechange = function () {          "complete" == t.readyState && ((t.onreadystatechange = null), d());        }));})(window);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/coin/coin.css"/>
      <url>/css/coin/coin.css</url>
      
        <content type="html"><![CDATA[.tip-button {  border: 0;  border-radius: 0.25rem;  cursor: pointer;  font-size: 20px;  font-weight: 600;  height: 2.6rem;  margin-bottom: -4rem;  outline: 0;  position: relative;  top: 0;  transform-origin: 0% 100%;  transition: transform 50ms ease-in-out;  width: auto;  -webkit-tap-highlight-color: transparent;}.tip-button:active {  transform: rotate(4deg);}.tip-button.clicked {  animation: 150ms ease-in-out 1 shake;  pointer-events: none;}.tip-button.clicked .tip-button__text {  opacity: 0;  transition: opacity 100ms linear 200ms;}.tip-button.clicked::before {  height: 0.5rem;  width: 60%;  background: #4a90e2;}.tip-button.clicked .coin {  transition: margin-bottom 1s linear 200ms;  margin-bottom: 0;}.tip-button.shrink-landing::before {  transition: width 200ms ease-in;  width: 0;}.tip-button.coin-landed::after {  opacity: 1;  transform: scale(1);  transform-origin: 50% 100%;}.tip-button.coin-landed .coin-wrapper {  background: radial-gradient(circle at 35% 97%, rgba(3, 16, 50, 0.4) 0.04rem, transparent 0.04rem), radial-gradient(      circle at 45% 92%,      rgba(3, 16, 50, 0.4) 0.04rem,      transparent 0.02rem    ), radial-gradient(circle at 55% 98%, rgba(3, 16, 50, 0.4) 0.04rem, transparent 0.04rem), radial-gradient(circle at        65% 96%, rgba(3, 16, 50, 0.4) 0.06rem, transparent 0.06rem);  background-position: center bottom;  background-size: 100%;  bottom: -1rem;  opacity: 0;  transform: scale(2) translateY(-10px);}.tip-button__text {  color: #fff;  margin-right: 1.8rem;  opacity: 1;  position: relative;  transition: opacity 100ms linear 500ms;  z-index: 3;}.tip-button::before {  border-radius: 0.25rem;  bottom: 0;  content: "";  display: block;  height: 100%;  left: 50%;  position: absolute;  transform: translateX(-50%);  transition: height 250ms ease-in-out 400ms, width 250ms ease-in-out 300ms;  width: 100%;  z-index: 2;}.tip-button::after {  bottom: -1rem;  color: white;  content: "ヾ(≧O≦)〃嗷~"; /*点击后显示的内容*/  height: 110%;  left: 0;  opacity: 0;  position: absolute;  pointer-events: none;  text-align: center;  transform: scale(0);  transform-origin: 50% 20%;  transition: transform 200ms cubic-bezier(0, 0, 0.35, 1.43);  width: 100%;  z-index: 1;}.coin-wrapper {  background: none;  bottom: 0;  height: 18rem;  left: 0;  opacity: 1;  overflow: hidden;  pointer-events: none;  position: absolute;  transform: none;  transform-origin: 50% 100%;  transition: opacity 200ms linear 100ms, transform 300ms ease-out;  width: 100%;}.coin {  --front-y-multiplier: 0;  --back-y-multiplier: 0;  --coin-y-multiplier: 0;  --coin-x-multiplier: 0;  --coin-scale-multiplier: 0;  --coin-rotation-multiplier: 0;  --shine-opacity-multiplier: 0.4;  --shine-bg-multiplier: 50%;  bottom: calc(var(--coin-y-multiplier) * 1rem - 3.5rem);  height: 3.5rem;  margin-bottom: 3.05rem;  position: absolute;  right: calc(var(--coin-x-multiplier) * 34% + 16%);  transform: translateX(50%) scale(calc(0.4 + var(--coin-scale-multiplier))) rotate(calc(var(            --coin-rotation-multiplier          ) * -1deg));  transition: opacity 100ms linear 200ms;  width: 3.5rem;  z-index: 3;}.coin__front,.coin__middle,.coin__back,.coin::before,.coin__front::after,.coin__back::after {  border-radius: 50%;  box-sizing: border-box;  height: 100%;  left: 0;  position: absolute;  width: 100%;  z-index: 3;}.coin__front {  background: radial-gradient(circle at 50% 50%, transparent 50%, rgba(115, 124, 153, 0.4) 54%, #c2cadf 54%),    linear-gradient(210deg, #8590b3 32%, transparent 32%), linear-gradient(150deg, #8590b3 32%, transparent 32%),    linear-gradient(to right, #8590b3 22%, transparent 22%, transparent 78%, #8590b3 78%), linear-gradient(      to bottom,      #fcfaf9 44%,      transparent 44%,      transparent 65%,      #fcfaf9 65%,      #fcfaf9 71%,      #8590b3 71%    ), linear-gradient(to right, transparent 28%, #fcfaf9 28%, #fcfaf9 34%, #8590b3 34%, #8590b3 40%, #fcfaf9 40%, #fcfaf9        47%, #8590b3 47%, #8590b3 53%, #fcfaf9 53%, #fcfaf9 60%, #8590b3 60%, #8590b3 66%, #fcfaf9 66%, #fcfaf9 72%, transparent        72%);  background-color: #8590b3;  background-size: 100% 100%;  transform: translateY(calc(var(--front-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--front-scale-multiplier));}.coin__front::after {  background: rgba(0, 0, 0, 0.2);  content: "";  opacity: var(--front-y-multiplier);}.coin__middle {  background: #737c99;  transform: translateY(calc(var(--middle-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--middle-scale-multiplier));}.coin__back {  background: radial-gradient(circle at 50% 50%, transparent 50%, rgba(115, 124, 153, 0.4) 54%, #c2cadf 54%),    radial-gradient(circle at 50% 40%, #fcfaf9 23%, transparent 23%), radial-gradient(circle at 50% 100%, #fcfaf9 35%, transparent        35%);  background-color: #8590b3;  background-size: 100% 100%;  transform: translateY(calc(var(--back-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--back-scale-multiplier));}.coin__back::after {  background: rgba(0, 0, 0, 0.2);  content: "";  opacity: var(--back-y-multiplier);}.coin::before {  background: radial-gradient(circle at 25% 65%, transparent 50%, rgba(255, 255, 255, 0.9) 90%), linear-gradient(55deg, transparent        calc(var(--shine-bg-multiplier) + 0%), #e9f4ff calc(var(--shine-bg-multiplier) + 0%), transparent calc(var(              --shine-bg-multiplier            ) + 50%));  content: "";  opacity: var(--shine-opacity-multiplier);  transform: translateY(calc(var(--middle-y-multiplier) * 0.3181818182rem / -2)) scaleY(var(--middle-scale-multiplier))    rotate(calc(var(--coin-rotation-multiplier) * 1deg));  z-index: 10;}.coin::after {  background: #737c99;  content: "";  height: 0.3181818182rem;  left: 0;  position: absolute;  top: 50%;  transform: translateY(-50%);  width: 100%;  z-index: 2;}@keyframes shake {  0% {    transform: rotate(4deg);  }  66% {    transform: rotate(-4deg);  }  100% {    transform: rotate();  }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/coin/coin.js"/>
      <url>/js/coin/coin.js</url>
      
        <content type="html"><![CDATA[var tipButtons = document.querySelectorAll(".tip-button");function coinAudio() {  var coinAudio = document.getElementById("coinAudio");  if (coinAudio) {    coinAudio.play(); //有音频时播放  }}// Loop through all buttons (allows for multiple buttons on page)tipButtons.forEach(button => {  var coin = button.querySelector(".coin");  // The larger the number, the slower the animation  coin.maxMoveLoopCount = 90;  button.addEventListener("click", () => {    if (/Android|webOS|BlackBerry/i.test(navigator.userAgent)) return true; //媒体选择    if (button.clicked) return;    button.classList.add("clicked");    // Wait to start flipping th coin because of the button tilt animation    setTimeout(() => {      // Randomize the flipping speeds just for fun      coin.sideRotationCount = Math.floor(Math.random() * 5) * 90;      coin.maxFlipAngle = (Math.floor(Math.random() * 4) + 3) * Math.PI;      button.clicked = true;      flipCoin();      coinAudio();    }, 50);  });  var flipCoin = () => {    coin.moveLoopCount = 0;    flipCoinLoop();  };  var resetCoin = () => {    coin.style.setProperty("--coin-x-multiplier", 0);    coin.style.setProperty("--coin-scale-multiplier", 0);    coin.style.setProperty("--coin-rotation-multiplier", 0);    coin.style.setProperty("--shine-opacity-multiplier", 0.4);    coin.style.setProperty("--shine-bg-multiplier", "50%");    coin.style.setProperty("opacity", 1);    // Delay to give the reset animation some time before you can click again    setTimeout(() => {      button.clicked = false;    }, 300);  };  var flipCoinLoop = () => {    coin.moveLoopCount++;    var percentageCompleted = coin.moveLoopCount / coin.maxMoveLoopCount;    coin.angle = -coin.maxFlipAngle * Math.pow(percentageCompleted - 1, 2) + coin.maxFlipAngle;    // Calculate the scale and position of the coin moving through the air    coin.style.setProperty("--coin-y-multiplier", -11 * Math.pow(percentageCompleted * 2 - 1, 4) + 11);    coin.style.setProperty("--coin-x-multiplier", percentageCompleted);    coin.style.setProperty("--coin-scale-multiplier", percentageCompleted * 0.6);    coin.style.setProperty("--coin-rotation-multiplier", percentageCompleted * coin.sideRotationCount);    // Calculate the scale and position values for the different coin faces    // The math uses sin/cos wave functions to similate the circular motion of 3D spin    coin.style.setProperty("--front-scale-multiplier", Math.max(Math.cos(coin.angle), 0));    coin.style.setProperty("--front-y-multiplier", Math.sin(coin.angle));    coin.style.setProperty("--middle-scale-multiplier", Math.abs(Math.cos(coin.angle), 0));    coin.style.setProperty("--middle-y-multiplier", Math.cos((coin.angle + Math.PI / 2) % Math.PI));    coin.style.setProperty("--back-scale-multiplier", Math.max(Math.cos(coin.angle - Math.PI), 0));    coin.style.setProperty("--back-y-multiplier", Math.sin(coin.angle - Math.PI));    coin.style.setProperty("--shine-opacity-multiplier", 4 * Math.sin((coin.angle + Math.PI / 2) % Math.PI) - 3.2);    coin.style.setProperty("--shine-bg-multiplier", -40 * (Math.cos((coin.angle + Math.PI / 2) % Math.PI) - 0.5) + "%");    // Repeat animation loop    if (coin.moveLoopCount < coin.maxMoveLoopCount) {      if (coin.moveLoopCount === coin.maxMoveLoopCount - 6) button.classList.add("shrink-landing");      window.requestAnimationFrame(flipCoinLoop);    } else {      button.classList.add("coin-landed");      coin.style.setProperty("opacity", 0);      setTimeout(() => {        button.classList.remove("clicked", "shrink-landing", "coin-landed");        setTimeout(() => {          resetCoin();        }, 300);      }, 1500);    }  };});]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtime.js"/>
      <url>/js/runtime/runtime.js</url>
      
        <content type="html"><![CDATA[var now = new Date();function createtime() {  var grt = new Date("11/22/2024 13:32:33");//11/22/2024 13:32:33  now.setTime(now.getTime() + 250);  var days = (now - grt) / 1e3 / 60 / 60 / 24,    dnum = Math.floor(days),    hours = (now - grt) / 1e3 / 60 / 60 - 24 * dnum,    hnum = Math.floor(hours);  1 == String(hnum).length && (hnum = "0" + hnum);  var minutes = (now - grt) / 1e3 / 60 - 1440 * dnum - 60 * hnum,    mnum = Math.floor(minutes);  1 == String(mnum).length && (mnum = "0" + mnum);  var seconds = (now - grt) / 1e3 - 86400 * dnum - 3600 * hnum - 60 * mnum,    snum = Math.round(seconds);  1 == String(snum).length && (snum = "0" + snum);  let currentTimeHtml = "";  (currentTimeHtml =    hnum < 18 && hnum >= 9      ? `<img class='boardsign' src='https://npm.elemecdn.com/anzhiyu-blog@2.0.4/img/badge/安知鱼-上班摸鱼中.svg' title='距离月入25k也就还差一个大佬带我~'><span class='textTip'> <br> 本站居然运行了 ${dnum} 天</span><span id='runtime'> ${hnum} 小时 ${mnum} 分 ${snum} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`      : `<img class='boardsign' src='https://npm.elemecdn.com/anzhiyu-blog@2.0.4/img/badge/安知鱼-下班啦.svg' title='下班了就该开开心心的玩耍，嘿嘿~'><span class='textTip'> <br> 本站居然运行了 ${dnum} 天</span><span id='runtime'> ${hnum} 小时 ${mnum} 分 ${snum} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`),    document.getElementById("workboard") && (document.getElementById("workboard").innerHTML = currentTimeHtml);}setInterval(() => {  createtime();}, 250);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtime.min.js"/>
      <url>/js/runtime/runtime.min.js</url>
      
        <content type="html"><![CDATA[function createtime(){var e=new Date("11/22/2024 13:32:33");now.setTime(now.getTime()+250);var t=(now-e)/1e3/60/60/24,a=Math.floor(t),n=(now-e)/1e3/60/60-24*a,r=Math.floor(n);1==String(r).length&&(r="0"+r);var s=(now-e)/1e3/60-1440*a-60*r,o=Math.floor(s);1==String(o).length&&(o="0"+o);var i=(now-e)/1e3-86400*a-3600*r-60*o,l=Math.round(i);1==String(l).length&&(l="0"+l);let g="";g=r<18&&r>=9?`<img class='boardsign' src='https://npm.elemecdn.com/anzhiyu-blog@2.0.4/img/badge/安知鱼-上班摸鱼中.svg' title='距离月入25k也就还差一个大佬带我~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${o} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`:`<img class='boardsign' src='https://npm.elemecdn.com/anzhiyu-blog@2.0.4/img/badge/安知鱼-下班啦.svg' title='下班了就该开开心心的玩耍，嘿嘿~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${o} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`,document.getElementById("workboard")&&(document.getElementById("workboard").innerHTML=g)}var now=new Date;setInterval(()=>{createtime()},250);]]></content>
      
    </entry>
    
    
  
</search>
